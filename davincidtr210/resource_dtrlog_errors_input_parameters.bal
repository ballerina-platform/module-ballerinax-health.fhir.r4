// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r4;

public const string PROFILE_BASE_DTRLOGERRORSINPUTPARAMETERS = "http://hl7.org/fhir/us/davinci-dtr/StructureDefinition/dtr-log-errors-input-parameters";
public const RESOURCE_NAME_DTRLOGERRORSINPUTPARAMETERS = "Parameters";

# FHIR DTRLogErrorsInputParameters resource record.
#
# + resourceType - The type of the resource describes
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + 'parameter - A parameter passed to or received from the operation.
# * parameter Slicings
# 1) DTRLogErrorsInputParametersParameterQuestionnaire: The Questionnaire generating the errors (The reference SHOULD be version-specific)
#       - min = 0
#       - max = *
#
# 2) DTRLogErrorsInputParametersParameterOutcome: Operation Outcome associated with the Questionnaire/CQL
#       - min = 0
#       - max = *
#
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + language - The base language in which the resource is written.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
@r4:ResourceDefinition {
    resourceType: "Parameters",
    baseType: r4:DomainResource,
    profile: "http://hl7.org/fhir/us/davinci-dtr/StructureDefinition/dtr-log-errors-input-parameters",
    elements: {
    "meta" : {
            name: "meta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
        path: "Parameters.meta"
    },

    "parameter" : {
            name: "parameter",
            dataType: DTRLogErrorsInputParametersParameter,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
        path: "Parameters.parameter"
    },

    "implicitRules" : {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
        path: "Parameters.implicitRules"
    },

    "language" : {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
        path: "Parameters.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
    },

    "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
        path: "Parameters.id"
    }

},
    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}
public type DTRLogErrorsInputParameters record {|
    *r4:DomainResource;

    RESOURCE_NAME_DTRLOGERRORSINPUTPARAMETERS resourceType = RESOURCE_NAME_DTRLOGERRORSINPUTPARAMETERS;

r4:Meta meta?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Parameters.parameter constraint. This field must be an array containing at least one item."
        },

        maxLength: {
            value: 1,
            message: "Validation failed for $.Parameters.parameter constraint. This field must be an array containing at most one item."
        }
    }
DTRLogErrorsInputParametersParameter   [] 'parameter;
r4:uri implicitRules?;
r4:code language?;
string id?;
    r4:Element ...;
|};

# FHIR DTRLogErrorsInputParametersParameter datatype record.
#
# + valueTime - If the parameter is a data type.
# + valueTriggerDefinition - If the parameter is a data type.
# + valueMoney - If the parameter is a data type.
# + valueSignature - If the parameter is a data type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + valueUuid - If the parameter is a data type.
# + valueRatio - If the parameter is a data type.
# + valueParameterDefinition - If the parameter is a data type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - If the parameter is a data type.
# + valueUnsignedInt - If the parameter is a data type.
# + valueQuantity - If the parameter is a data type.
# + valueCanonical - If the parameter is a data type.
# + valueCount - If the parameter is a data type.
# + valueId - If the parameter is a data type.
# + 'resource - If the parameter is a whole resource.
# + valueCode - If the parameter is a data type.
# + valueAddress - If the parameter is a data type.
# + valueContactPoint - If the parameter is a data type.
# + valuePeriod - If the parameter is a data type.
# + valueSampledData - If the parameter is a data type.
# + valueTiming - If the parameter is a data type.
# + name - The name of the parameter (reference to the operation definition).
# + valueInstant - If the parameter is a data type.
# + valueAge - If the parameter is a data type.
# + valueDosage - If the parameter is a data type.
# + valueBase64Binary - If the parameter is a data type.
# + valueBoolean - If the parameter is a data type.
# + valueCoding - If the parameter is a data type.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueIdentifier - If the parameter is a data type.
# + valueExpression - If the parameter is a data type.
# + valueReference - If the parameter is a data type.
# + valueRange - If the parameter is a data type.
# + valueUri - If the parameter is a data type.
# + valueDistance - If the parameter is a data type.
# + valueUrl - If the parameter is a data type.
# + valueContactDetail - If the parameter is a data type.
# + valueMeta - If the parameter is a data type.
# + valueCodeableConcept - If the parameter is a data type.
# + valueMarkdown - If the parameter is a data type.
# + valueAttachment - If the parameter is a data type.
# + valueUsageContext - If the parameter is a data type.
# + valueDateTime - If the parameter is a data type.
# + valueHumanName - If the parameter is a data type.
# + valueRelatedArtifact - If the parameter is a data type.
# + valueDecimal - If the parameter is a data type.
# + valueDate - If the parameter is a data type.
# + valueOid - If the parameter is a data type.
# + valueContributor - If the parameter is a data type.
# + valueString - If the parameter is a data type.
# + valuePositiveInt - If the parameter is a data type.
# + valueDuration - If the parameter is a data type.
# + valueDataRequirement - If the parameter is a data type.
# + valueAnnotation - If the parameter is a data type.
@r4:DataTypeDefinition {
    name: "DTRLogErrorsInputParametersParameter",
    baseType: (),
    elements: {
    "valueTime": {
            name: "valueTime",
            dataType: r4:time,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueTriggerDefinition": {
            name: "valueTriggerDefinition",
            dataType: r4:TriggerDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueMoney": {
            name: "valueMoney",
            dataType: r4:Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueSignature": {
            name: "valueSignature",
            dataType: r4:Signature,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        path: "Parameters.parameter.modifierExtension"
    },

    "valueUuid": {
            name: "valueUuid",
            dataType: r4:uuid,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueRatio": {
            name: "valueRatio",
            dataType: r4:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueParameterDefinition": {
            name: "valueParameterDefinition",
            dataType: r4:ParameterDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        path: "Parameters.parameter.id"
    },

    "valueInteger": {
            name: "valueInteger",
            dataType: r4:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueUnsignedInt": {
            name: "valueUnsignedInt",
            dataType: r4:unsignedInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueQuantity": {
            name: "valueQuantity",
            dataType: r4:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueCanonical": {
            name: "valueCanonical",
            dataType: r4:canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueCount": {
            name: "valueCount",
            dataType: r4:Count,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueId": {
            name: "valueId",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "resource": {
            name: "resource",
            dataType: r4:Resource,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a whole resource.",
        path: "Parameters.parameter.resource"
    },

    "valueCode": {
            name: "valueCode",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueAddress": {
            name: "valueAddress",
            dataType: r4:Address,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueContactPoint": {
            name: "valueContactPoint",
            dataType: r4:ContactPoint,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valuePeriod": {
            name: "valuePeriod",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueSampledData": {
            name: "valueSampledData",
            dataType: r4:SampledData,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueTiming": {
            name: "valueTiming",
            dataType: r4:Timing,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The name of the parameter (reference to the operation definition).",
        path: "Parameters.parameter.name"
    },

    "valueInstant": {
            name: "valueInstant",
            dataType: r4:instant,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueAge": {
            name: "valueAge",
            dataType: r4:Age,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDosage": {
            name: "valueDosage",
            dataType: r4:Dosage,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueBase64Binary": {
            name: "valueBase64Binary",
            dataType: r4:base64Binary,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueCoding": {
            name: "valueCoding",
            dataType: r4:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        path: "Parameters.parameter.extension"
    },

    "valueIdentifier": {
            name: "valueIdentifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueExpression": {
            name: "valueExpression",
            dataType: r4:Expression,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueReference": {
            name: "valueReference",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueRange": {
            name: "valueRange",
            dataType: r4:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueUri": {
            name: "valueUri",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDistance": {
            name: "valueDistance",
            dataType: r4:Distance,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueUrl": {
            name: "valueUrl",
            dataType: r4:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueContactDetail": {
            name: "valueContactDetail",
            dataType: r4:ContactDetail,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueMeta": {
            name: "valueMeta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueMarkdown": {
            name: "valueMarkdown",
            dataType: r4:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueAttachment": {
            name: "valueAttachment",
            dataType: r4:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueUsageContext": {
            name: "valueUsageContext",
            dataType: r4:UsageContext,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDateTime": {
            name: "valueDateTime",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueHumanName": {
            name: "valueHumanName",
            dataType: r4:HumanName,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueRelatedArtifact": {
            name: "valueRelatedArtifact",
            dataType: r4:RelatedArtifact,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDecimal": {
            name: "valueDecimal",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDate": {
            name: "valueDate",
            dataType: r4:date,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueOid": {
            name: "valueOid",
            dataType: r4:oid,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueContributor": {
            name: "valueContributor",
            dataType: r4:Contributor,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueString": {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valuePositiveInt": {
            name: "valuePositiveInt",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDuration": {
            name: "valueDuration",
            dataType: r4:Duration,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDataRequirement": {
            name: "valueDataRequirement",
            dataType: r4:DataRequirement,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueAnnotation": {
            name: "valueAnnotation",
            dataType: r4:Annotation,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    }

},
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type DTRLogErrorsInputParametersParameter record {|
    *r4:BackboneElement;

r4:time valueTime?;
r4:TriggerDefinition valueTriggerDefinition?;
r4:Money valueMoney?;
r4:Signature valueSignature?;
r4:Extension   [] modifierExtension?;
r4:uuid valueUuid?;
r4:Ratio valueRatio?;
r4:ParameterDefinition valueParameterDefinition?;
string id?;
r4:integer valueInteger?;
r4:unsignedInt valueUnsignedInt?;
r4:Quantity valueQuantity?;
r4:canonical valueCanonical?;
r4:Count valueCount?;
r4:id valueId?;
r4:Resource 'resource?;
r4:code valueCode?;
r4:Address valueAddress?;
r4:ContactPoint valueContactPoint?;
r4:Period valuePeriod?;
r4:SampledData valueSampledData?;
r4:Timing valueTiming?;
string name;
r4:instant valueInstant?;
r4:Age valueAge?;
r4:Dosage valueDosage?;
r4:base64Binary valueBase64Binary?;
boolean valueBoolean?;
r4:Coding valueCoding?;
r4:Extension   [] extension?;
r4:Identifier valueIdentifier?;
r4:Expression valueExpression?;
r4:Reference valueReference?;
r4:Range valueRange?;
r4:uri valueUri?;
r4:Distance valueDistance?;
r4:urlType valueUrl?;
r4:ContactDetail valueContactDetail?;
r4:Meta valueMeta?;
r4:CodeableConcept valueCodeableConcept?;
r4:markdown valueMarkdown?;
r4:Attachment valueAttachment?;
r4:UsageContext valueUsageContext?;
r4:dateTime valueDateTime?;
r4:HumanName valueHumanName?;
r4:RelatedArtifact valueRelatedArtifact?;
decimal valueDecimal?;
r4:date valueDate?;
r4:oid valueOid?;
r4:Contributor valueContributor?;
string valueString?;
r4:positiveInt valuePositiveInt?;
r4:Duration valueDuration?;
r4:DataRequirement valueDataRequirement?;
r4:Annotation valueAnnotation?;
|};

# FHIR DTRLogErrorsInputParametersParameterQuestionnaire datatype record.
#
# + valueCanonical - If the parameter is a data type.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + 'resource - If the parameter is a whole resource.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The name of the parameter (reference to the operation definition).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "DTRLogErrorsInputParametersParameterQuestionnaire",
    baseType: (),
    elements: {
    "valueCanonical": {
            name: "valueCanonical",
            dataType: r4:canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        path: "Parameters.parameter.extension"
    },

    "resource": {
            name: "resource",
            dataType: r4:Resource,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a whole resource.",
        path: "Parameters.parameter.resource"
    },

    "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        path: "Parameters.parameter.modifierExtension"
    },

    "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The name of the parameter (reference to the operation definition).",
        path: "Parameters.parameter.name"
    },

    "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        path: "Parameters.parameter.id"
    }

},
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type DTRLogErrorsInputParametersParameterQuestionnaire record {|
    *DTRLogErrorsInputParametersParameter;

r4:canonical valueCanonical;
r4:Extension   [] extension?;
r4:Resource 'resource?;
r4:Extension   [] modifierExtension?;
string name;
string id?;
|};

# FHIR DTRLogErrorsInputParametersParameterOutcome datatype record.
#
# + valueTime - If the parameter is a data type.
# + valueTriggerDefinition - If the parameter is a data type.
# + valueMoney - If the parameter is a data type.
# + valueSignature - If the parameter is a data type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + valueUuid - If the parameter is a data type.
# + valueRatio - If the parameter is a data type.
# + valueParameterDefinition - If the parameter is a data type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - If the parameter is a data type.
# + valueUnsignedInt - If the parameter is a data type.
# + valueQuantity - If the parameter is a data type.
# + valueCanonical - If the parameter is a data type.
# + valueCount - If the parameter is a data type.
# + valueId - If the parameter is a data type.
# + 'resource - If the parameter is a whole resource.
# + valueCode - If the parameter is a data type.
# + valueAddress - If the parameter is a data type.
# + valueContactPoint - If the parameter is a data type.
# + valuePeriod - If the parameter is a data type.
# + valueSampledData - If the parameter is a data type.
# + valueTiming - If the parameter is a data type.
# + name - The name of the parameter (reference to the operation definition).
# + valueInstant - If the parameter is a data type.
# + valueAge - If the parameter is a data type.
# + valueDosage - If the parameter is a data type.
# + valueBase64Binary - If the parameter is a data type.
# + valueBoolean - If the parameter is a data type.
# + valueCoding - If the parameter is a data type.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueIdentifier - If the parameter is a data type.
# + valueExpression - If the parameter is a data type.
# + valueReference - If the parameter is a data type.
# + valueRange - If the parameter is a data type.
# + valueUri - If the parameter is a data type.
# + valueDistance - If the parameter is a data type.
# + valueUrl - If the parameter is a data type.
# + valueContactDetail - If the parameter is a data type.
# + valueMeta - If the parameter is a data type.
# + valueCodeableConcept - If the parameter is a data type.
# + valueMarkdown - If the parameter is a data type.
# + valueAttachment - If the parameter is a data type.
# + valueUsageContext - If the parameter is a data type.
# + valueDateTime - If the parameter is a data type.
# + valueHumanName - If the parameter is a data type.
# + valueRelatedArtifact - If the parameter is a data type.
# + valueDecimal - If the parameter is a data type.
# + valueDate - If the parameter is a data type.
# + valueOid - If the parameter is a data type.
# + valueContributor - If the parameter is a data type.
# + valueString - If the parameter is a data type.
# + valuePositiveInt - If the parameter is a data type.
# + valueDuration - If the parameter is a data type.
# + valueDataRequirement - If the parameter is a data type.
# + valueAnnotation - If the parameter is a data type.
@r4:DataTypeDefinition {
    name: "DTRLogErrorsInputParametersParameterOutcome",
    baseType: (),
    elements: {
    "valueTime": {
            name: "valueTime",
            dataType: r4:time,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueTriggerDefinition": {
            name: "valueTriggerDefinition",
            dataType: r4:TriggerDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueMoney": {
            name: "valueMoney",
            dataType: r4:Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueSignature": {
            name: "valueSignature",
            dataType: r4:Signature,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        path: "Parameters.parameter.modifierExtension"
    },

    "valueUuid": {
            name: "valueUuid",
            dataType: r4:uuid,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueRatio": {
            name: "valueRatio",
            dataType: r4:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueParameterDefinition": {
            name: "valueParameterDefinition",
            dataType: r4:ParameterDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
        path: "Parameters.parameter.id"
    },

    "valueInteger": {
            name: "valueInteger",
            dataType: r4:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueUnsignedInt": {
            name: "valueUnsignedInt",
            dataType: r4:unsignedInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueQuantity": {
            name: "valueQuantity",
            dataType: r4:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueCanonical": {
            name: "valueCanonical",
            dataType: r4:canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueCount": {
            name: "valueCount",
            dataType: r4:Count,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueId": {
            name: "valueId",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "resource": {
            name: "resource",
            dataType: r4:OperationOutcome,
            min: 1,
            max: 1,
            isArray: false,
            description: "If the parameter is a whole resource.",
        path: "Parameters.parameter.resource"
    },

    "valueCode": {
            name: "valueCode",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueAddress": {
            name: "valueAddress",
            dataType: r4:Address,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueContactPoint": {
            name: "valueContactPoint",
            dataType: r4:ContactPoint,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valuePeriod": {
            name: "valuePeriod",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueSampledData": {
            name: "valueSampledData",
            dataType: r4:SampledData,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueTiming": {
            name: "valueTiming",
            dataType: r4:Timing,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The name of the parameter (reference to the operation definition).",
        path: "Parameters.parameter.name"
    },

    "valueInstant": {
            name: "valueInstant",
            dataType: r4:instant,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueAge": {
            name: "valueAge",
            dataType: r4:Age,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDosage": {
            name: "valueDosage",
            dataType: r4:Dosage,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueBase64Binary": {
            name: "valueBase64Binary",
            dataType: r4:base64Binary,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueCoding": {
            name: "valueCoding",
            dataType: r4:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
        path: "Parameters.parameter.extension"
    },

    "valueIdentifier": {
            name: "valueIdentifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueExpression": {
            name: "valueExpression",
            dataType: r4:Expression,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueReference": {
            name: "valueReference",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueRange": {
            name: "valueRange",
            dataType: r4:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueUri": {
            name: "valueUri",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDistance": {
            name: "valueDistance",
            dataType: r4:Distance,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueUrl": {
            name: "valueUrl",
            dataType: r4:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueContactDetail": {
            name: "valueContactDetail",
            dataType: r4:ContactDetail,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueMeta": {
            name: "valueMeta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueMarkdown": {
            name: "valueMarkdown",
            dataType: r4:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueAttachment": {
            name: "valueAttachment",
            dataType: r4:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueUsageContext": {
            name: "valueUsageContext",
            dataType: r4:UsageContext,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDateTime": {
            name: "valueDateTime",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueHumanName": {
            name: "valueHumanName",
            dataType: r4:HumanName,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueRelatedArtifact": {
            name: "valueRelatedArtifact",
            dataType: r4:RelatedArtifact,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDecimal": {
            name: "valueDecimal",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDate": {
            name: "valueDate",
            dataType: r4:date,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueOid": {
            name: "valueOid",
            dataType: r4:oid,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueContributor": {
            name: "valueContributor",
            dataType: r4:Contributor,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueString": {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valuePositiveInt": {
            name: "valuePositiveInt",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDuration": {
            name: "valueDuration",
            dataType: r4:Duration,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueDataRequirement": {
            name: "valueDataRequirement",
            dataType: r4:DataRequirement,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    },

    "valueAnnotation": {
            name: "valueAnnotation",
            dataType: r4:Annotation,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the parameter is a data type.",
        path: "Parameters.parameter.value[x]"
    }

},
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type DTRLogErrorsInputParametersParameterOutcome record {|
    *DTRLogErrorsInputParametersParameter;

r4:time valueTime?;
r4:TriggerDefinition valueTriggerDefinition?;
r4:Money valueMoney?;
r4:Signature valueSignature?;
r4:Extension   [] modifierExtension?;
r4:uuid valueUuid?;
r4:Ratio valueRatio?;
r4:ParameterDefinition valueParameterDefinition?;
string id?;
r4:integer valueInteger?;
r4:unsignedInt valueUnsignedInt?;
r4:Quantity valueQuantity?;
r4:canonical valueCanonical?;
r4:Count valueCount?;
r4:id valueId?;
r4:OperationOutcome 'resource;
r4:code valueCode?;
r4:Address valueAddress?;
r4:ContactPoint valueContactPoint?;
r4:Period valuePeriod?;
r4:SampledData valueSampledData?;
r4:Timing valueTiming?;
string name;
r4:instant valueInstant?;
r4:Age valueAge?;
r4:Dosage valueDosage?;
r4:base64Binary valueBase64Binary?;
boolean valueBoolean?;
r4:Coding valueCoding?;
r4:Extension   [] extension?;
r4:Identifier valueIdentifier?;
r4:Expression valueExpression?;
r4:Reference valueReference?;
r4:Range valueRange?;
r4:uri valueUri?;
r4:Distance valueDistance?;
r4:urlType valueUrl?;
r4:ContactDetail valueContactDetail?;
r4:Meta valueMeta?;
r4:CodeableConcept valueCodeableConcept?;
r4:markdown valueMarkdown?;
r4:Attachment valueAttachment?;
r4:UsageContext valueUsageContext?;
r4:dateTime valueDateTime?;
r4:HumanName valueHumanName?;
r4:RelatedArtifact valueRelatedArtifact?;
decimal valueDecimal?;
r4:date valueDate?;
r4:oid valueOid?;
r4:Contributor valueContributor?;
string valueString?;
r4:positiveInt valuePositiveInt?;
r4:Duration valueDuration?;
r4:DataRequirement valueDataRequirement?;
r4:Annotation valueAnnotation?;
|};

