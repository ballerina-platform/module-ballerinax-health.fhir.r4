// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r4;

public const string PROFILE_BASE_EHRS_FM_RECORD_LIFECYCLE_EVENT___AUDIT_EVENT = "http://hl7.org/fhir/StructureDefinition/ehrsrle-auditevent";
public const RESOURCE_NAME_EHRS_FM_RECORD_LIFECYCLE_EVENT___AUDIT_EVENT = "AuditEvent";

# FHIR EHRS_FM_Record_Lifecycle_Event___Audit_Event resource record.
#
# + resourceType - The type of the resource describes
# + agent - An actor taking an active role in the event or activity that is logged.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - The period during which the activity occurred.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + 'source - The system that is reporting the event.
# + recorded - The time when the event was recorded.
# + 'type - Identifier for a family of the event. For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + subtype - Identifier for the category of event.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + outcomeDesc - A free text description of the outcome of the event.
# + action - Indicator for type of action performed during the event that generated the audit.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + purposeOfEvent - The purposeOfUse (reason) that was used during the event being recorded.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + entity - Specific instances of data or objects that have been accessed.
# + outcome - Indicates whether the event succeeded or failed.
@r4:ResourceDefinition {
    resourceType: "AuditEvent",
    baseType: r4:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/ehrsrle-auditevent",
    elements: {
        "agent" : {
            name: "agent",
            dataType: EHRS_FM_Record_Lifecycle_Event___Audit_EventAgent,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.agent"
        },
        "extension" : {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.extension"
        },
        "period" : {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.period"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "source" : {
            name: "source",
            dataType: EHRS_FM_Record_Lifecycle_Event___Audit_EventSource,
            min: 1,
            max: 1,
            isArray: false,
            path: "AuditEvent.source"
        },
        "recorded" : {
            name: "recorded",
            dataType: r4:instant,
            min: 1,
            max: 1,
            isArray: false,
            path: "AuditEvent.recorded"
        },
        "type" : {
            name: "type",
            dataType: r4:Coding,
            min: 1,
            max: 1,
            isArray: false,
            path: "AuditEvent.type",
            valueSet: "http://hl7.org/fhir/ValueSet/audit-event-type"
        },
        "contained" : {
            name: "contained",
            dataType: r4:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.contained"
        },
        "subtype" : {
            name: "subtype",
            dataType: r4:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.subtype",
            valueSet: "http://hl7.org/fhir/ValueSet/audit-event-sub-type"
        },
        "meta" : {
            name: "meta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.meta"
        },
        "outcomeDesc" : {
            name: "outcomeDesc",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.outcomeDesc"
        },
        "action" : {
            name: "action",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.action",
            valueSet: "http://hl7.org/fhir/ValueSet/audit-event-action|4.0.1"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.implicitRules"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.id"
        },
        "purposeOfEvent" : {
            name: "purposeOfEvent",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.purposeOfEvent",
            valueSet: "http://terminology.hl7.org/ValueSet/v3-PurposeOfUse"
        },
        "text" : {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.text"
        },
        "entity" : {
            name: "entity",
            dataType: EHRS_FM_Record_Lifecycle_Event___Audit_EventEntity,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "AuditEvent.entity"
        },
        "outcome" : {
            name: "outcome",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "AuditEvent.outcome",
            valueSet: "http://hl7.org/fhir/ValueSet/audit-event-outcome|4.0.1"
        }
    },
    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}
public type EHRS_FM_Record_Lifecycle_Event___Audit_Event record {|
    *r4:DomainResource;

    RESOURCE_NAME_EHRS_FM_RECORD_LIFECYCLE_EVENT___AUDIT_EVENT resourceType = RESOURCE_NAME_EHRS_FM_RECORD_LIFECYCLE_EVENT___AUDIT_EVENT;

    @constraint:Array {
       minLength: 1
    }
    EHRS_FM_Record_Lifecycle_Event___Audit_EventAgent[] agent;
    r4:Extension[] extension?;
    r4:Period period?;
    r4:Extension[] modifierExtension?;
    r4:code language?;
    EHRS_FM_Record_Lifecycle_Event___Audit_EventSource 'source;
    r4:instant recorded;
    r4:Coding 'type;
    r4:Resource[] contained?;
    r4:Coding[] subtype?;
    r4:Meta meta?;
    string outcomeDesc?;
    r4:code action?;
    r4:uri implicitRules?;
    string id?;
    r4:CodeableConcept[] purposeOfEvent?;
    r4:Narrative text?;
    EHRS_FM_Record_Lifecycle_Event___Audit_EventEntity[] entity?;
    r4:code outcome?;
    r4:Element ...;
|};

# FHIR EHRS_FM_Record_Lifecycle_Event___Audit_EventEntity datatype record.
#
# + lifecycle - Identifier for the data life-cycle stage for the entity.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - Code representing the role the entity played in the event being audited.
# + what - Identifies a specific instance of the entity. The reference should be version specific.
# + securityLabel - Security labels for the identified entity.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + query - The query parameters for a query-type entities.
# + name - A name of the entity in the audit event.
# + description - Text that describes the entity in more detail.
# + detail - Tagged value pairs for conveying additional information about the entity.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of the object that was involved in this audit event.
@r4:DataTypeDefinition {
    name: "EHRS_FM_Record_Lifecycle_Event___Audit_EventEntity",
    baseType: (),
    elements: {
        "lifecycle": {
            name: "lifecycle",
            dataType: r4:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifier for the data life-cycle stage for the entity.",
            path: "AuditEvent.entity.lifecycle"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.entity.extension"
        },
        "role": {
            name: "role",
            dataType: r4:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "Code representing the role the entity played in the event being audited.",
            path: "AuditEvent.entity.role"
        },
        "what": {
            name: "what",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifies a specific instance of the entity. The reference should be version specific.",
            path: "AuditEvent.entity.what"
        },
        "securityLabel": {
            name: "securityLabel",
            dataType: r4:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security labels for the identified entity.",
            path: "AuditEvent.entity.securityLabel"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.entity.modifierExtension"
        },
        "query": {
            name: "query",
            dataType: r4:base64Binary,
            min: 0,
            max: 1,
            isArray: false,
            description: "The query parameters for a query-type entities.",
            path: "AuditEvent.entity.query"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A name of the entity in the audit event.",
            path: "AuditEvent.entity.name"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Text that describes the entity in more detail.",
            path: "AuditEvent.entity.description"
        },
        "detail": {
            name: "detail",
            dataType: EHRS_FM_Record_Lifecycle_Event___Audit_EventEntityDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Tagged value pairs for conveying additional information about the entity.",
            path: "AuditEvent.entity.detail"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.entity.id"
        },
        "type": {
            name: "type",
            dataType: r4:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of the object that was involved in this audit event.",
            path: "AuditEvent.entity.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EHRS_FM_Record_Lifecycle_Event___Audit_EventEntity record {|
    *r4:BackboneElement;

    r4:Coding lifecycle?;
    r4:Extension[] extension?;
    r4:Coding role?;
    r4:Reference what?;
    r4:Coding[] securityLabel?;
    r4:Extension[] modifierExtension?;
    r4:base64Binary query?;
    string name?;
    string description?;
    EHRS_FM_Record_Lifecycle_Event___Audit_EventEntityDetail[] detail?;
    string id?;
    r4:Coding 'type?;
|};

# FHIR EHRS_FM_Record_Lifecycle_Event___Audit_EventEntityDetail datatype record.
#
# + valueAuditEventBase64Binary - The value of the extra detail.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueAuditEventString - The value of the extra detail.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of extra detail provided in the value.
@r4:DataTypeDefinition {
    name: "EHRS_FM_Record_Lifecycle_Event___Audit_EventEntityDetail",
    baseType: (),
    elements: {
        "valueAuditEventBase64Binary": {
            name: "valueAuditEventBase64Binary",
            dataType: r4:base64Binary,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.entity.detail.extension"
        },
        "valueAuditEventString": {
            name: "valueAuditEventString",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the extra detail.",
            path: "AuditEvent.entity.detail.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.entity.detail.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.entity.detail.id"
        },
        "type": {
            name: "type",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of extra detail provided in the value.",
            path: "AuditEvent.entity.detail.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EHRS_FM_Record_Lifecycle_Event___Audit_EventEntityDetail record {|
    *r4:BackboneElement;

    r4:base64Binary valueAuditEventBase64Binary;
    r4:Extension[] extension?;
    string valueAuditEventString;
    r4:Extension[] modifierExtension?;
    string id?;
    string 'type;
|};

# FHIR EHRS_FM_Record_Lifecycle_Event___Audit_EventAgentNetwork datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + address - An identifier for the network access point of the user device for the audit event.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - An identifier for the type of network access point that originated the audit event.
@r4:DataTypeDefinition {
    name: "EHRS_FM_Record_Lifecycle_Event___Audit_EventAgentNetwork",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.agent.network.extension"
        },
        "address": {
            name: "address",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "An identifier for the network access point of the user device for the audit event.",
            path: "AuditEvent.agent.network.address"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.agent.network.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.agent.network.id"
        },
        "type": {
            name: "type",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            description: "An identifier for the type of network access point that originated the audit event.",
            path: "AuditEvent.agent.network.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EHRS_FM_Record_Lifecycle_Event___Audit_EventAgentNetwork record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    string address?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:code 'type?;
|};

# FHIR EHRS_FM_Record_Lifecycle_Event___Audit_EventSource datatype record.
#
# + observer - Identifier of the source where the event was detected.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + site - Logical source location within the healthcare enterprise network. For example, a hospital or other provider location within a multi-entity provider group.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Code specifying the type of source where event originated.
@r4:DataTypeDefinition {
    name: "EHRS_FM_Record_Lifecycle_Event___Audit_EventSource",
    baseType: (),
    elements: {
        "observer": {
            name: "observer",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Identifier of the source where the event was detected.",
            path: "AuditEvent.source.observer"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.source.extension"
        },
        "site": {
            name: "site",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Logical source location within the healthcare enterprise network. For example, a hospital or other provider location within a multi-entity provider group.",
            path: "AuditEvent.source.site"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.source.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.source.id"
        },
        "type": {
            name: "type",
            dataType: r4:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Code specifying the type of source where event originated.",
            path: "AuditEvent.source.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EHRS_FM_Record_Lifecycle_Event___Audit_EventSource record {|
    *r4:BackboneElement;

    r4:Reference observer;
    r4:Extension[] extension?;
    string site?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:Coding[] 'type?;
|};

# FHIR EHRS_FM_Record_Lifecycle_Event___Audit_EventAgent datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.
# + purposeOfUse - The reason (purpose of use), specific to this agent, that was used during the event being recorded.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + media - Type of media involved. Used when the event is about exporting/importing onto media.
# + 'type - Specification of the participation type the user plays when performing the event.
# + altId - Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.
# + requestor - Indicator that the user is or is not the requestor, or initiator, for the event being audited.
# + network - Logical network location for application activity, if the activity has a network location.
# + name - Human-meaningful name for the agent.
# + location - Where the event occurred.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + policy - The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.
# + who - Reference to who this agent is that was involved in the event.
@r4:DataTypeDefinition {
    name: "EHRS_FM_Record_Lifecycle_Event___Audit_EventAgent",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "AuditEvent.agent.extension"
        },
        "role": {
            name: "role",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The security role that the user was acting under, that come from local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.",
            path: "AuditEvent.agent.role"
        },
        "purposeOfUse": {
            name: "purposeOfUse",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The reason (purpose of use), specific to this agent, that was used during the event being recorded.",
            path: "AuditEvent.agent.purposeOfUse"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "AuditEvent.agent.modifierExtension"
        },
        "media": {
            name: "media",
            dataType: r4:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of media involved. Used when the event is about exporting/importing onto media.",
            path: "AuditEvent.agent.media"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specification of the participation type the user plays when performing the event.",
            path: "AuditEvent.agent.type"
        },
        "altId": {
            name: "altId",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.",
            path: "AuditEvent.agent.altId"
        },
        "requestor": {
            name: "requestor",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Indicator that the user is or is not the requestor, or initiator, for the event being audited.",
            path: "AuditEvent.agent.requestor"
        },
        "network": {
            name: "network",
            dataType: EHRS_FM_Record_Lifecycle_Event___Audit_EventAgentNetwork,
            min: 0,
            max: 1,
            isArray: false,
            description: "Logical network location for application activity, if the activity has a network location.",
            path: "AuditEvent.agent.network"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Human-meaningful name for the agent.",
            path: "AuditEvent.agent.name"
        },
        "location": {
            name: "location",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Where the event occurred.",
            path: "AuditEvent.agent.location"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "AuditEvent.agent.id"
        },
        "policy": {
            name: "policy",
            dataType: r4:uri,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.",
            path: "AuditEvent.agent.policy"
        },
        "who": {
            name: "who",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Reference to who this agent is that was involved in the event.",
            path: "AuditEvent.agent.who"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EHRS_FM_Record_Lifecycle_Event___Audit_EventAgent record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:CodeableConcept[] role?;
    r4:CodeableConcept[] purposeOfUse?;
    r4:Extension[] modifierExtension?;
    r4:Coding media?;
    r4:CodeableConcept 'type?;
    string altId?;
    boolean requestor;
    EHRS_FM_Record_Lifecycle_Event___Audit_EventAgentNetwork network?;
    string name?;
    r4:Reference location?;
    string id?;
    r4:uri[] policy?;
    r4:Reference who?;
|};

