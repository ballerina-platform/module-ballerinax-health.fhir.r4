// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r4;

public const string PROFILE_BASE_INVOICE = "http://hl7.org/fhir/StructureDefinition/Invoice";
public const RESOURCE_NAME_INVOICE = "Invoice";

public type InvoiceExtensions (r4:Extension|WorkflowEpisodeOfCare);

# FHIR Invoice resource record.
#
# + resourceType - The type of the resource describes
# + date - Date/time(s) of when this Invoice was posted.
# + identifier - Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.
# + note - Comments made about the invoice by the issuer, subject, or other participants.
# + totalGross - Invoice total, tax included.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + subject - The individual or set of individuals receiving the goods and services billed in this invoice.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + totalPriceComponent - The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.
# + 'type - Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).
# + issuer - The organizationissuing the Invoice.
# + participant - Indicates who or what performed or participated in the charged service.
# + totalNet - Invoice total , taxes excluded.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + lineItem - Each line item represents one charge for goods and services rendered. Details such as date, code and amount are found in the referenced ChargeItem resource.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + recipient - The individual or Organization responsible for balancing of this invoice.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + cancelledReason - In case of Invoice cancellation a reason must be given (entered in error, superseded by corrected invoice etc.).
# + account - Account which is supposed to be balanced with this Invoice.
# + paymentTerms - Payment details such as banking details, period of payment, deductibles, methods of payment.
# + status - The current state of the Invoice.
@r4:ResourceDefinition {
    resourceType: "Invoice",
    baseType: r4:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/Invoice",
    elements: {
        "date" : {
            name: "date",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.date"
        },
        "identifier" : {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Invoice.identifier"
        },
        "note" : {
            name: "note",
            dataType: r4:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Invoice.note"
        },
        "totalGross" : {
            name: "totalGross",
            dataType: r4:Money,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.totalGross"
        },
        "extension" : {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Invoice.extension"
        },
        "subject" : {
            name: "subject",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.subject"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Invoice.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },

        "totalPriceComponent": {
            name: "totalPriceComponent",
            dataType: InvoiceLineItemPriceComponent,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Invoice.totalPriceComponent"
        },

        "type" : {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.type"
        },
        "issuer" : {
            name: "issuer",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.issuer"
        },
        "participant" : {
            name: "participant",
            dataType: InvoiceParticipant,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Invoice.participant"
        },
        "totalNet" : {
            name: "totalNet",
            dataType: r4:Money,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.totalNet"
        },
        "contained" : {
            name: "contained",
            dataType: r4:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Invoice.contained"
        },
        "lineItem" : {
            name: "lineItem",
            dataType: InvoiceLineItem,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Invoice.lineItem"
        },
        "meta" : {
            name: "meta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.meta"
        },
        "recipient" : {
            name: "recipient",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.recipient"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.implicitRules"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.id"
        },
        "text" : {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.text"
        },
        "cancelledReason" : {
            name: "cancelledReason",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.cancelledReason"
        },
        "account" : {
            name: "account",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.account"
        },
        "paymentTerms" : {
            name: "paymentTerms",
            dataType: r4:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "Invoice.paymentTerms"
        },
        "status" : {
            name: "status",
            dataType: InvoiceStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "Invoice.status",
            valueSet: "http://hl7.org/fhir/ValueSet/invoice-status|4.0.1"
        }
    },
    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}
public type Invoice record {|
    *r4:DomainResource;

    RESOURCE_NAME_INVOICE resourceType = RESOURCE_NAME_INVOICE;

    r4:dateTime date?;
    r4:Identifier[] identifier?;
    r4:Annotation[] note?;
    r4:Money totalGross?;
    r4:Extension[] extension?;
    r4:Reference subject?;
    r4:Extension[] modifierExtension?;
    r4:code language?;
    InvoiceLineItemPriceComponent[] totalPriceComponent?;
    r4:CodeableConcept 'type?;
    r4:Reference issuer?;
    InvoiceParticipant[] participant?;
    r4:Money totalNet?;
    r4:Resource[] contained?;
    InvoiceLineItem[] lineItem?;
    r4:Meta meta?;
    r4:Reference recipient?;
    r4:uri implicitRules?;
    string id?;
    r4:Narrative text?;
    string cancelledReason?;
    r4:Reference account?;
    r4:markdown paymentTerms?;
    InvoiceStatus status;
    r4:Element ...;
|};

# FHIR InvoiceParticipant datatype record.
#
# + actor - The device, practitioner, etc. who performed or participated in the service.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "InvoiceParticipant",
    baseType: (),
    elements: {
        "actor": {
            name: "actor",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The device, practitioner, etc. who performed or participated in the service.",
            path: "Invoice.participant.actor"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Invoice.participant.extension"
        },
        "role": {
            name: "role",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.",
            path: "Invoice.participant.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Invoice.participant.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Invoice.participant.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type InvoiceParticipant record {|
    *r4:BackboneElement;

    r4:Reference actor;
    r4:Extension[] extension?;
    r4:CodeableConcept role?;
    r4:Extension[] modifierExtension?;
    string id?;
|};

# FHIR InvoiceLineItemPriceComponent datatype record.
#
# + amount - The amount calculated for this component.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + factor - The factor that has been applied on the base price for calculating this component.
# + 'type - This code identifies the type of the component.
@r4:DataTypeDefinition {
    name: "InvoiceLineItemPriceComponent",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: r4:Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "The amount calculated for this component.",
            path: "Invoice.lineItem.priceComponent.amount"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Invoice.lineItem.priceComponent.extension"
        },
        "code": {
            name: "code",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code that identifies the component. Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.",
            path: "Invoice.lineItem.priceComponent.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Invoice.lineItem.priceComponent.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Invoice.lineItem.priceComponent.id"
        },
        "factor": {
            name: "factor",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "The factor that has been applied on the base price for calculating this component.",
            path: "Invoice.lineItem.priceComponent.factor"
        },
        "type": {
            name: "type",
            dataType: InvoiceLineItemPriceComponentType,
            min: 1,
            max: 1,
            isArray: false,
            description: "This code identifies the type of the component.",
            path: "Invoice.lineItem.priceComponent.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type InvoiceLineItemPriceComponent record {|
    *r4:BackboneElement;

    r4:Money amount?;
    r4:Extension[] extension?;
    r4:CodeableConcept code?;
    r4:Extension[] modifierExtension?;
    string id?;
    decimal factor?;
    InvoiceLineItemPriceComponentType 'type;
|};

# FHIR InvoiceLineItem datatype record.
#
# + chargeItemCodeableConcept - The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
# + sequence - Sequence in which the items appear on the invoice.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + priceComponent - The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.
# + chargeItemReference - The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.
@r4:DataTypeDefinition {
    name: "InvoiceLineItem",
    baseType: (),
    elements: {
        "chargeItemCodeableConcept": {
            name: "chargeItemCodeableConcept",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.",
            path: "Invoice.lineItem.chargeItem[x]"
        },
        "sequence": {
            name: "sequence",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "Sequence in which the items appear on the invoice.",
            path: "Invoice.lineItem.sequence"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Invoice.lineItem.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Invoice.lineItem.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Invoice.lineItem.id"
        },
        "priceComponent": {
            name: "priceComponent",
            dataType: InvoiceLineItemPriceComponent,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.",
            path: "Invoice.lineItem.priceComponent"
        },
        "chargeItemReference": {
            name: "chargeItemReference",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The ChargeItem contains information such as the billing code, date, amount etc. If no further details are required for the lineItem, inline billing codes can be added using the CodeableConcept data type instead of the Reference.",
            path: "Invoice.lineItem.chargeItem[x]"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type InvoiceLineItem record {|
    *r4:BackboneElement;

    r4:CodeableConcept chargeItemCodeableConcept?;
    r4:positiveInt sequence?;
    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    string id?;
    InvoiceLineItemPriceComponent[] priceComponent?;
    r4:Reference chargeItemReference?;
|};

# InvoiceLineItemPriceComponentType enum
public enum InvoiceLineItemPriceComponentType {
   CODE_TYPE_SURCHARGE = "surcharge",
   CODE_TYPE_DEDUCTION = "deduction",
   CODE_TYPE_DISCOUNT = "discount",
   CODE_TYPE_TAX = "tax",
   CODE_TYPE_INFORMATIONAL = "informational",
   CODE_TYPE_BASE = "base"
}

# InvoiceStatus enum
public enum InvoiceStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_CANCELLED = "cancelled",
   CODE_STATUS_ISSUED = "issued",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error",
   CODE_STATUS_BALANCED = "balanced"
}

