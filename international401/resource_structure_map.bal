// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r4;

public const string PROFILE_BASE_STRUCTUREMAP = "http://hl7.org/fhir/StructureDefinition/StructureMap";
public const RESOURCE_NAME_STRUCTUREMAP = "StructureMap";

public type StructureMapExtensions (r4:Extension|Replaces|ResourceApprovalDate|ResourceEffectivePeriod|ResourceLastReviewDate);

# FHIR StructureMap resource record.
#
# + resourceType - The type of the resource describes
# + date - The date (and optionally time) when the structure map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.
# + copyright - A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + 'import - Other maps used by this map (canonical URLs).
# + purpose - Explanation of why this structure map is needed and why it has been designed as it has.
# + jurisdiction - A legal or geographic region in which the structure map is intended to be used.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A free text natural language description of the structure map from a consumer's perspective.
# + experimental - A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
# + language - The base language in which the resource is written.
# + title - A short, descriptive, user-friendly title for the structure map.
# + contact - Contact details to assist a user in finding and communicating with the publisher.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + group - Organizes the mapping into manageable chunks for human review/ease of maintenance.
# + identifier - A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.
# + 'version - The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
# + structure - A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.
# + url - An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure map is stored on different servers.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + publisher - The name of the organization or individual that published the structure map.
# + useContext - The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances.
# + status - The status of this structure map. Enables tracking the life-cycle of the content.
@r4:ResourceDefinition {
    resourceType: "StructureMap",
    baseType: r4:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/StructureMap",
    elements: {
        "date" : {
            name: "date",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.date"
        },
        "copyright" : {
            name: "copyright",
            dataType: r4:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.copyright"
        },
        "extension" : {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.extension"
        },
        "import" : {
            name: "import",
            dataType: r4:canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.import"
        },
        "purpose" : {
            name: "purpose",
            dataType: r4:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.purpose"
        },
        "jurisdiction" : {
            name: "jurisdiction",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.jurisdiction",
            valueSet: "http://hl7.org/fhir/ValueSet/jurisdiction"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: r4:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.description"
        },
        "experimental" : {
            name: "experimental",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.experimental"
        },
        "language" : {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.title"
        },
        "contact" : {
            name: "contact",
            dataType: r4:ContactDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.contact"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.id"
        },
        "text" : {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.text"
        },
        "group" : {
            name: "group",
            dataType: StructureMapGroup,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.group"
        },
        "identifier" : {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.identifier"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.version"
        },
        "structure" : {
            name: "structure",
            dataType: StructureMapStructure,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.structure"
        },
        "url" : {
            name: "url",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            path: "StructureMap.url"
        },
        "contained" : {
            name: "contained",
            dataType: r4:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            path: "StructureMap.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.implicitRules"
        },
        "publisher" : {
            name: "publisher",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureMap.publisher"
        },
        "useContext" : {
            name: "useContext",
            dataType: r4:UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureMap.useContext"
        },
        "status" : {
            name: "status",
            dataType: StructureMapStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "StructureMap.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|4.0.1"
        }
    },
    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}
public type StructureMap record {|
    *r4:DomainResource;

    RESOURCE_NAME_STRUCTUREMAP resourceType = RESOURCE_NAME_STRUCTUREMAP;

    r4:dateTime date?;
    r4:markdown copyright?;
    r4:Extension[] extension?;
    r4:canonical[] 'import?;
    r4:markdown purpose?;
    r4:CodeableConcept[] jurisdiction?;
    r4:Extension[] modifierExtension?;
    r4:markdown description?;
    boolean experimental?;
    r4:code language?;
    string title?;
    r4:ContactDetail[] contact?;
    string id?;
    r4:Narrative text?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.StructureMap.group constraint. This field must be an array containing at least one item."
        }
    }
    StructureMapGroup[] group;
    r4:Identifier[] identifier?;
    string 'version?;
    StructureMapStructure[] structure?;
    r4:uri url;
    r4:Resource[] contained?;
    r4:Meta meta?;
    string name;
    r4:uri implicitRules?;
    string publisher?;
    r4:UsageContext[] useContext?;
    StructureMapStatus status;
    r4:Element ...;
|};

# FHIR StructureMapGroup datatype record.
#
# + typeMode - If this is the default rule set to apply for the source type or this combination of types.
# + input - A name assigned to an instance of data. The instance must be provided when the mapping is invoked.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + extends - Another group that this group adds rules to.
# + documentation - Additional supporting documentation that explains the purpose of the group and the types of mappings within it.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - A unique name for the group for the convenience of human readers.
# + rule - Transform Rule from source to target.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "StructureMapGroup",
    baseType: (),
    elements: {
        "typeMode": {
            name: "typeMode",
            dataType: StructureMapGroupTypeMode,
            min: 1,
            max: 1,
            isArray: false,
            description: "If this is the default rule set to apply for the source type or this combination of types.",
            path: "StructureMap.group.typeMode"
        },
        "input": {
            name: "input",
            dataType: StructureMapGroupInput,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A name assigned to an instance of data. The instance must be provided when the mapping is invoked.",
            path: "StructureMap.group.input"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureMap.group.extension"
        },
        "extends": {
            name: "extends",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Another group that this group adds rules to.",
            path: "StructureMap.group.extends"
        },
        "documentation": {
            name: "documentation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Additional supporting documentation that explains the purpose of the group and the types of mappings within it.",
            path: "StructureMap.group.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureMap.group.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: r4:id,
            min: 1,
            max: 1,
            isArray: false,
            description: "A unique name for the group for the convenience of human readers.",
            path: "StructureMap.group.name"
        },
        "rule": {
            name: "rule",
            dataType: StructureMapGroupRule,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Transform Rule from source to target.",
            path: "StructureMap.group.rule"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureMap.group.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type StructureMapGroup record {|
    *r4:BackboneElement;

    StructureMapGroupTypeMode typeMode;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.StructureMap.group.input constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.StructureMap.group.input constraint. This field must be an array containing at most one item."
        }
    }
    StructureMapGroupInput[] input;
    r4:Extension[] extension?;
    r4:id extends?;
    string documentation?;
    r4:Extension[] modifierExtension?;
    r4:id name;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.StructureMap.group.rule constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.StructureMap.group.rule constraint. This field must be an array containing at most one item."
        }
    }
    StructureMapGroupRule[] rule;
    string id?;
|};

# StructureMapStatus enum
public enum StructureMapStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR StructureMapGroupRuleTargetParameter datatype record.
#
# + valueBoolean - Parameter value - variable or literal.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueId - Parameter value - variable or literal.
# + valueString - Parameter value - variable or literal.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + valueDecimal - Parameter value - variable or literal.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - Parameter value - variable or literal.

@r4:DataTypeDefinition {
    name: "StructureMapGroupRuleTargetParameter",
    baseType: (),
    elements: {
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Parameter value - variable or literal.",
            path: "StructureMap.group.rule.target.parameter.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureMap.group.rule.target.parameter.extension"
        },

        "valueId": {
            name: "valueId",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Parameter value - variable or literal.",
            path: "StructureMap.group.rule.target.parameter.value[x]"
        },

        "valueString": {
            name: "valueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Parameter value - variable or literal.",
            path: "StructureMap.group.rule.target.parameter.value[x]"
        },

        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureMap.group.rule.target.parameter.modifierExtension"
        },

        "valueDecimal": {
            name: "valueDecimal",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "Parameter value - variable or literal.",
            path: "StructureMap.group.rule.target.parameter.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureMap.group.rule.target.parameter.id"
        },

        "valueInteger": {
            name: "valueInteger",
            dataType: r4:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "Parameter value - variable or literal.",
            path: "StructureMap.group.rule.target.parameter.value[x]"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type StructureMapGroupRuleTargetParameter record {|
    *r4:BackboneElement;

    boolean valueBoolean?;
    r4:Extension[] extension?;
    r4:id valueId?;
    string valueString?;
    r4:Extension[] modifierExtension?;
    decimal valueDecimal?;
    string id?;
    r4:integer valueInteger?;
|};

# FHIR StructureMapGroupRuleDependent datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Name of a rule or group to apply.
# + variable - Variable to pass to the rule or group.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "StructureMapGroupRuleDependent",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureMap.group.rule.dependent.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureMap.group.rule.dependent.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: r4:id,
            min: 1,
            max: 1,
            isArray: false,
            description: "Name of a rule or group to apply.",
            path: "StructureMap.group.rule.dependent.name"
        },
        "variable": {
            name: "variable",
            dataType: string,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Variable to pass to the rule or group.",
            path: "StructureMap.group.rule.dependent.variable"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureMap.group.rule.dependent.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type StructureMapGroupRuleDependent record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    r4:id name;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.StructureMap.group.rule.dependent.variable constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.StructureMap.group.rule.dependent.variable constraint. This field must be an array containing at most one item."
        }
    }
    string[] variable;
    string id?;
|};

# StructureMapGroupInputMode enum
public enum StructureMapGroupInputMode {
   CODE_MODE_SOURCE = "source",
   CODE_MODE_TARGET = "target"
}

# StructureMapGroupRuleSourceListMode enum
public enum StructureMapGroupRuleSourceListMode {
   CODE_LISTMODE_ONLY_ONE = "only_one",
   CODE_LISTMODE_LAST = "last",
   CODE_LISTMODE_NOT_LAST = "not_last",
   CODE_LISTMODE_NOT_FIRST = "not_first",
   CODE_LISTMODE_FIRST = "first"
}

# StructureMapStructureMode enum
public enum StructureMapStructureMode {
   CODE_MODE_SOURCE = "source",
   CODE_MODE_QUERIED = "queried",
   CODE_MODE_TARGET = "target",
   CODE_MODE_PRODUCED = "produced"
}

# StructureMapGroupRuleTargetTransform enum
public enum StructureMapGroupRuleTargetTransform {
   CODE_TRANSFORM_CREATE = "create",
   CODE_TRANSFORM_COPY = "copy"
}

# StructureMapGroupTypeMode enum
public enum StructureMapGroupTypeMode {
   CODE_TYPEMODE_TYPES = "types",
   CODE_TYPEMODE_NONE = "none",
   CODE_TYPEMODE_TYPE_AND_TYPES = "type-and-types"
}

# FHIR StructureMapGroupRuleSource datatype record.
#
# + defaultValueDosage - A value to use if there is no existing value in the source object.
# + defaultValueString - A value to use if there is no existing value in the source object.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + defaultValueSignature - A value to use if there is no existing value in the source object.
# + 'type - Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
# + defaultValueInstant - A value to use if there is no existing value in the source object.
# + defaultValueBoolean - A value to use if there is no existing value in the source object.
# + defaultValueQuantity - A value to use if there is no existing value in the source object.
# + defaultValueUrl - A value to use if there is no existing value in the source object.
# + defaultValueRatio - A value to use if there is no existing value in the source object.
# + defaultValueUri - A value to use if there is no existing value in the source object.
# + context - Type or variable this rule applies to.
# + defaultValueMeta - A value to use if there is no existing value in the source object.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + defaultValueMoney - A value to use if there is no existing value in the source object.
# + element - Optional field for this source.
# + defaultValueBase64Binary - A value to use if there is no existing value in the source object.
# + defaultValueAddress - A value to use if there is no existing value in the source object.
# + defaultValueIdentifier - A value to use if there is no existing value in the source object.
# + defaultValueMarkdown - A value to use if there is no existing value in the source object.
# + defaultValueAge - A value to use if there is no existing value in the source object.
# + defaultValueExpression - A value to use if there is no existing value in the source object.
# + defaultValueId - A value to use if there is no existing value in the source object.
# + 'check - FHIRPath expression - must be true or the mapping engine throws an error instead of completing.
# + condition - FHIRPath expression - must be true or the rule does not apply.
# + defaultValueUsageContext - A value to use if there is no existing value in the source object.
# + defaultValueDataRequirement - A value to use if there is no existing value in the source object.
# + defaultValueDate - A value to use if there is no existing value in the source object.
# + defaultValueParameterDefinition - A value to use if there is no existing value in the source object.
# + defaultValueAttachment - A value to use if there is no existing value in the source object.
# + defaultValueReference - A value to use if there is no existing value in the source object.
# + defaultValueContactDetail - A value to use if there is no existing value in the source object.
# + defaultValueDuration - A value to use if there is no existing value in the source object.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + defaultValueRange - A value to use if there is no existing value in the source object.
# + defaultValueSampledData - A value to use if there is no existing value in the source object.
# + logMessage - A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.
# + defaultValueUnsignedInt - A value to use if there is no existing value in the source object.
# + defaultValueInteger - A value to use if there is no existing value in the source object.
# + defaultValueTime - A value to use if there is no existing value in the source object.
# + listMode - How to handle the list mode for this element.
# + defaultValueRelatedArtifact - A value to use if there is no existing value in the source object.
# + defaultValueTriggerDefinition - A value to use if there is no existing value in the source object.
# + defaultValueContactPoint - A value to use if there is no existing value in the source object.
# + min - Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
# + defaultValueHumanName - A value to use if there is no existing value in the source object.
# + defaultValueDateTime - A value to use if there is no existing value in the source object.
# + defaultValueDistance - A value to use if there is no existing value in the source object.
# + defaultValueCodeableConcept - A value to use if there is no existing value in the source object.
# + defaultValueDecimal - A value to use if there is no existing value in the source object.
# + defaultValueUuid - A value to use if there is no existing value in the source object.
# + defaultValueAnnotation - A value to use if there is no existing value in the source object.
# + defaultValueCount - A value to use if there is no existing value in the source object.
# + defaultValueCanonical - A value to use if there is no existing value in the source object.
# + defaultValuePeriod - A value to use if there is no existing value in the source object.
# + defaultValueContributor - A value to use if there is no existing value in the source object.
# + max - Specified maximum cardinality for the element - a number or a '*'. This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
# + defaultValueTiming - A value to use if there is no existing value in the source object.
# + defaultValuePositiveInt - A value to use if there is no existing value in the source object.
# + defaultValueOid - A value to use if there is no existing value in the source object.
# + defaultValueCoding - A value to use if there is no existing value in the source object.
# + defaultValueCode - A value to use if there is no existing value in the source object.
# + variable - Named context for field, if a field is specified.

@r4:DataTypeDefinition {
    name: "StructureMapGroupRuleSource",
    baseType: (),
    elements: {
        "defaultValueDosage": {
            name: "defaultValueDosage",
            dataType: r4:Dosage,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueString": {
            name: "defaultValueString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureMap.group.rule.source.modifierExtension"
        },

        "defaultValueSignature": {
            name: "defaultValueSignature",
            dataType: r4:Signature,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },
        "type": {
            name: "type",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.",
            path: "StructureMap.group.rule.source.type"
        },

        "defaultValueInstant": {
            name: "defaultValueInstant",
            dataType: r4:instant,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueBoolean": {
            name: "defaultValueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueQuantity": {
            name: "defaultValueQuantity",
            dataType: r4:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueUrl": {
            name: "defaultValueUrl",
            dataType: r4:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueRatio": {
            name: "defaultValueRatio",
            dataType: r4:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueUri": {
            name: "defaultValueUri",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },
        "context": {
            name: "context",
            dataType: r4:id,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type or variable this rule applies to.",
            path: "StructureMap.group.rule.source.context"
        },

        "defaultValueMeta": {
            name: "defaultValueMeta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureMap.group.rule.source.id"
        },

        "defaultValueMoney": {
            name: "defaultValueMoney",
            dataType: r4:Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "element": {
            name: "element",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Optional field for this source.",
            path: "StructureMap.group.rule.source.element"
        },

        "defaultValueBase64Binary": {
            name: "defaultValueBase64Binary",
            dataType: r4:base64Binary,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueAddress": {
            name: "defaultValueAddress",
            dataType: r4:Address,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueIdentifier": {
            name: "defaultValueIdentifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueMarkdown": {
            name: "defaultValueMarkdown",
            dataType: r4:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueAge": {
            name: "defaultValueAge",
            dataType: r4:Age,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueExpression": {
            name: "defaultValueExpression",
            dataType: r4:Expression,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueId": {
            name: "defaultValueId",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "check": {
            name: "check",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "FHIRPath expression - must be true or the mapping engine throws an error instead of completing.",
            path: "StructureMap.group.rule.source.check"
        },
        "condition": {
            name: "condition",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "FHIRPath expression - must be true or the rule does not apply.",
            path: "StructureMap.group.rule.source.condition"
        },

        "defaultValueUsageContext": {
            name: "defaultValueUsageContext",
            dataType: r4:UsageContext,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueDataRequirement": {
            name: "defaultValueDataRequirement",
            dataType: r4:DataRequirement,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueDate": {
            name: "defaultValueDate",
            dataType: r4:date,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueParameterDefinition": {
            name: "defaultValueParameterDefinition",
            dataType: r4:ParameterDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueAttachment": {
            name: "defaultValueAttachment",
            dataType: r4:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueReference": {
            name: "defaultValueReference",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueContactDetail": {
            name: "defaultValueContactDetail",
            dataType: r4:ContactDetail,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueDuration": {
            name: "defaultValueDuration",
            dataType: r4:Duration,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureMap.group.rule.source.extension"
        },

        "defaultValueRange": {
            name: "defaultValueRange",
            dataType: r4:Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueSampledData": {
            name: "defaultValueSampledData",
            dataType: r4:SampledData,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },
        "logMessage": {
            name: "logMessage",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.",
            path: "StructureMap.group.rule.source.logMessage"
        },

        "defaultValueUnsignedInt": {
            name: "defaultValueUnsignedInt",
            dataType: r4:unsignedInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueInteger": {
            name: "defaultValueInteger",
            dataType: r4:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueTime": {
            name: "defaultValueTime",
            dataType: r4:time,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },
        "listMode": {
            name: "listMode",
            dataType: StructureMapGroupRuleSourceListMode,
            min: 0,
            max: 1,
            isArray: false,
            description: "How to handle the list mode for this element.",
            path: "StructureMap.group.rule.source.listMode"
        },

        "defaultValueRelatedArtifact": {
            name: "defaultValueRelatedArtifact",
            dataType: r4:RelatedArtifact,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueTriggerDefinition": {
            name: "defaultValueTriggerDefinition",
            dataType: r4:TriggerDefinition,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueContactPoint": {
            name: "defaultValueContactPoint",
            dataType: r4:ContactPoint,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "min": {
            name: "min",
            dataType: r4:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.",
            path: "StructureMap.group.rule.source.min"
        },

        "defaultValueHumanName": {
            name: "defaultValueHumanName",
            dataType: r4:HumanName,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueDateTime": {
            name: "defaultValueDateTime",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueDistance": {
            name: "defaultValueDistance",
            dataType: r4:Distance,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueCodeableConcept": {
            name: "defaultValueCodeableConcept",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueDecimal": {
            name: "defaultValueDecimal",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueUuid": {
            name: "defaultValueUuid",
            dataType: r4:uuid,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueAnnotation": {
            name: "defaultValueAnnotation",
            dataType: r4:Annotation,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueCount": {
            name: "defaultValueCount",
            dataType: r4:Count,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueCanonical": {
            name: "defaultValueCanonical",
            dataType: r4:canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValuePeriod": {
            name: "defaultValuePeriod",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueContributor": {
            name: "defaultValueContributor",
            dataType: r4:Contributor,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "max": {
            name: "max",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specified maximum cardinality for the element - a number or a '*'. This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).",
            path: "StructureMap.group.rule.source.max"
        },

        "defaultValueTiming": {
            name: "defaultValueTiming",
            dataType: r4:Timing,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValuePositiveInt": {
            name: "defaultValuePositiveInt",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueOid": {
            name: "defaultValueOid",
            dataType: r4:oid,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueCoding": {
            name: "defaultValueCoding",
            dataType: r4:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "defaultValueCode": {
            name: "defaultValueCode",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value to use if there is no existing value in the source object.",
            path: "StructureMap.group.rule.source.defaultValue[x]"
        },

        "variable": {
            name: "variable",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Named context for field, if a field is specified.",
            path: "StructureMap.group.rule.source.variable"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type StructureMapGroupRuleSource record {|
    *r4:BackboneElement;

    r4:Dosage defaultValueDosage?;
    string defaultValueString?;
    r4:Extension[] modifierExtension?;
    r4:Signature defaultValueSignature?;
    string 'type?;
    r4:instant defaultValueInstant?;
    boolean defaultValueBoolean?;
    r4:Quantity defaultValueQuantity?;
    r4:urlType defaultValueUrl?;
    r4:Ratio defaultValueRatio?;
    r4:uri defaultValueUri?;
    r4:id context;
    r4:Meta defaultValueMeta?;
    string id?;
    r4:Money defaultValueMoney?;
    string element?;
    r4:base64Binary defaultValueBase64Binary?;
    r4:Address defaultValueAddress?;
    r4:Identifier defaultValueIdentifier?;
    r4:markdown defaultValueMarkdown?;
    r4:Age defaultValueAge?;
    r4:Expression defaultValueExpression?;
    r4:id defaultValueId?;
    string 'check?;
    string condition?;
    r4:UsageContext defaultValueUsageContext?;
    r4:DataRequirement defaultValueDataRequirement?;
    r4:date defaultValueDate?;
    r4:ParameterDefinition defaultValueParameterDefinition?;
    r4:Attachment defaultValueAttachment?;
    r4:Reference defaultValueReference?;
    r4:ContactDetail defaultValueContactDetail?;
    r4:Duration defaultValueDuration?;
    r4:Extension[] extension?;
    r4:Range defaultValueRange?;
    r4:SampledData defaultValueSampledData?;
    string logMessage?;
    r4:unsignedInt defaultValueUnsignedInt?;
    r4:integer defaultValueInteger?;
    r4:time defaultValueTime?;
    StructureMapGroupRuleSourceListMode listMode?;
    r4:RelatedArtifact defaultValueRelatedArtifact?;
    r4:TriggerDefinition defaultValueTriggerDefinition?;
    r4:ContactPoint defaultValueContactPoint?;
    r4:integer min?;
    r4:HumanName defaultValueHumanName?;
    r4:dateTime defaultValueDateTime?;
    r4:Distance defaultValueDistance?;
    r4:CodeableConcept defaultValueCodeableConcept?;
    decimal defaultValueDecimal?;
    r4:uuid defaultValueUuid?;
    r4:Annotation defaultValueAnnotation?;
    r4:Count defaultValueCount?;
    r4:canonical defaultValueCanonical?;
    r4:Period defaultValuePeriod?;
    r4:Contributor defaultValueContributor?;
    string max?;
    r4:Timing defaultValueTiming?;
    r4:positiveInt defaultValuePositiveInt?;
    r4:oid defaultValueOid?;
    r4:Coding defaultValueCoding?;
    r4:code defaultValueCode?;
    r4:id variable?;
|};

# StructureMapGroupRuleTargetListMode enum
public enum StructureMapGroupRuleTargetListMode {
   CODE_LISTMODE_COLLATE = "collate",
   CODE_LISTMODE_LAST = "last",
   CODE_LISTMODE_SHARE = "share",
   CODE_LISTMODE_FIRST = "first"
}

# FHIR StructureMapStructure datatype record.
#
# + mode - How the referenced structure is used in this mapping.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + documentation - Documentation that describes how the structure is used in the mapping.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + alias - The name used for this type in the map.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + url - The canonical reference to the structure.
@r4:DataTypeDefinition {
    name: "StructureMapStructure",
    baseType: (),
    elements: {
        "mode": {
            name: "mode",
            dataType: StructureMapStructureMode,
            min: 1,
            max: 1,
            isArray: false,
            description: "How the referenced structure is used in this mapping.",
            path: "StructureMap.structure.mode"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureMap.structure.extension"
        },
        "documentation": {
            name: "documentation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Documentation that describes how the structure is used in the mapping.",
            path: "StructureMap.structure.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureMap.structure.modifierExtension"
        },
        "alias": {
            name: "alias",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name used for this type in the map.",
            path: "StructureMap.structure.alias"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureMap.structure.id"
        },
        "url": {
            name: "url",
            dataType: r4:canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "The canonical reference to the structure.",
            path: "StructureMap.structure.url"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type StructureMapStructure record {|
    *r4:BackboneElement;

    StructureMapStructureMode mode;
    r4:Extension[] extension?;
    string documentation?;
    r4:Extension[] modifierExtension?;
    string alias?;
    string id?;
    r4:canonical url;
|};

# FHIR StructureMapGroupRule datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + documentation - Documentation for this instance of data.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Name of the rule for internal references.
# + rule - Rules contained in this rule.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - Source inputs to the mapping.
# + dependent - Which other rules to apply in the context of this rule.
# + target - Content to create because of this mapping rule.
@r4:DataTypeDefinition {
    name: "StructureMapGroupRule",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureMap.group.rule.extension"
        },
        "documentation": {
            name: "documentation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Documentation for this instance of data.",
            path: "StructureMap.group.rule.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureMap.group.rule.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: r4:id,
            min: 1,
            max: 1,
            isArray: false,
            description: "Name of the rule for internal references.",
            path: "StructureMap.group.rule.name"
        },

        "rule": {
            name: "rule",
            dataType: StructureMapGroupRule,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Rules contained in this rule.",
            path: "StructureMap.group.rule.rule"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureMap.group.rule.id"
        },
        "source": {
            name: "source",
            dataType: StructureMapGroupRuleSource,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Source inputs to the mapping.",
            path: "StructureMap.group.rule.source"
        },
        "dependent": {
            name: "dependent",
            dataType: StructureMapGroupRuleDependent,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Which other rules to apply in the context of this rule.",
            path: "StructureMap.group.rule.dependent"
        },
        "target": {
            name: "target",
            dataType: StructureMapGroupRuleTarget,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Content to create because of this mapping rule.",
            path: "StructureMap.group.rule.target"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type StructureMapGroupRule record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    string documentation?;
    r4:Extension[] modifierExtension?;
    r4:id name;
    StructureMapGroupRule[] rule?;
    string id?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.StructureMap.group.rule.source constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.StructureMap.group.rule.source constraint. This field must be an array containing at most one item."
        }
    }
    StructureMapGroupRuleSource[] 'source;
    StructureMapGroupRuleDependent[] dependent?;
    StructureMapGroupRuleTarget[] target?;
|};

# StructureMapGroupRuleTargetContextType enum
public enum StructureMapGroupRuleTargetContextType {
   CODE_CONTEXTTYPE_VARIABLE = "variable",
   CODE_CONTEXTTYPE_TYPE = "type"
}

# FHIR StructureMapGroupRuleTarget datatype record.
#
# + listMode - If field is a list, how to manage the list.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + listRuleId - Internal rule reference for shared list items.
# + transform - How the data is copied / created.
# + contextType - How to interpret the context.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'parameter - Parameters to the transform.
# + context - Type or variable this rule applies to.
# + variable - Named context for field, if desired, and a field is specified.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + element - Field to create in the context.
@r4:DataTypeDefinition {
    name: "StructureMapGroupRuleTarget",
    baseType: (),
    elements: {
        "listMode": {
            name: "listMode",
            dataType: StructureMapGroupRuleTargetListMode,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "If field is a list, how to manage the list.",
            path: "StructureMap.group.rule.target.listMode"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureMap.group.rule.target.extension"
        },
        "listRuleId": {
            name: "listRuleId",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Internal rule reference for shared list items.",
            path: "StructureMap.group.rule.target.listRuleId"
        },
        "transform": {
            name: "transform",
            dataType: StructureMapGroupRuleTargetTransform,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the data is copied / created.",
            path: "StructureMap.group.rule.target.transform"
        },
        "contextType": {
            name: "contextType",
            dataType: StructureMapGroupRuleTargetContextType,
            min: 0,
            max: 1,
            isArray: false,
            description: "How to interpret the context.",
            path: "StructureMap.group.rule.target.contextType"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureMap.group.rule.target.modifierExtension"
        },
        "parameter": {
            name: "parameter",
            dataType: StructureMapGroupRuleTargetParameter,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Parameters to the transform.",
            path: "StructureMap.group.rule.target.parameter"
        },
        "context": {
            name: "context",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type or variable this rule applies to.",
            path: "StructureMap.group.rule.target.context"
        },
        "variable": {
            name: "variable",
            dataType: r4:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Named context for field, if desired, and a field is specified.",
            path: "StructureMap.group.rule.target.variable"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureMap.group.rule.target.id"
        },
        "element": {
            name: "element",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Field to create in the context.",
            path: "StructureMap.group.rule.target.element"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type StructureMapGroupRuleTarget record {|
    *r4:BackboneElement;

    StructureMapGroupRuleTargetListMode[] listMode?;
    r4:Extension[] extension?;
    r4:id listRuleId?;
    StructureMapGroupRuleTargetTransform transform?;
    StructureMapGroupRuleTargetContextType contextType?;
    r4:Extension[] modifierExtension?;
    StructureMapGroupRuleTargetParameter[] 'parameter?;
    r4:id context?;
    r4:id variable?;
    string id?;
    string element?;
|};

# FHIR StructureMapGroupInput datatype record.
#
# + mode - Mode for this instance of data.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + documentation - Documentation for this instance of data.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Name for this instance of data.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type for this instance of data.
@r4:DataTypeDefinition {
    name: "StructureMapGroupInput",
    baseType: (),
    elements: {
        "mode": {
            name: "mode",
            dataType: StructureMapGroupInputMode,
            min: 1,
            max: 1,
            isArray: false,
            description: "Mode for this instance of data.",
            path: "StructureMap.group.input.mode"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureMap.group.input.extension"
        },
        "documentation": {
            name: "documentation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Documentation for this instance of data.",
            path: "StructureMap.group.input.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureMap.group.input.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: r4:id,
            min: 1,
            max: 1,
            isArray: false,
            description: "Name for this instance of data.",
            path: "StructureMap.group.input.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureMap.group.input.id"
        },
        "type": {
            name: "type",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type for this instance of data.",
            path: "StructureMap.group.input.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type StructureMapGroupInput record {|
    *r4:BackboneElement;

    StructureMapGroupInputMode mode;
    r4:Extension[] extension?;
    string documentation?;
    r4:Extension[] modifierExtension?;
    r4:id name;
    string id?;
    string 'type?;
|};

