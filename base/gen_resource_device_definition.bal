// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.


public const string PROFILE_BASE_DEVICEDEFINITION = "http://hl7.org/fhir/StructureDefinition/DeviceDefinition";
public const RESOURCE_NAME_DEVICEDEFINITION = "DeviceDefinition";

# FHIR DeviceDefinition resource record.
#
# + resourceType - The type of the resource describes
# + note - Descriptive information, usage information or implantation information that is not captured in an existing element.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + physicalCharacteristics - Dimensions, color etc.
# + language - The base language in which the resource is written.
# + 'type - What kind of device or device system this is.
# + deviceName - A name given to the device to identify it.
# + capability - Device capabilities.
# + shelfLifeStorage - Shelf Life and storage information.
# + safety - Safety characteristics of the device.
# + contact - Contact details for an organization or a particular human that is responsible for the device.
# + parentDevice - The parent device it can be part of.
# + property - The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
# + onlineInformation - Access to on-line information about the device.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + owner - An organization that is responsible for the provision and ongoing maintenance of the device.
# + identifier - Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
# + manufacturerReference - A name of the manufacturer.
# + quantity - The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
# + manufacturerString - A name of the manufacturer.
# + languageCode - Language code for the human-readable text strings produced by the device (all supported).
# + 'version - The available versions of the device, e.g., software versions.
# + udiDeviceIdentifier - Unique device identifier (UDI) assigned to device label or package. Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
# + url - A network address on which the device may be contacted directly.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + material - A substance used to create the material(s) of which the device is made.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + specialization - The capabilities supported on a device, the standards to which the device conforms for a particular purpose, and used for the communication.
# + modelNumber - The model number for the device.
@ResourceDefinition {
    resourceType: "DeviceDefinition",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/DeviceDefinition",
    elements: {
        "note" : {
            name: "note",
            dataType: Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.note"
        },
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.extension"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.modifierExtension"
        },
        "physicalCharacteristics" : {
            name: "physicalCharacteristics",
            dataType: ProdCharacteristic,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.physicalCharacteristics"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "type" : {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.type",
            valueSet: "http://hl7.org/fhir/ValueSet/device-kind"
        },
        "deviceName" : {
            name: "deviceName",
            dataType: DeviceDefinitionDeviceName,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.deviceName"
        },
        "capability" : {
            name: "capability",
            dataType: DeviceDefinitionCapability,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.capability"
        },
        "shelfLifeStorage" : {
            name: "shelfLifeStorage",
            dataType: ProductShelfLife,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.shelfLifeStorage"
        },
        "safety" : {
            name: "safety",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.safety",
            valueSet: "http://hl7.org/fhir/ValueSet/device-safety"
        },
        "contact" : {
            name: "contact",
            dataType: ContactPoint,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.contact"
        },
        "parentDevice" : {
            name: "parentDevice",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.parentDevice"
        },
        "property" : {
            name: "property",
            dataType: DeviceDefinitionProperty,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.property"
        },
        "onlineInformation" : {
            name: "onlineInformation",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.onlineInformation"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.text"
        },
        "owner" : {
            name: "owner",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.owner"
        },
        "identifier" : {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.identifier"
        },
        "manufacturerReference" : {
            name: "manufacturerReference",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.manufacturer[x]"
        },
        "quantity" : {
            name: "quantity",
            dataType: Quantity,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.quantity"
        },
        "manufacturerString" : {
            name: "manufacturerString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.manufacturer[x]"
        },
        "languageCode" : {
            name: "languageCode",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.languageCode"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.version"
        },
        "udiDeviceIdentifier" : {
            name: "udiDeviceIdentifier",
            dataType: DeviceDefinitionUdiDeviceIdentifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.udiDeviceIdentifier"
        },
        "url" : {
            name: "url",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.url"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.contained"
        },
        "material" : {
            name: "material",
            dataType: DeviceDefinitionMaterial,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.material"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.meta"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.implicitRules"
        },
        "specialization" : {
            name: "specialization",
            dataType: DeviceDefinitionSpecialization,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DeviceDefinition.specialization"
        },
        "modelNumber" : {
            name: "modelNumber",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "DeviceDefinition.modelNumber"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type DeviceDefinition record {|
    *DomainResource;

    RESOURCE_NAME_DEVICEDEFINITION resourceType = RESOURCE_NAME_DEVICEDEFINITION;

    BaseDeviceDefinitionMeta meta = {
        profile : [PROFILE_BASE_DEVICEDEFINITION]
    };
    Annotation[] note?;
    Extension[] extension?;
    Extension[] modifierExtension?;
    ProdCharacteristic physicalCharacteristics?;
    code language?;
    CodeableConcept 'type?;
    DeviceDefinitionDeviceName[] deviceName?;
    DeviceDefinitionCapability[] capability?;
    ProductShelfLife[] shelfLifeStorage?;
    CodeableConcept[] safety?;
    ContactPoint[] contact?;
    Reference parentDevice?;
    DeviceDefinitionProperty[] property?;
    uri onlineInformation?;
    string id?;
    Narrative text?;
    Reference owner?;
    Identifier[] identifier?;
    Reference manufacturerReference?;
    Quantity quantity?;
    string manufacturerString?;
    CodeableConcept[] languageCode?;
    string[] 'version?;
    DeviceDefinitionUdiDeviceIdentifier[] udiDeviceIdentifier?;
    uri url?;
    Resource[] contained?;
    DeviceDefinitionMaterial[] material?;
    uri implicitRules?;
    DeviceDefinitionSpecialization[] specialization?;
    string modelNumber?;
|};

@DataTypeDefinition {
    name: "BaseDeviceDefinitionMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseDeviceDefinitionMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/DeviceDefinition"];
    Coding[] security?;
    Coding[] tag?;
|};

# FHIR DeviceDefinitionMaterial datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + substance - The substance.
# + alternate - Indicates an alternative material of the device.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + allergenicIndicator - Whether the substance is a known or suspected allergen.
@DataTypeDefinition {
    name: "DeviceDefinitionMaterial",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.material.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.material.modifierExtension"
        },
        "substance": {
            name: "substance",
            dataType: CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "The substance.",
            path: "DeviceDefinition.material.substance"
        },
        "alternate": {
            name: "alternate",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates an alternative material of the device.",
            path: "DeviceDefinition.material.alternate"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.material.id"
        },
        "allergenicIndicator": {
            name: "allergenicIndicator",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether the substance is a known or suspected allergen.",
            path: "DeviceDefinition.material.allergenicIndicator"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionMaterial record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    CodeableConcept substance;
    boolean alternate?;
    string id?;
    boolean allergenicIndicator?;
|};

# DeviceDefinitionDeviceNameType enum
public enum DeviceDefinitionDeviceNameType {
   CODE_TYPE_UDI_LABEL_NAME = "udi-label-name",
   CODE_TYPE_OTHER = "other",
   CODE_TYPE_MANUFACTURER_NAME = "manufacturer-name",
   CODE_TYPE_MODEL_NAME = "model-name",
   CODE_TYPE_USER_FRIENDLY_NAME = "user-friendly-name",
   CODE_TYPE_PATIENT_REPORTED_NAME = "patient-reported-name"
}

# FHIR DeviceDefinitionProperty datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + valueCode - Property value as a code, e.g., NTP4 (synced to NTP).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
# + valueQuantity - Property value as a quantity.
@DataTypeDefinition {
    name: "DeviceDefinitionProperty",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.property.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.property.modifierExtension"
        },
        "valueCode": {
            name: "valueCode",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Property value as a code, e.g., NTP4 (synced to NTP).",
            path: "DeviceDefinition.property.valueCode"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.property.id"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Code that specifies the property DeviceDefinitionPropetyCode (Extensible).",
            path: "DeviceDefinition.property.type"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: Quantity,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Property value as a quantity.",
            path: "DeviceDefinition.property.valueQuantity"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionProperty record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    CodeableConcept[] valueCode?;
    string id?;
    CodeableConcept 'type;
    Quantity[] valueQuantity?;
|};

# FHIR DeviceDefinitionDeviceName datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The name of the device.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of deviceName. UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
@DataTypeDefinition {
    name: "DeviceDefinitionDeviceName",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.deviceName.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.deviceName.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The name of the device.",
            path: "DeviceDefinition.deviceName.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.deviceName.id"
        },
        "type": {
            name: "type",
            dataType: DeviceDefinitionDeviceNameType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of deviceName. UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.",
            path: "DeviceDefinition.deviceName.type"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionDeviceName record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    string name;
    string id?;
    DeviceDefinitionDeviceNameType 'type;
|};

# FHIR DeviceDefinitionCapability datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Description of capability.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of capability.
@DataTypeDefinition {
    name: "DeviceDefinitionCapability",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.capability.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.capability.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Description of capability.",
            path: "DeviceDefinition.capability.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.capability.id"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of capability.",
            path: "DeviceDefinition.capability.type"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionCapability record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    CodeableConcept[] description?;
    string id?;
    CodeableConcept 'type;
|};

# FHIR DeviceDefinitionUdiDeviceIdentifier datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + deviceIdentifier - The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
# + jurisdiction - The jurisdiction to which the deviceIdentifier applies.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + issuer - The organization that assigns the identifier algorithm.
@DataTypeDefinition {
    name: "DeviceDefinitionUdiDeviceIdentifier",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.udiDeviceIdentifier.extension"
        },
        "deviceIdentifier": {
            name: "deviceIdentifier",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.",
            path: "DeviceDefinition.udiDeviceIdentifier.deviceIdentifier"
        },
        "jurisdiction": {
            name: "jurisdiction",
            dataType: uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The jurisdiction to which the deviceIdentifier applies.",
            path: "DeviceDefinition.udiDeviceIdentifier.jurisdiction"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.udiDeviceIdentifier.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.udiDeviceIdentifier.id"
        },
        "issuer": {
            name: "issuer",
            dataType: uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The organization that assigns the identifier algorithm.",
            path: "DeviceDefinition.udiDeviceIdentifier.issuer"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionUdiDeviceIdentifier record {|
    Extension[] extension?;
    string deviceIdentifier;
    uri jurisdiction;
    Extension[] modifierExtension?;
    string id?;
    uri issuer;
|};

# FHIR DeviceDefinitionSpecialization datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + systemType - The standard that is used to operate and communicate.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'version - The version of the standard that is used to operate and communicate.
@DataTypeDefinition {
    name: "DeviceDefinitionSpecialization",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DeviceDefinition.specialization.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DeviceDefinition.specialization.modifierExtension"
        },
        "systemType": {
            name: "systemType",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The standard that is used to operate and communicate.",
            path: "DeviceDefinition.specialization.systemType"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DeviceDefinition.specialization.id"
        },
        "version": {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The version of the standard that is used to operate and communicate.",
            path: "DeviceDefinition.specialization.version"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type DeviceDefinitionSpecialization record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    string systemType;
    string id?;
    string 'version?;
|};

