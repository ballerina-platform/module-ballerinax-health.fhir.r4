// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;

public const string PROFILE_BASE_STRUCTUREDEFINITION = "http://hl7.org/fhir/StructureDefinition/StructureDefinition";
public const RESOURCE_NAME_STRUCTUREDEFINITION = "StructureDefinition";

# FHIR StructureDefinition resource record.
#
# + resourceType - The type of the resource describes
# + date - The date (and optionally time) when the structure definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.
# + copyright - A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + purpose - Explanation of why this structure definition is needed and why it has been designed as it has.
# + jurisdiction - A legal or geographic region in which the structure definition is intended to be used.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A free text natural language description of the structure definition from a consumer's perspective.
# + experimental - A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
# + language - The base language in which the resource is written.
# + title - A short, descriptive, user-friendly title for the structure definition.
# + 'type - The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type). References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. 'string' is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
# + differential - A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.
# + contact - Contact details to assist a user in finding and communicating with the publisher.
# + fhirVersion - The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.0.1. for this version.
# + context - Identifies the types of resource or data type elements to which the extension can be applied.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + keyword - A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.
# + identifier - A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
# + mapping - An external specification that the content is mapped to.
# + kind - Defines the kind of structure that this definition is describing.
# + 'abstract - Whether structure this definition describes is abstract or not - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged between systems.
# + baseDefinition - An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.
# + 'version - The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
# + url - An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + publisher - The name of the organization or individual that published the structure definition.
# + derivation - How the type relates to the baseDefinition.
# + contextInvariant - A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.
# + useContext - The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.
# + snapshot - A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.
# + status - The status of this structure definition. Enables tracking the life-cycle of the content.
@ResourceDefinition {
    resourceType: "StructureDefinition",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/StructureDefinition",
    elements: {
        "date" : {
            name: "date",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.date"
        },
        "copyright" : {
            name: "copyright",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.copyright"
        },
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.extension"
        },
        "purpose" : {
            name: "purpose",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.purpose"
        },
        "jurisdiction" : {
            name: "jurisdiction",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.jurisdiction",
            valueSet: "http://hl7.org/fhir/ValueSet/jurisdiction"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.description"
        },
        "experimental" : {
            name: "experimental",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.experimental"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.title"
        },
        "type" : {
            name: "type",
            dataType: uri,
            min: 1,
            max: 1,
            isArray: false,
            path: "StructureDefinition.type",
            valueSet: "http://hl7.org/fhir/ValueSet/defined-types"
        },
        "differential" : {
            name: "differential",
            dataType: StructureDefinitionDifferential,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.differential"
        },
        "contact" : {
            name: "contact",
            dataType: ContactDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.contact"
        },
        "fhirVersion" : {
            name: "fhirVersion",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.fhirVersion",
            valueSet: "http://hl7.org/fhir/ValueSet/FHIR-version|4.0.1"
        },
        "context" : {
            name: "context",
            dataType: StructureDefinitionContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.context"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.text"
        },
        "keyword" : {
            name: "keyword",
            dataType: Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.keyword",
            valueSet: "http://hl7.org/fhir/ValueSet/definition-use"
        },
        "identifier" : {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.identifier"
        },
        "mapping" : {
            name: "mapping",
            dataType: StructureDefinitionMapping,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.mapping"
        },
        "kind" : {
            name: "kind",
            dataType: StructureDefinitionKind,
            min: 1,
            max: 1,
            isArray: false,
            path: "StructureDefinition.kind",
            valueSet: "http://hl7.org/fhir/ValueSet/structure-definition-kind|4.0.1"
        },
        "abstract" : {
            name: "abstract",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            path: "StructureDefinition.abstract"
        },
        "baseDefinition" : {
            name: "baseDefinition",
            dataType: canonical,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.baseDefinition"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.version"
        },
        "url" : {
            name: "url",
            dataType: uri,
            min: 1,
            max: 1,
            isArray: false,
            path: "StructureDefinition.url"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.contained"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            path: "StructureDefinition.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.implicitRules"
        },
        "publisher" : {
            name: "publisher",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.publisher"
        },
        "derivation" : {
            name: "derivation",
            dataType: StructureDefinitionDerivation,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.derivation",
            valueSet: "http://hl7.org/fhir/ValueSet/type-derivation-rule|4.0.1"
        },
        "contextInvariant" : {
            name: "contextInvariant",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.contextInvariant"
        },
        "useContext" : {
            name: "useContext",
            dataType: UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "StructureDefinition.useContext"
        },
        "snapshot" : {
            name: "snapshot",
            dataType: StructureDefinitionDifferential,
            min: 0,
            max: 1,
            isArray: false,
            path: "StructureDefinition.snapshot"
        },
        "status" : {
            name: "status",
            dataType: StructureDefinitionStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "StructureDefinition.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|4.0.1"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type StructureDefinition record {|
    *DomainResource;

    RESOURCE_NAME_STRUCTUREDEFINITION resourceType = RESOURCE_NAME_STRUCTUREDEFINITION;

    BaseStructureDefinitionMeta meta = {
        profile : [PROFILE_BASE_STRUCTUREDEFINITION]
    };
    dateTime date?;
    markdown copyright?;
    Extension[] extension?;
    markdown purpose?;
    CodeableConcept[] jurisdiction?;
    Extension[] modifierExtension?;
    markdown description?;
    boolean experimental?;
    code language?;
    string title?;
    uri 'type;
    StructureDefinitionDifferential differential?;
    ContactDetail[] contact?;
    code fhirVersion?;
    StructureDefinitionContext[] context?;
    string id?;
    Narrative text?;
    Coding[] keyword?;
    Identifier[] identifier?;
    StructureDefinitionMapping[] mapping?;
    StructureDefinitionKind kind;
    boolean 'abstract;
    canonical baseDefinition?;
    string 'version?;
    uri url;
    Resource[] contained?;
    string name;
    uri implicitRules?;
    string publisher?;
    StructureDefinitionDerivation derivation?;
    string[] contextInvariant?;
    UsageContext[] useContext?;
    StructureDefinitionDifferential snapshot?;
    StructureDefinitionStatus status;
|};

@DataTypeDefinition {
    name: "BaseStructureDefinitionMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseStructureDefinitionMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/StructureDefinition"];
    Coding[] security?;
    Coding[] tag?;
|};

# FHIR StructureDefinitionDifferential datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + element - Captures constraints on each element within the resource.
@DataTypeDefinition {
    name: "StructureDefinitionDifferential",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureDefinition.differential.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureDefinition.differential.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureDefinition.differential.id"
        },
        "element": {
            name: "element",
            dataType: ElementDefinition,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Captures constraints on each element within the resource.",
            path: "StructureDefinition.differential.element"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type StructureDefinitionDifferential record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    string id?;
    @constraint:Array {
       minLength: 1
    }
    ElementDefinition[] element;
|};

# StructureDefinitionKind enum
public enum StructureDefinitionKind {
   CODE_KIND_PRIMITIVE_TYPE = "primitive-type",
   CODE_KIND_RESOURCE = "resource",
   CODE_KIND_COMPLEX_TYPE = "complex-type",
   CODE_KIND_LOGICAL = "logical"
}

# FHIR StructureDefinitionMapping datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + identity - An Internal id that is used to identify this mapping set when specific mappings are made.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - A name for the specification that is being mapped to.
# + comment - Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + uri - An absolute URI that identifies the specification that this mapping is expressed to.
@DataTypeDefinition {
    name: "StructureDefinitionMapping",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureDefinition.mapping.extension"
        },
        "identity": {
            name: "identity",
            dataType: id,
            min: 1,
            max: 1,
            isArray: false,
            description: "An Internal id that is used to identify this mapping set when specific mappings are made.",
            path: "StructureDefinition.mapping.identity"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureDefinition.mapping.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A name for the specification that is being mapped to.",
            path: "StructureDefinition.mapping.name"
        },
        "comment": {
            name: "comment",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.",
            path: "StructureDefinition.mapping.comment"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureDefinition.mapping.id"
        },
        "uri": {
            name: "uri",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "An absolute URI that identifies the specification that this mapping is expressed to.",
            path: "StructureDefinition.mapping.uri"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type StructureDefinitionMapping record {|
    Extension[] extension?;
    id identity;
    Extension[] modifierExtension?;
    string name?;
    string comment?;
    string id?;
    uri uri?;
|};

# StructureDefinitionContextType enum
public enum StructureDefinitionContextType {
   CODE_TYPE_EXTENSION = "extension",
   CODE_TYPE_FHIRPATH = "fhirpath",
   CODE_TYPE_ELEMENT = "element"
}

# StructureDefinitionStatus enum
public enum StructureDefinitionStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR StructureDefinitionContext datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + expression - An expression that defines where an extension can be used in resources.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Defines how to interpret the expression that defines what the context of the extension is.
@DataTypeDefinition {
    name: "StructureDefinitionContext",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "StructureDefinition.context.extension"
        },
        "expression": {
            name: "expression",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "An expression that defines where an extension can be used in resources.",
            path: "StructureDefinition.context.expression"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "StructureDefinition.context.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "StructureDefinition.context.id"
        },
        "type": {
            name: "type",
            dataType: StructureDefinitionContextType,
            min: 1,
            max: 1,
            isArray: false,
            description: "Defines how to interpret the expression that defines what the context of the extension is.",
            path: "StructureDefinition.context.type"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type StructureDefinitionContext record {|
    Extension[] extension?;
    string expression;
    Extension[] modifierExtension?;
    string id?;
    StructureDefinitionContextType 'type;
|};

# StructureDefinitionDerivation enum
public enum StructureDefinitionDerivation {
   CODE_DERIVATION_SPECIALIZATION = "specialization",
   CODE_DERIVATION_CONSTRAINT = "constraint"
}

