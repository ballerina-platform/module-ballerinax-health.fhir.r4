// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;

public const string PROFILE_BASE_CAPABILITYSTATEMENT = "http://hl7.org/fhir/StructureDefinition/CapabilityStatement";
public const RESOURCE_NAME_CAPABILITYSTATEMENT = "CapabilityStatement";

# FHIR CapabilityStatement resource record.
#
# + resourceType - The type of the resource describes
# + date - The date (and optionally time) when the capability statement was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.
# + instantiates - Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details.
# + copyright - A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + software - Software that is covered by this capability statement. It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.
# + purpose - Explanation of why this capability statement is needed and why it has been designed as it has.
# + document - A document definition.
# + jurisdiction - A legal or geographic region in which the capability statement is intended to be used.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
# + experimental - A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
# + language - The base language in which the resource is written.
# + title - A short, descriptive, user-friendly title for the capability statement.
# + contact - Contact details to assist a user in finding and communicating with the publisher.
# + fhirVersion - The version of the FHIR specification that this CapabilityStatement describes (which SHALL be the same as the FHIR version of the CapabilityStatement itself). There is no default value.
# + patchFormat - A list of the patch formats supported by this implementation using their content types.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + rest - A definition of the restful capabilities of the solution, if any.
# + imports - Reference to a canonical URL of another CapabilityStatement that this software adds to. The capability statement automatically includes everything in the other statement, and it is not duplicated, though the server may repeat the same resources, interactions and operations to add additional details to them.
# + kind - The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
# + implementation - Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.
# + format - A list of the formats supported by this implementation using their content types.
# + 'version - The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
# + url - An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers.
# + messaging - A description of the messaging capabilities of the solution.
# + implementationGuide - A list of implementation guides that the server does (or should) support in their entirety.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + publisher - The name of the organization or individual that published the capability statement.
# + useContext - The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances.
# + status - The status of this capability statement. Enables tracking the life-cycle of the content.
@ResourceDefinition {
    resourceType: "CapabilityStatement",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/CapabilityStatement",
    elements: {
        "date" : {
            name: "date",
            dataType: dateTime,
            min: 1,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.date"
        },
        "instantiates" : {
            name: "instantiates",
            dataType: canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.instantiates"
        },
        "copyright" : {
            name: "copyright",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.copyright"
        },
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.extension"
        },
        "software" : {
            name: "software",
            dataType: CapabilityStatementSoftware,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.software"
        },
        "purpose" : {
            name: "purpose",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.purpose"
        },
        "document" : {
            name: "document",
            dataType: CapabilityStatementDocument,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.document"
        },
        "jurisdiction" : {
            name: "jurisdiction",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.jurisdiction",
            valueSet: "http://hl7.org/fhir/ValueSet/jurisdiction"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.description"
        },
        "experimental" : {
            name: "experimental",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.experimental"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.title"
        },
        "contact" : {
            name: "contact",
            dataType: ContactDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.contact"
        },
        "fhirVersion" : {
            name: "fhirVersion",
            dataType: code,
            min: 1,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.fhirVersion",
            valueSet: "http://hl7.org/fhir/ValueSet/FHIR-version|4.0.1"
        },
        "patchFormat" : {
            name: "patchFormat",
            dataType: code,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.patchFormat",
            valueSet: "http://hl7.org/fhir/ValueSet/mimetypes|4.0.1"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.text"
        },
        "rest" : {
            name: "rest",
            dataType: CapabilityStatementRest,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.rest"
        },
        "imports" : {
            name: "imports",
            dataType: canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.imports"
        },
        "kind" : {
            name: "kind",
            dataType: CapabilityStatementKind,
            min: 1,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.kind",
            valueSet: "http://hl7.org/fhir/ValueSet/capability-statement-kind|4.0.1"
        },
        "implementation" : {
            name: "implementation",
            dataType: CapabilityStatementImplementation,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.implementation"
        },
        "format" : {
            name: "format",
            dataType: CapabilityStatementFormat,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.format",
            valueSet: "http://hl7.org/fhir/ValueSet/mimetypes|4.0.1"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.version"
        },
        "url" : {
            name: "url",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.url"
        },
        "messaging" : {
            name: "messaging",
            dataType: CapabilityStatementMessaging,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.messaging"
        },
        "implementationGuide" : {
            name: "implementationGuide",
            dataType: canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.implementationGuide"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.contained"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.implicitRules"
        },
        "publisher" : {
            name: "publisher",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.publisher"
        },
        "useContext" : {
            name: "useContext",
            dataType: UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "CapabilityStatement.useContext"
        },
        "status" : {
            name: "status",
            dataType: CapabilityStatementStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "CapabilityStatement.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|4.0.1"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type CapabilityStatement record {|
    *DomainResource;

    RESOURCE_NAME_CAPABILITYSTATEMENT resourceType = RESOURCE_NAME_CAPABILITYSTATEMENT;

    BaseCapabilityStatementMeta meta = {
        profile : [PROFILE_BASE_CAPABILITYSTATEMENT]
    };
    dateTime date;
    canonical[] instantiates?;
    markdown copyright?;
    Extension[] extension?;
    CapabilityStatementSoftware software?;
    markdown purpose?;
    CapabilityStatementDocument[] document?;
    CodeableConcept[] jurisdiction?;
    Extension[] modifierExtension?;
    markdown description?;
    boolean experimental?;
    code language?;
    string title?;
    ContactDetail[] contact?;
    code fhirVersion;
    code[] patchFormat?;
    string id?;
    Narrative text?;
    CapabilityStatementRest[] rest?;
    canonical[] imports?;
    CapabilityStatementKind kind;
    CapabilityStatementImplementation implementation?;
    @constraint:Array {
       minLength: 1
    }
    CapabilityStatementFormat[] format;
    string 'version?;
    uri url?;
    CapabilityStatementMessaging[] messaging?;
    canonical[] implementationGuide?;
    Resource[] contained?;
    string name?;
    uri implicitRules?;
    string publisher?;
    UsageContext[] useContext?;
    CapabilityStatementStatus status;
|};

@DataTypeDefinition {
    name: "BaseCapabilityStatementMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseCapabilityStatementMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/CapabilityStatement"];
    Coding[] security?;
    Coding[] tag?;
|};

# CapabilityStatementKind enum
public enum CapabilityStatementKind {
   CODE_KIND_CAPABILITY = "capability",
   CODE_KIND_REQUIREMENTS = "requirements",
   CODE_KIND_INSTANCE = "instance"
}

# CapabilityStatementRestResourceConditionalDelete enum
public enum CapabilityStatementRestResourceConditionalDelete {
   CODE_CONDITIONALDELETE_SINGLE = "single",
   CODE_CONDITIONALDELETE_MULTIPLE = "multiple",
   CODE_CONDITIONALDELETE_NOT_SUPPORTED = "not-supported"
}

# FHIR CapabilityStatementRestResource datatype record.
#
# + updateCreate - A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
# + searchInclude - A list of _include values supported by the server.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + conditionalCreate - A flag that indicates that the server supports conditional create.
# + versioning - This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.
# + searchParam - Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
# + searchRevInclude - A list of _revinclude (reverse include) values supported by the server.
# + documentation - Additional information about the resource type used by the system.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + profile - A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile-uses).
# + referencePolicy - A set of flags that defines how references are supported.
# + 'type - A type of resource exposed via the restful interface.
# + supportedProfile - A list of profiles that represent different use cases supported by the system. For a server, 'supported by the system' means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses).
# + conditionalDelete - A code that indicates how the server supports conditional delete.
# + conditionalUpdate - A flag that indicates that the server supports conditional update.
# + readHistory - A flag for whether the server is able to return past versions as part of the vRead operation.
# + conditionalRead - A code that indicates how the server supports conditional read.
# + interaction - Identifies a restful operation supported by the solution.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + operation - Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.
@DataTypeDefinition {
    name: "CapabilityStatementRestResource",
    baseType: (),
    elements: {
        "updateCreate": {
            name: "updateCreate",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.",
            path: "CapabilityStatement.rest.resource.updateCreate"
        },
        "searchInclude": {
            name: "searchInclude",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A list of _include values supported by the server.",
            path: "CapabilityStatement.rest.resource.searchInclude"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.rest.resource.extension"
        },
        "conditionalCreate": {
            name: "conditionalCreate",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "A flag that indicates that the server supports conditional create.",
            path: "CapabilityStatement.rest.resource.conditionalCreate"
        },
        "versioning": {
            name: "versioning",
            dataType: CapabilityStatementRestResourceVersioning,
            min: 0,
            max: 1,
            isArray: false,
            description: "This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.",
            path: "CapabilityStatement.rest.resource.versioning"
        },
        "searchParam": {
            name: "searchParam",
            dataType: CapabilityStatementRestResourceSearchParam,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.",
            path: "CapabilityStatement.rest.resource.searchParam"
        },
        "searchRevInclude": {
            name: "searchRevInclude",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A list of _revinclude (reverse include) values supported by the server.",
            path: "CapabilityStatement.rest.resource.searchRevInclude"
        },
        "documentation": {
            name: "documentation",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Additional information about the resource type used by the system.",
            path: "CapabilityStatement.rest.resource.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.rest.resource.modifierExtension"
        },
        "profile": {
            name: "profile",
            dataType: canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile-uses).",
            path: "CapabilityStatement.rest.resource.profile"
        },
        "referencePolicy": {
            name: "referencePolicy",
            dataType: CapabilityStatementRestResourceReferencePolicy,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A set of flags that defines how references are supported.",
            path: "CapabilityStatement.rest.resource.referencePolicy"
        },
        "type": {
            name: "type",
            dataType: code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A type of resource exposed via the restful interface.",
            path: "CapabilityStatement.rest.resource.type"
        },
        "supportedProfile": {
            name: "supportedProfile",
            dataType: canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A list of profiles that represent different use cases supported by the system. For a server, 'supported by the system' means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses).",
            path: "CapabilityStatement.rest.resource.supportedProfile"
        },
        "conditionalDelete": {
            name: "conditionalDelete",
            dataType: CapabilityStatementRestResourceConditionalDelete,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code that indicates how the server supports conditional delete.",
            path: "CapabilityStatement.rest.resource.conditionalDelete"
        },
        "conditionalUpdate": {
            name: "conditionalUpdate",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "A flag that indicates that the server supports conditional update.",
            path: "CapabilityStatement.rest.resource.conditionalUpdate"
        },
        "readHistory": {
            name: "readHistory",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "A flag for whether the server is able to return past versions as part of the vRead operation.",
            path: "CapabilityStatement.rest.resource.readHistory"
        },
        "conditionalRead": {
            name: "conditionalRead",
            dataType: CapabilityStatementRestResourceConditionalRead,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code that indicates how the server supports conditional read.",
            path: "CapabilityStatement.rest.resource.conditionalRead"
        },
        "interaction": {
            name: "interaction",
            dataType: CapabilityStatementRestResourceInteraction,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies a restful operation supported by the solution.",
            path: "CapabilityStatement.rest.resource.interaction"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.rest.resource.id"
        },
        "operation": {
            name: "operation",
            dataType: CapabilityStatementRestResourceOperation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.",
            path: "CapabilityStatement.rest.resource.operation"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementRestResource record {|
    boolean updateCreate?;
    string[] searchInclude?;
    Extension[] extension?;
    boolean conditionalCreate?;
    CapabilityStatementRestResourceVersioning versioning?;
    CapabilityStatementRestResourceSearchParam[] searchParam?;
    string[] searchRevInclude?;
    markdown documentation?;
    Extension[] modifierExtension?;
    canonical profile?;
    CapabilityStatementRestResourceReferencePolicy[] referencePolicy?;
    code 'type;
    canonical[] supportedProfile?;
    CapabilityStatementRestResourceConditionalDelete conditionalDelete?;
    boolean conditionalUpdate?;
    boolean readHistory?;
    CapabilityStatementRestResourceConditionalRead conditionalRead?;
    CapabilityStatementRestResourceInteraction[] interaction?;
    string id?;
    CapabilityStatementRestResourceOperation[] operation?;
|};

# CapabilityStatementRestInteractionCode enum
public enum CapabilityStatementRestInteractionCode {
   CODE_CODE_SEARCH_SYSTEM = "search-system",
   CODE_CODE_HISTORY_SYSTEM = "history-system",
   CODE_CODE_BATCH = "batch",
   CODE_CODE_TRANSACTION = "transaction"
}

# FHIR CapabilityStatementSoftware datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + releaseDate - Date this version of the software was released.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Name the software is known by.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'version - The version identifier for the software covered by this statement.
@DataTypeDefinition {
    name: "CapabilityStatementSoftware",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.software.extension"
        },
        "releaseDate": {
            name: "releaseDate",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Date this version of the software was released.",
            path: "CapabilityStatement.software.releaseDate"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.software.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Name the software is known by.",
            path: "CapabilityStatement.software.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.software.id"
        },
        "version": {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The version identifier for the software covered by this statement.",
            path: "CapabilityStatement.software.version"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementSoftware record {|
    Extension[] extension?;
    dateTime releaseDate?;
    Extension[] modifierExtension?;
    string name;
    string id?;
    string 'version?;
|};

# FHIR CapabilityStatementRest datatype record.
#
# + mode - Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + security - Information about security implementation from an interface perspective - what a client needs to know.
# + 'resource - A specification of the restful capabilities of the solution for a specific resource type.
# + documentation - Information about the system's restful capabilities that apply across all applications, such as security.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + compartment - An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
# + interaction - A specification of restful operations supported by the system.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "CapabilityStatementRest",
    baseType: (),
    elements: {
        "mode": {
            name: "mode",
            dataType: CapabilityStatementRestMode,
            min: 1,
            max: 1,
            isArray: false,
            description: "Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.",
            path: "CapabilityStatement.rest.mode"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.rest.extension"
        },
        "security": {
            name: "security",
            dataType: CapabilityStatementRestSecurity,
            min: 0,
            max: 1,
            isArray: false,
            description: "Information about security implementation from an interface perspective - what a client needs to know.",
            path: "CapabilityStatement.rest.security"
        },
        "resource": {
            name: "resource",
            dataType: CapabilityStatementRestResource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A specification of the restful capabilities of the solution for a specific resource type.",
            path: "CapabilityStatement.rest.resource"
        },
        "documentation": {
            name: "documentation",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Information about the system's restful capabilities that apply across all applications, such as security.",
            path: "CapabilityStatement.rest.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.rest.modifierExtension"
        },
        "compartment": {
            name: "compartment",
            dataType: canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .",
            path: "CapabilityStatement.rest.compartment"
        },
        "interaction": {
            name: "interaction",
            dataType: CapabilityStatementRestResourceInteraction,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A specification of restful operations supported by the system.",
            path: "CapabilityStatement.rest.interaction"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.rest.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementRest record {|
    CapabilityStatementRestMode mode;
    Extension[] extension?;
    CapabilityStatementRestSecurity security?;
    CapabilityStatementRestResource[] 'resource?;
    markdown documentation?;
    Extension[] modifierExtension?;
    canonical[] compartment?;
    CapabilityStatementRestResourceInteraction[] interaction?;
    string id?;
|};

# FHIR CapabilityStatementDocument datatype record.
#
# + mode - Mode of this document declaration - whether an application is a producer or consumer.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + documentation - A description of how the application supports or uses the specified document profile. For example, when documents are created, what action is taken with consumed documents, etc.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + profile - A profile on the document Bundle that constrains which resources are present, and their contents.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "CapabilityStatementDocument",
    baseType: (),
    elements: {
        "mode": {
            name: "mode",
            dataType: CapabilityStatementDocumentMode,
            min: 1,
            max: 1,
            isArray: false,
            description: "Mode of this document declaration - whether an application is a producer or consumer.",
            path: "CapabilityStatement.document.mode"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.document.extension"
        },
        "documentation": {
            name: "documentation",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A description of how the application supports or uses the specified document profile. For example, when documents are created, what action is taken with consumed documents, etc.",
            path: "CapabilityStatement.document.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.document.modifierExtension"
        },
        "profile": {
            name: "profile",
            dataType: canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "A profile on the document Bundle that constrains which resources are present, and their contents.",
            path: "CapabilityStatement.document.profile"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.document.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementDocument record {|
    CapabilityStatementDocumentMode mode;
    Extension[] extension?;
    markdown documentation?;
    Extension[] modifierExtension?;
    canonical profile;
    string id?;
|};

# FHIR CapabilityStatementRestSecurity datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + cors - Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.
# + 'service - Types of security services that are supported/required by the system.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - General description of how security works.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "CapabilityStatementRestSecurity",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.rest.security.extension"
        },
        "cors": {
            name: "cors",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.",
            path: "CapabilityStatement.rest.security.cors"
        },
        "service": {
            name: "service",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Types of security services that are supported/required by the system.",
            path: "CapabilityStatement.rest.security.service"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.rest.security.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "General description of how security works.",
            path: "CapabilityStatement.rest.security.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.rest.security.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementRestSecurity record {|
    Extension[] extension?;
    boolean cors?;
    CodeableConcept[] 'service?;
    Extension[] modifierExtension?;
    markdown description?;
    string id?;
|};

# FHIR CapabilityStatementRestResourceOperation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + documentation - Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The name of the operation or query. For an operation, this is the name prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called.
# + definition - Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation. If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition. The custom definition would describe the specific subset of functionality supported.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "CapabilityStatementRestResourceOperation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.rest.resource.operation.extension"
        },
        "documentation": {
            name: "documentation",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.",
            path: "CapabilityStatement.rest.resource.operation.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.rest.resource.operation.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The name of the operation or query. For an operation, this is the name prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called.",
            path: "CapabilityStatement.rest.resource.operation.name"
        },
        "definition": {
            name: "definition",
            dataType: canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation. If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition. The custom definition would describe the specific subset of functionality supported.",
            path: "CapabilityStatement.rest.resource.operation.definition"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.rest.resource.operation.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementRestResourceOperation record {|
    Extension[] extension?;
    markdown documentation?;
    Extension[] modifierExtension?;
    string name;
    canonical definition;
    string id?;
|};

# CapabilityStatementRestResourceConditionalRead enum
public enum CapabilityStatementRestResourceConditionalRead {
   CODE_CONDITIONALREAD_NOT_SUPPORTED = "not-supported",
   CODE_CONDITIONALREAD_MODIFIED_SINCE = "modified-since",
   CODE_CONDITIONALREAD_FULL_SUPPORT = "full-support",
   CODE_CONDITIONALREAD_NOT_MATCH = "not-match"
}

# CapabilityStatementRestResourceReferencePolicy enum
public enum CapabilityStatementRestResourceReferencePolicy {
   CODE_REFERENCEPOLICY_RESOLVES = "resolves",
   CODE_REFERENCEPOLICY_ENFORCED = "enforced",
   CODE_REFERENCEPOLICY_LOGICAL = "logical",
   CODE_REFERENCEPOLICY_LOCAL = "local",
   CODE_REFERENCEPOLICY_LITERAL = "literal"
}

# CapabilityStatementRestResourceInteractionCode enum
public enum CapabilityStatementRestResourceInteractionCode {
   CODE_CODE_PATCH = "patch",
   CODE_CODE_READ = "read",
   CODE_CODE_SEARCH_TYPE = "search-type",
   CODE_CODE_VREAD = "vread",
   CODE_CODE_UPDATE = "update",
   CODE_CODE_CREATE = "create",
   CODE_CODE_HISTORY_INSTANCE = "history-instance",
   CODE_CODE_DELETE = "delete",
   CODE_CODE_HISTORY_TYPE = "history-type"
}

# CapabilityStatementRestMode enum
public enum CapabilityStatementRestMode {
   CODE_MODE_SERVER = "server",
   CODE_MODE_CLIENT = "client"
}

# FHIR CapabilityStatementRestResourceSearchParam datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + documentation - This allows documentation of any distinct behaviors about how the search parameter is used. For example, text matching algorithms.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The name of the search parameter used in the interface.
# + definition - An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of value a search parameter refers to, and how the content is interpreted.
@DataTypeDefinition {
    name: "CapabilityStatementRestResourceSearchParam",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.rest.resource.searchParam.extension"
        },
        "documentation": {
            name: "documentation",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "This allows documentation of any distinct behaviors about how the search parameter is used. For example, text matching algorithms.",
            path: "CapabilityStatement.rest.resource.searchParam.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.rest.resource.searchParam.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The name of the search parameter used in the interface.",
            path: "CapabilityStatement.rest.resource.searchParam.name"
        },
        "definition": {
            name: "definition",
            dataType: canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.",
            path: "CapabilityStatement.rest.resource.searchParam.definition"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.rest.resource.searchParam.id"
        },
        "type": {
            name: "type",
            dataType: CapabilityStatementRestResourceSearchParamType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of value a search parameter refers to, and how the content is interpreted.",
            path: "CapabilityStatement.rest.resource.searchParam.type"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementRestResourceSearchParam record {|
    Extension[] extension?;
    markdown documentation?;
    Extension[] modifierExtension?;
    string name;
    canonical definition?;
    string id?;
    CapabilityStatementRestResourceSearchParamType 'type;
|};

# CapabilityStatementDocumentMode enum
public enum CapabilityStatementDocumentMode {
   CODE_MODE_PRODUCER = "producer",
   CODE_MODE_CONSUMER = "consumer"
}

# CapabilityStatementStatus enum
public enum CapabilityStatementStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# CapabilityStatementRestResourceSearchParamType enum
public enum CapabilityStatementRestResourceSearchParamType {
   CODE_TYPE_DATE = "date",
   CODE_TYPE_REFERENCE = "reference",
   CODE_TYPE_SPECIAL = "special",
   CODE_TYPE_NUMBER = "number",
   CODE_TYPE_QUANTITY = "quantity",
   CODE_TYPE_STRING = "string",
   CODE_TYPE_COMPOSITE = "composite",
   CODE_TYPE_URI = "uri",
   CODE_TYPE_TOKEN = "token"
}

# CapabilityStatementMessagingSupportedMessageMode enum
public enum CapabilityStatementMessagingSupportedMessageMode {
   CODE_MODE_RECEIVER = "receiver",
   CODE_MODE_SENDER = "sender"
}

# FHIR CapabilityStatementRestResourceInteraction datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Coded identifier of the operation, supported by the system resource.
# + documentation - Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "CapabilityStatementRestResourceInteraction",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.rest.resource.interaction.extension"
        },
        "code": {
            name: "code",
            dataType: CapabilityStatementRestResourceInteractionCode,
            min: 1,
            max: 1,
            isArray: false,
            description: "Coded identifier of the operation, supported by the system resource.",
            path: "CapabilityStatement.rest.resource.interaction.code"
        },
        "documentation": {
            name: "documentation",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.",
            path: "CapabilityStatement.rest.resource.interaction.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.rest.resource.interaction.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.rest.resource.interaction.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementRestResourceInteraction record {|
    Extension[] extension?;
    CapabilityStatementRestResourceInteractionCode code;
    markdown documentation?;
    Extension[] modifierExtension?;
    string id?;
|};

# CapabilityStatementFormat enum
public enum CapabilityStatementFormat {
   CODE_FORMAT_FORMATS = "formats",
   CODE_FORMAT_MIME = "mime",
   CODE_FORMAT_JSON = "json",
   CODE_FORMAT_TTL = "ttl"
}

# FHIR CapabilityStatementMessagingSupportedMessage datatype record.
#
# + mode - The mode of this event declaration - whether application is sender or receiver.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + definition - Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "CapabilityStatementMessagingSupportedMessage",
    baseType: (),
    elements: {
        "mode": {
            name: "mode",
            dataType: CapabilityStatementMessagingSupportedMessageMode,
            min: 1,
            max: 1,
            isArray: false,
            description: "The mode of this event declaration - whether application is sender or receiver.",
            path: "CapabilityStatement.messaging.supportedMessage.mode"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.messaging.supportedMessage.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.messaging.supportedMessage.modifierExtension"
        },
        "definition": {
            name: "definition",
            dataType: canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.",
            path: "CapabilityStatement.messaging.supportedMessage.definition"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.messaging.supportedMessage.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementMessagingSupportedMessage record {|
    CapabilityStatementMessagingSupportedMessageMode mode;
    Extension[] extension?;
    Extension[] modifierExtension?;
    canonical definition;
    string id?;
|};

# FHIR CapabilityStatementMessaging datatype record.
#
# + endpoint - An endpoint (network accessible address) to which messages and/or replies are to be sent.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + documentation - Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement. For example, the process for becoming an authorized messaging exchange partner.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + reliableCache - Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).
# + supportedMessage - References to message definitions for messages this system can send or receive.
@DataTypeDefinition {
    name: "CapabilityStatementMessaging",
    baseType: (),
    elements: {
        "endpoint": {
            name: "endpoint",
            dataType: CapabilityStatementMessagingEndpoint,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "An endpoint (network accessible address) to which messages and/or replies are to be sent.",
            path: "CapabilityStatement.messaging.endpoint"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.messaging.extension"
        },
        "documentation": {
            name: "documentation",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement. For example, the process for becoming an authorized messaging exchange partner.",
            path: "CapabilityStatement.messaging.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.messaging.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.messaging.id"
        },
        "reliableCache": {
            name: "reliableCache",
            dataType: unsignedInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).",
            path: "CapabilityStatement.messaging.reliableCache"
        },
        "supportedMessage": {
            name: "supportedMessage",
            dataType: CapabilityStatementMessagingSupportedMessage,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "References to message definitions for messages this system can send or receive.",
            path: "CapabilityStatement.messaging.supportedMessage"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementMessaging record {|
    CapabilityStatementMessagingEndpoint[] endpoint?;
    Extension[] extension?;
    markdown documentation?;
    Extension[] modifierExtension?;
    string id?;
    unsignedInt reliableCache?;
    CapabilityStatementMessagingSupportedMessage[] supportedMessage?;
|};

# FHIR CapabilityStatementImplementation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + custodian - The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Information about the specific installation that this capability statement relates to.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + url - An absolute base URL for the implementation. This forms the base for REST interfaces as well as the mailbox and document interfaces.
@DataTypeDefinition {
    name: "CapabilityStatementImplementation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.implementation.extension"
        },
        "custodian": {
            name: "custodian",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.",
            path: "CapabilityStatement.implementation.custodian"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.implementation.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Information about the specific installation that this capability statement relates to.",
            path: "CapabilityStatement.implementation.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.implementation.id"
        },
        "url": {
            name: "url",
            dataType: urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "An absolute base URL for the implementation. This forms the base for REST interfaces as well as the mailbox and document interfaces.",
            path: "CapabilityStatement.implementation.url"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementImplementation record {|
    Extension[] extension?;
    Reference custodian?;
    Extension[] modifierExtension?;
    string description;
    string id?;
    urlType url?;
|};

# FHIR CapabilityStatementMessagingEndpoint datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + protocol - A list of the messaging transport protocol(s) identifiers, supported by this endpoint.
# + address - The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "CapabilityStatementMessagingEndpoint",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "CapabilityStatement.messaging.endpoint.extension"
        },
        "protocol": {
            name: "protocol",
            dataType: Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "A list of the messaging transport protocol(s) identifiers, supported by this endpoint.",
            path: "CapabilityStatement.messaging.endpoint.protocol"
        },
        "address": {
            name: "address",
            dataType: urlType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.",
            path: "CapabilityStatement.messaging.endpoint.address"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "CapabilityStatement.messaging.endpoint.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "CapabilityStatement.messaging.endpoint.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type CapabilityStatementMessagingEndpoint record {|
    Extension[] extension?;
    Coding protocol;
    urlType address;
    Extension[] modifierExtension?;
    string id?;
|};

# CapabilityStatementRestResourceVersioning enum
public enum CapabilityStatementRestResourceVersioning {
   CODE_VERSIONING_VERSIONED_UPDATE = "versioned-update",
   CODE_VERSIONING_VERSIONED = "versioned",
   CODE_VERSIONING_NO_VERSION = "no-version"
}

