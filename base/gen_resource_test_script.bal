// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;

public const string PROFILE_BASE_TESTSCRIPT = "http://hl7.org/fhir/StructureDefinition/TestScript";
public const RESOURCE_NAME_TESTSCRIPT = "TestScript";

# FHIR TestScript resource record.
#
# + resourceType - The type of the resource describes
# + date - The date (and optionally time) when the test script was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.
# + copyright - A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + metadata - The required capability must exist and are assumed to function correctly on the FHIR server being tested.
# + purpose - Explanation of why this test script is needed and why it has been designed as it has.
# + jurisdiction - A legal or geographic region in which the test script is intended to be used.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + origin - An abstract server used in operations within this test script in the origin element.
# + destination - An abstract server used in operations within this test script in the destination element.
# + description - A free text natural language description of the test script from a consumer's perspective.
# + experimental - A Boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
# + language - The base language in which the resource is written.
# + title - A short, descriptive, user-friendly title for the test script.
# + contact - Contact details to assist a user in finding and communicating with the publisher.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + teardown - A series of operations required to clean up after all the tests are executed (successfully or otherwise).
# + identifier - A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
# + test - A test in this script.
# + profile - Reference to the profile to be used for validation.
# + 'version - The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
# + url - An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this test script is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test script is stored on different servers.
# + fixture - Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation.
# + variable - Variable is set based either on element value in response body or on header field value in the response headers.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + publisher - The name of the organization or individual that published the test script.
# + setup - A series of required setup operations before tests are executed.
# + useContext - The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances.
# + status - The status of this test script. Enables tracking the life-cycle of the content.
@ResourceDefinition {
    resourceType: "TestScript",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/TestScript",
    elements: {
        "date" : {
            name: "date",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.date"
        },
        "copyright" : {
            name: "copyright",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.copyright"
        },
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.extension"
        },
        "metadata" : {
            name: "metadata",
            dataType: TestScriptMetadata,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.metadata"
        },
        "purpose" : {
            name: "purpose",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.purpose"
        },
        "jurisdiction" : {
            name: "jurisdiction",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.jurisdiction",
            valueSet: "http://hl7.org/fhir/ValueSet/jurisdiction"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.modifierExtension"
        },
        "origin" : {
            name: "origin",
            dataType: TestScriptOrigin,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.origin"
        },
        "destination" : {
            name: "destination",
            dataType: TestScriptOrigin,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.destination"
        },
        "description" : {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.description"
        },
        "experimental" : {
            name: "experimental",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.experimental"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.title"
        },
        "contact" : {
            name: "contact",
            dataType: ContactDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.contact"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.text"
        },
        "teardown" : {
            name: "teardown",
            dataType: TestScriptTeardown,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.teardown"
        },
        "identifier" : {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.identifier"
        },
        "test" : {
            name: "test",
            dataType: TestScriptTest,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.test"
        },
        "profile" : {
            name: "profile",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.profile"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.version"
        },
        "url" : {
            name: "url",
            dataType: uri,
            min: 1,
            max: 1,
            isArray: false,
            path: "TestScript.url"
        },
        "fixture" : {
            name: "fixture",
            dataType: TestScriptFixture,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.fixture"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.contained"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            path: "TestScript.name"
        },
        "variable" : {
            name: "variable",
            dataType: TestScriptVariable,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.variable"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.implicitRules"
        },
        "publisher" : {
            name: "publisher",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.publisher"
        },
        "setup" : {
            name: "setup",
            dataType: TestScriptTeardown,
            min: 0,
            max: 1,
            isArray: false,
            path: "TestScript.setup"
        },
        "useContext" : {
            name: "useContext",
            dataType: UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TestScript.useContext"
        },
        "status" : {
            name: "status",
            dataType: TestScriptStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "TestScript.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|4.0.1"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type TestScript record {|
    *DomainResource;

    RESOURCE_NAME_TESTSCRIPT resourceType = RESOURCE_NAME_TESTSCRIPT;

    BaseTestScriptMeta meta = {
        profile : [PROFILE_BASE_TESTSCRIPT]
    };
    dateTime date?;
    markdown copyright?;
    Extension[] extension?;
    TestScriptMetadata metadata?;
    markdown purpose?;
    CodeableConcept[] jurisdiction?;
    Extension[] modifierExtension?;
    TestScriptOrigin[] origin?;
    TestScriptOrigin[] destination?;
    markdown description?;
    boolean experimental?;
    code language?;
    string title?;
    ContactDetail[] contact?;
    string id?;
    Narrative text?;
    TestScriptTeardown teardown?;
    Identifier identifier?;
    TestScriptTest[] test?;
    Reference[] profile?;
    string 'version?;
    uri url;
    TestScriptFixture[] fixture?;
    Resource[] contained?;
    string name;
    TestScriptVariable[] variable?;
    uri implicitRules?;
    string publisher?;
    TestScriptTeardown setup?;
    UsageContext[] useContext?;
    TestScriptStatus status;
|};

@DataTypeDefinition {
    name: "BaseTestScriptMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseTestScriptMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/TestScript"];
    Coding[] security?;
    Coding[] tag?;
|};

# FHIR TestScriptSetupActionOperationRequestHeader datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + 'field - The HTTP header field e.g. 'Accept'.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + value - The value of the header e.g. 'application/fhir+xml'.
@DataTypeDefinition {
    name: "TestScriptSetupActionOperationRequestHeader",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.setup.action.operation.requestHeader.extension"
        },
        "field": {
            name: "field",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The HTTP header field e.g. 'Accept'.",
            path: "TestScript.setup.action.operation.requestHeader.field"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.setup.action.operation.requestHeader.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.setup.action.operation.requestHeader.id"
        },
        "value": {
            name: "value",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the header e.g. 'application/fhir+xml'.",
            path: "TestScript.setup.action.operation.requestHeader.value"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptSetupActionOperationRequestHeader record {|
    Extension[] extension?;
    string 'field;
    Extension[] modifierExtension?;
    string id?;
    string value;
|};

# FHIR TestScriptTest datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The name of this test used for tracking/logging purposes by test engines.
# + action - Action would contain either an operation or an assertion.
# + description - A short description of the test used by test engines for tracking and reporting purposes.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "TestScriptTest",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.test.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.test.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name of this test used for tracking/logging purposes by test engines.",
            path: "TestScript.test.name"
        },
        "action": {
            name: "action",
            dataType: TestScriptTeardownAction,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Action would contain either an operation or an assertion.",
            path: "TestScript.test.action"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A short description of the test used by test engines for tracking and reporting purposes.",
            path: "TestScript.test.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.test.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptTest record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    string name?;
    @constraint:Array {
       minLength: 1
    }
    TestScriptTeardownAction[] action;
    string description?;
    string id?;
|};

# FHIR TestScriptFixture datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + 'resource - Reference to the resource (containing the contents of the resource needed for operations).
# + autocreate - Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
# + autodelete - Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "TestScriptFixture",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.fixture.extension"
        },
        "resource": {
            name: "resource",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Reference to the resource (containing the contents of the resource needed for operations).",
            path: "TestScript.fixture.resource"
        },
        "autocreate": {
            name: "autocreate",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.",
            path: "TestScript.fixture.autocreate"
        },
        "autodelete": {
            name: "autodelete",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.",
            path: "TestScript.fixture.autodelete"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.fixture.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.fixture.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptFixture record {|
    Extension[] extension?;
    Reference 'resource?;
    boolean autocreate;
    boolean autodelete;
    Extension[] modifierExtension?;
    string id?;
|};

# TestScriptSetupActionAssertResponse enum
public enum TestScriptSetupActionAssertResponse {
   CODE_RESPONSE_OKAY = "okay",
   CODE_RESPONSE_NOCONTENT = "noContent",
   CODE_RESPONSE_BAD = "bad",
   CODE_RESPONSE_NOTMODIFIED = "notModified",
   CODE_RESPONSE_CREATED = "created",
   CODE_RESPONSE_FORBIDDEN = "forbidden",
   CODE_RESPONSE_METHODNOTALLOWED = "methodNotAllowed",
   CODE_RESPONSE_NOTFOUND = "notFound",
   CODE_RESPONSE_PRECONDITIONFAILED = "preconditionFailed",
   CODE_RESPONSE_UNPROCESSABLE = "unprocessable",
   CODE_RESPONSE_CONFLICT = "conflict",
   CODE_RESPONSE_GONE = "gone"
}

# TestScriptStatus enum
public enum TestScriptStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# TestScriptSetupActionAssertRequestMethod enum
public enum TestScriptSetupActionAssertRequestMethod {
   CODE_REQUESTMETHOD_PATCH = "patch",
   CODE_REQUESTMETHOD_HEAD = "head",
   CODE_REQUESTMETHOD_POST = "post",
   CODE_REQUESTMETHOD_GET = "get",
   CODE_REQUESTMETHOD_OPTIONS = "options",
   CODE_REQUESTMETHOD_DELETE = "delete",
   CODE_REQUESTMETHOD_PUT = "put"
}

# FHIR TestScriptTeardown datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + action - The teardown action will only contain an operation.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "TestScriptTeardown",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.teardown.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.teardown.modifierExtension"
        },
        "action": {
            name: "action",
            dataType: TestScriptTeardownAction,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The teardown action will only contain an operation.",
            path: "TestScript.teardown.action"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.teardown.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptTeardown record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    @constraint:Array {
       minLength: 1
    }
    TestScriptTeardownAction[] action;
    string id?;
|};

# FHIR TestScriptTeardownAction datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "TestScriptTeardownAction",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.teardown.action.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.teardown.action.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.teardown.action.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptTeardownAction record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    string id?;
|};

# FHIR TestScriptVariable datatype record.
#
# + sourceId - Fixture to evaluate the XPath/JSONPath expression or the headerField against within this variable.
# + path - XPath or JSONPath to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + headerField - Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
# + expression - The FHIRPath expression to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
# + defaultValue - A default, hard-coded, or user-defined value for this variable.
# + hint - Displayable text string with hint help information to the user when entering a default value.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Descriptive name for this variable.
# + description - A free text natural language description of the variable and its purpose.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "TestScriptVariable",
    baseType: (),
    elements: {
        "sourceId": {
            name: "sourceId",
            dataType: id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Fixture to evaluate the XPath/JSONPath expression or the headerField against within this variable.",
            path: "TestScript.variable.sourceId"
        },
        "path": {
            name: "path",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "XPath or JSONPath to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.",
            path: "TestScript.variable.path"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.variable.extension"
        },
        "headerField": {
            name: "headerField",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.",
            path: "TestScript.variable.headerField"
        },
        "expression": {
            name: "expression",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The FHIRPath expression to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.",
            path: "TestScript.variable.expression"
        },
        "defaultValue": {
            name: "defaultValue",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A default, hard-coded, or user-defined value for this variable.",
            path: "TestScript.variable.defaultValue"
        },
        "hint": {
            name: "hint",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Displayable text string with hint help information to the user when entering a default value.",
            path: "TestScript.variable.hint"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.variable.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Descriptive name for this variable.",
            path: "TestScript.variable.name"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A free text natural language description of the variable and its purpose.",
            path: "TestScript.variable.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.variable.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptVariable record {|
    id sourceId?;
    string path?;
    Extension[] extension?;
    string headerField?;
    string expression?;
    string defaultValue?;
    string hint?;
    Extension[] modifierExtension?;
    string name;
    string description?;
    string id?;
|};

# TestScriptSetupActionAssertOperator enum
public enum TestScriptSetupActionAssertOperator {
   CODE_OPERATOR_CONTAINS = "contains",
   CODE_OPERATOR_EVAL = "eval",
   CODE_OPERATOR_IN = "in",
   CODE_OPERATOR_NOTCONTAINS = "notContains",
   CODE_OPERATOR_EQUALS = "equals",
   CODE_OPERATOR_LESSTHAN = "lessThan",
   CODE_OPERATOR_NOTEQUALS = "notEquals",
   CODE_OPERATOR_NOTIN = "notIn",
   CODE_OPERATOR_NOTEMPTY = "notEmpty",
   CODE_OPERATOR_GREATERTHAN = "greaterThan",
   CODE_OPERATOR_EMPTY = "empty"
}

# FHIR TestScriptSetupActionAssert datatype record.
#
# + sourceId - Fixture to evaluate the XPath/JSONPath expression or the headerField against.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + headerField - The HTTP header field name e.g. 'Location'.
# + minimumId - The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + requestMethod - The request method or HTTP operation code to compare against that used by the client system under test.
# + description - The description would be used by test engines for tracking and reporting purposes.
# + operator - The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
# + responseCode - The value of the HTTP response code to be tested.
# + path - The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
# + requestURL - The value to use in a comparison against the request URL path string.
# + validateProfileId - The ID of the Profile to validate against.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + contentType - The mime-type contents to compare against the request or response message 'Content-Type' header.
# + value - The value to compare to.
# + direction - The direction to use for the assertion.
# + compareToSourceId - Id of the source fixture used as the contents to be evaluated by either the 'source/expression' or 'sourceId/path' definition.
# + expression - The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.
# + 'resource - The type of the resource. See http://build.fhir.org/resourcelist.html.
# + compareToSourcePath - XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
# + label - The label would be used for tracking/logging purposes by test engines.
# + compareToSourceExpression - The FHIRPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
# + navigationLinks - Whether or not the test execution performs validation on the bundle navigation links.
# + response - okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
# + warningOnly - Whether or not the test execution will produce a warning only on error for this assert.
@DataTypeDefinition {
    name: "TestScriptSetupActionAssert",
    baseType: (),
    elements: {
        "sourceId": {
            name: "sourceId",
            dataType: id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Fixture to evaluate the XPath/JSONPath expression or the headerField against.",
            path: "TestScript.setup.action.assert.sourceId"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.setup.action.assert.extension"
        },
        "headerField": {
            name: "headerField",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The HTTP header field name e.g. 'Location'.",
            path: "TestScript.setup.action.assert.headerField"
        },
        "minimumId": {
            name: "minimumId",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId.",
            path: "TestScript.setup.action.assert.minimumId"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.setup.action.assert.modifierExtension"
        },
        "requestMethod": {
            name: "requestMethod",
            dataType: TestScriptSetupActionAssertRequestMethod,
            min: 0,
            max: 1,
            isArray: false,
            description: "The request method or HTTP operation code to compare against that used by the client system under test.",
            path: "TestScript.setup.action.assert.requestMethod"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The description would be used by test engines for tracking and reporting purposes.",
            path: "TestScript.setup.action.assert.description"
        },
        "operator": {
            name: "operator",
            dataType: TestScriptSetupActionAssertOperator,
            min: 0,
            max: 1,
            isArray: false,
            description: "The operator type defines the conditional behavior of the assert. If not defined, the default is equals.",
            path: "TestScript.setup.action.assert.operator"
        },
        "responseCode": {
            name: "responseCode",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the HTTP response code to be tested.",
            path: "TestScript.setup.action.assert.responseCode"
        },
        "path": {
            name: "path",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.",
            path: "TestScript.setup.action.assert.path"
        },
        "requestURL": {
            name: "requestURL",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value to use in a comparison against the request URL path string.",
            path: "TestScript.setup.action.assert.requestURL"
        },
        "validateProfileId": {
            name: "validateProfileId",
            dataType: id,
            min: 0,
            max: 1,
            isArray: false,
            description: "The ID of the Profile to validate against.",
            path: "TestScript.setup.action.assert.validateProfileId"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.setup.action.assert.id"
        },
        "contentType": {
            name: "contentType",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            description: "The mime-type contents to compare against the request or response message 'Content-Type' header.",
            path: "TestScript.setup.action.assert.contentType"
        },
        "value": {
            name: "value",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value to compare to.",
            path: "TestScript.setup.action.assert.value"
        },
        "direction": {
            name: "direction",
            dataType: TestScriptSetupActionAssertDirection,
            min: 0,
            max: 1,
            isArray: false,
            description: "The direction to use for the assertion.",
            path: "TestScript.setup.action.assert.direction"
        },
        "compareToSourceId": {
            name: "compareToSourceId",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Id of the source fixture used as the contents to be evaluated by either the 'source/expression' or 'sourceId/path' definition.",
            path: "TestScript.setup.action.assert.compareToSourceId"
        },
        "expression": {
            name: "expression",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.",
            path: "TestScript.setup.action.assert.expression"
        },
        "resource": {
            name: "resource",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of the resource. See http://build.fhir.org/resourcelist.html.",
            path: "TestScript.setup.action.assert.resource"
        },
        "compareToSourcePath": {
            name: "compareToSourcePath",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.",
            path: "TestScript.setup.action.assert.compareToSourcePath"
        },
        "label": {
            name: "label",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The label would be used for tracking/logging purposes by test engines.",
            path: "TestScript.setup.action.assert.label"
        },
        "compareToSourceExpression": {
            name: "compareToSourceExpression",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The FHIRPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.",
            path: "TestScript.setup.action.assert.compareToSourceExpression"
        },
        "navigationLinks": {
            name: "navigationLinks",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether or not the test execution performs validation on the bundle navigation links.",
            path: "TestScript.setup.action.assert.navigationLinks"
        },
        "response": {
            name: "response",
            dataType: TestScriptSetupActionAssertResponse,
            min: 0,
            max: 1,
            isArray: false,
            description: "okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.",
            path: "TestScript.setup.action.assert.response"
        },
        "warningOnly": {
            name: "warningOnly",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Whether or not the test execution will produce a warning only on error for this assert.",
            path: "TestScript.setup.action.assert.warningOnly"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptSetupActionAssert record {|
    id sourceId?;
    Extension[] extension?;
    string headerField?;
    string minimumId?;
    Extension[] modifierExtension?;
    TestScriptSetupActionAssertRequestMethod requestMethod?;
    string description?;
    TestScriptSetupActionAssertOperator operator?;
    string responseCode?;
    string path?;
    string requestURL?;
    id validateProfileId?;
    string id?;
    code contentType?;
    string value?;
    TestScriptSetupActionAssertDirection direction?;
    string compareToSourceId?;
    string expression?;
    code 'resource?;
    string compareToSourcePath?;
    string label?;
    string compareToSourceExpression?;
    boolean navigationLinks?;
    TestScriptSetupActionAssertResponse response?;
    boolean warningOnly;
|};

# FHIR TestScriptMetadataLink datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Short description of the link.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + url - URL to a particular requirement or feature within the FHIR specification.
@DataTypeDefinition {
    name: "TestScriptMetadataLink",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.metadata.link.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.metadata.link.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Short description of the link.",
            path: "TestScript.metadata.link.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.metadata.link.id"
        },
        "url": {
            name: "url",
            dataType: uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "URL to a particular requirement or feature within the FHIR specification.",
            path: "TestScript.metadata.link.url"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptMetadataLink record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    string description?;
    string id?;
    uri url;
|};

# FHIR TestScriptMetadata datatype record.
#
# + capability - Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + link - A link to the FHIR specification that this test is covering.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "TestScriptMetadata",
    baseType: (),
    elements: {
        "capability": {
            name: "capability",
            dataType: TestScriptMetadataCapability,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
            path: "TestScript.metadata.capability"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.metadata.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.metadata.modifierExtension"
        },
        "link": {
            name: "link",
            dataType: TestScriptMetadataLink,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A link to the FHIR specification that this test is covering.",
            path: "TestScript.metadata.link"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.metadata.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptMetadata record {|
    @constraint:Array {
       minLength: 1
    }
    TestScriptMetadataCapability[] capability;
    Extension[] extension?;
    Extension[] modifierExtension?;
    TestScriptMetadataLink[] link?;
    string id?;
|};

# FHIR TestScriptSetupAction datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + assert - Evaluates the results of previous operations to determine if the server under test behaves appropriately.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + operation - The operation to perform.
@DataTypeDefinition {
    name: "TestScriptSetupAction",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.setup.action.extension"
        },
        "assert": {
            name: "assert",
            dataType: TestScriptSetupActionAssert,
            min: 0,
            max: 1,
            isArray: false,
            description: "Evaluates the results of previous operations to determine if the server under test behaves appropriately.",
            path: "TestScript.setup.action.assert"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.setup.action.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.setup.action.id"
        },
        "operation": {
            name: "operation",
            dataType: TestScriptSetupActionOperation,
            min: 0,
            max: 1,
            isArray: false,
            description: "The operation to perform.",
            path: "TestScript.setup.action.operation"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptSetupAction record {|
    Extension[] extension?;
    TestScriptSetupActionAssert assert?;
    Extension[] modifierExtension?;
    string id?;
    TestScriptSetupActionOperation operation?;
|};

# TestScriptSetupActionAssertDirection enum
public enum TestScriptSetupActionAssertDirection {
   CODE_DIRECTION_REQUEST = "request",
   CODE_DIRECTION_RESPONSE = "response"
}

# FHIR TestScriptMetadataCapability datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + capabilities - Minimum capabilities required of server for test script to execute successfully. If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.
# + validated - Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + origin - Which origin server these requirements apply to.
# + destination - Which server these requirements apply to.
# + link - Links to the FHIR specification that describes this interaction and the resources involved in more detail.
# + description - Description of the capabilities that this test script is requiring the server to support.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + required - Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
@DataTypeDefinition {
    name: "TestScriptMetadataCapability",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.metadata.capability.extension"
        },
        "capabilities": {
            name: "capabilities",
            dataType: canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "Minimum capabilities required of server for test script to execute successfully. If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.",
            path: "TestScript.metadata.capability.capabilities"
        },
        "validated": {
            name: "validated",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.",
            path: "TestScript.metadata.capability.validated"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.metadata.capability.modifierExtension"
        },
        "origin": {
            name: "origin",
            dataType: integer,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Which origin server these requirements apply to.",
            path: "TestScript.metadata.capability.origin"
        },
        "destination": {
            name: "destination",
            dataType: integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "Which server these requirements apply to.",
            path: "TestScript.metadata.capability.destination"
        },
        "link": {
            name: "link",
            dataType: uri,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Links to the FHIR specification that describes this interaction and the resources involved in more detail.",
            path: "TestScript.metadata.capability.link"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Description of the capabilities that this test script is requiring the server to support.",
            path: "TestScript.metadata.capability.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.metadata.capability.id"
        },
        "required": {
            name: "required",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.",
            path: "TestScript.metadata.capability.required"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptMetadataCapability record {|
    Extension[] extension?;
    canonical capabilities;
    boolean validated;
    Extension[] modifierExtension?;
    integer[] origin?;
    integer destination?;
    uri[] link?;
    string description?;
    string id?;
    boolean required;
|};

# FHIR TestScriptOrigin datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + profile - The type of origin profile the test system supports.
# + index - Abstract name given to an origin server in this test script. The name is provided as a number starting at 1.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "TestScriptOrigin",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.origin.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.origin.modifierExtension"
        },
        "profile": {
            name: "profile",
            dataType: Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of origin profile the test system supports.",
            path: "TestScript.origin.profile"
        },
        "index": {
            name: "index",
            dataType: integer,
            min: 1,
            max: 1,
            isArray: false,
            description: "Abstract name given to an origin server in this test script. The name is provided as a number starting at 1.",
            path: "TestScript.origin.index"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.origin.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptOrigin record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    Coding profile;
    integer index;
    string id?;
|};

# FHIR TestScriptSetupActionOperation datatype record.
#
# + sourceId - The id of the fixture used as the body of a PUT or POST request.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + method - The HTTP method the test engine MUST use for this operation regardless of any other operation details.
# + targetId - Id of fixture used for extracting the [id], [type], and [vid] for GET requests.
# + 'resource - The type of the resource. See http://build.fhir.org/resourcelist.html.
# + encodeRequestUrl - Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + origin - The server where the request message originates from. Must be one of the server numbers listed in TestScript.origin section.
# + destination - The server where the request message is destined for. Must be one of the server numbers listed in TestScript.destination section.
# + description - The description would be used by test engines for tracking and reporting purposes.
# + label - The label would be used for tracking/logging purposes by test engines.
# + params - Path plus parameters after [type]. Used to set parts of the request URL explicitly.
# + 'type - Server interaction or operation type.
# + url - Complete request URL.
# + accept - The mime-type to use for RESTful operation in the 'Accept' header.
# + requestId - The fixture id (maybe new) to map to the request.
# + requestHeader - Header elements would be used to set HTTP headers.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + contentType - The mime-type to use for RESTful operation in the 'Content-Type' header.
# + responseId - The fixture id (maybe new) to map to the response.
@DataTypeDefinition {
    name: "TestScriptSetupActionOperation",
    baseType: (),
    elements: {
        "sourceId": {
            name: "sourceId",
            dataType: id,
            min: 0,
            max: 1,
            isArray: false,
            description: "The id of the fixture used as the body of a PUT or POST request.",
            path: "TestScript.setup.action.operation.sourceId"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TestScript.setup.action.operation.extension"
        },
        "method": {
            name: "method",
            dataType: TestScriptSetupActionAssertRequestMethod,
            min: 0,
            max: 1,
            isArray: false,
            description: "The HTTP method the test engine MUST use for this operation regardless of any other operation details.",
            path: "TestScript.setup.action.operation.method"
        },
        "targetId": {
            name: "targetId",
            dataType: id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Id of fixture used for extracting the [id], [type], and [vid] for GET requests.",
            path: "TestScript.setup.action.operation.targetId"
        },
        "resource": {
            name: "resource",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of the resource. See http://build.fhir.org/resourcelist.html.",
            path: "TestScript.setup.action.operation.resource"
        },
        "encodeRequestUrl": {
            name: "encodeRequestUrl",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.",
            path: "TestScript.setup.action.operation.encodeRequestUrl"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TestScript.setup.action.operation.modifierExtension"
        },
        "origin": {
            name: "origin",
            dataType: integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The server where the request message originates from. Must be one of the server numbers listed in TestScript.origin section.",
            path: "TestScript.setup.action.operation.origin"
        },
        "destination": {
            name: "destination",
            dataType: integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The server where the request message is destined for. Must be one of the server numbers listed in TestScript.destination section.",
            path: "TestScript.setup.action.operation.destination"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The description would be used by test engines for tracking and reporting purposes.",
            path: "TestScript.setup.action.operation.description"
        },
        "label": {
            name: "label",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The label would be used for tracking/logging purposes by test engines.",
            path: "TestScript.setup.action.operation.label"
        },
        "params": {
            name: "params",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Path plus parameters after [type]. Used to set parts of the request URL explicitly.",
            path: "TestScript.setup.action.operation.params"
        },
        "type": {
            name: "type",
            dataType: Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "Server interaction or operation type.",
            path: "TestScript.setup.action.operation.type"
        },
        "url": {
            name: "url",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Complete request URL.",
            path: "TestScript.setup.action.operation.url"
        },
        "accept": {
            name: "accept",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            description: "The mime-type to use for RESTful operation in the 'Accept' header.",
            path: "TestScript.setup.action.operation.accept"
        },
        "requestId": {
            name: "requestId",
            dataType: id,
            min: 0,
            max: 1,
            isArray: false,
            description: "The fixture id (maybe new) to map to the request.",
            path: "TestScript.setup.action.operation.requestId"
        },
        "requestHeader": {
            name: "requestHeader",
            dataType: TestScriptSetupActionOperationRequestHeader,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Header elements would be used to set HTTP headers.",
            path: "TestScript.setup.action.operation.requestHeader"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TestScript.setup.action.operation.id"
        },
        "contentType": {
            name: "contentType",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            description: "The mime-type to use for RESTful operation in the 'Content-Type' header.",
            path: "TestScript.setup.action.operation.contentType"
        },
        "responseId": {
            name: "responseId",
            dataType: id,
            min: 0,
            max: 1,
            isArray: false,
            description: "The fixture id (maybe new) to map to the response.",
            path: "TestScript.setup.action.operation.responseId"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type TestScriptSetupActionOperation record {|
    id sourceId?;
    Extension[] extension?;
    TestScriptSetupActionAssertRequestMethod method?;
    id targetId?;
    code 'resource?;
    boolean encodeRequestUrl;
    Extension[] modifierExtension?;
    integer origin?;
    integer destination?;
    string description?;
    string label?;
    string params?;
    Coding 'type?;
    string url?;
    code accept?;
    id requestId?;
    TestScriptSetupActionOperationRequestHeader[] requestHeader?;
    string id?;
    code contentType?;
    id responseId?;
|};

