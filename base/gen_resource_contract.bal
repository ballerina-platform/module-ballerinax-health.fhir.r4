// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;

public const string PROFILE_BASE_CONTRACT = "http://hl7.org/fhir/StructureDefinition/Contract";
public const RESOURCE_NAME_CONTRACT = "Contract";

# FHIR Contract resource record.
#
# + resourceType - The type of the resource describes
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + friendly - The 'patient friendly language' versionof the Contract in whole or in parts. 'Patient friendly language' means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.
# + subject - The target entity impacted by or of interest to parties to the agreement.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + rule - List of Computable Policy Rule Language Representations of this Contract.
# + language - The base language in which the resource is written.
# + title - A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
# + 'type - A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state. Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.
# + instantiatesUri - The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.
# + relevantHistory - Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract. The Provence.entity indicates the target that was changed in the update. http://build.fhir.org/provenance-definitions.html#Provenance.entity.
# + supportingInfo - Information that may be needed by/relevant to the performer in their execution of this term action.
# + topicReference - Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
# + contentDefinition - Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.
# + scope - A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.
# + legal - List of Legal expressions or representations of this Contract.
# + alias - Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.
# + term - One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + issued - When this Contract was issued.
# + contentDerivative - The minimal content derived from the basal information source at a specific stage in its lifecycle.
# + signer - Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.
# + identifier - Unique identifier for this Contract or a derivative that references a Source Contract.
# + expirationType - Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.
# + legallyBindingAttachment - Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the 'source of truth' and which would be the basis for legal action related to enforcement of this Contract.
# + author - The individual or organization that authored the Contract definition, derivative, or instance in any legal state.
# + topicCodeableConcept - Narrows the range of legal concerns to focus on the achievement of specific contractual objectives.
# + instantiatesCanonical - The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.
# + 'version - An edition identifier used for business purposes to label business significant variants.
# + url - Canonical identifier for this contract, represented as a URI (globally unique).
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + site - Sites in which the contract is complied with, exercised, or in force.
# + applies - Relevant time or time-period when this Contract is applicable.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + authority - A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.
# + domain - Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.
# + subtitle - An explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state.t giving additional information about its content.
# + name - A natural language name identifying this Contract definition, derivative, or instance in any legal state. Provides additional information about its content. This name should be usable as an identifier for the module by machine processing applications such as code generation.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + subType - Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.
# + legalState - Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.
# + legallyBindingReference - Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the 'source of truth' and which would be the basis for legal action related to enforcement of this Contract.
# + status - The status of the resource instance.
@ResourceDefinition {
    resourceType: "Contract",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/Contract",
    elements: {
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.extension"
        },
        "friendly" : {
            name: "friendly",
            dataType: ContractFriendly,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.friendly"
        },
        "subject" : {
            name: "subject",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.subject"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.modifierExtension"
        },
        "rule" : {
            name: "rule",
            dataType: ContractFriendly,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.rule"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.title"
        },
        "type" : {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.type",
            valueSet: "http://hl7.org/fhir/ValueSet/contract-type"
        },
        "instantiatesUri" : {
            name: "instantiatesUri",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.instantiatesUri"
        },
        "relevantHistory" : {
            name: "relevantHistory",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.relevantHistory"
        },
        "supportingInfo" : {
            name: "supportingInfo",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.supportingInfo"
        },
        "topicReference" : {
            name: "topicReference",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.topic[x]"
        },
        "contentDefinition" : {
            name: "contentDefinition",
            dataType: ContractContentDefinition,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.contentDefinition"
        },
        "scope" : {
            name: "scope",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.scope",
            valueSet: "http://hl7.org/fhir/ValueSet/contract-scope"
        },
        "legal" : {
            name: "legal",
            dataType: ContractFriendly,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.legal"
        },
        "alias" : {
            name: "alias",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.alias"
        },
        "term" : {
            name: "term",
            dataType: ContractTerm,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.term"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.text"
        },
        "issued" : {
            name: "issued",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.issued"
        },
        "contentDerivative" : {
            name: "contentDerivative",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.contentDerivative",
            valueSet: "http://hl7.org/fhir/ValueSet/contract-content-derivative"
        },
        "signer" : {
            name: "signer",
            dataType: ContractSigner,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.signer"
        },
        "identifier" : {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.identifier"
        },
        "expirationType" : {
            name: "expirationType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.expirationType",
            valueSet: "http://hl7.org/fhir/ValueSet/contract-expiration-type"
        },
        "legallyBindingAttachment" : {
            name: "legallyBindingAttachment",
            dataType: Attachment,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.legallyBinding[x]"
        },
        "author" : {
            name: "author",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.author"
        },
        "topicCodeableConcept" : {
            name: "topicCodeableConcept",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.topic[x]"
        },
        "instantiatesCanonical" : {
            name: "instantiatesCanonical",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.instantiatesCanonical"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.version"
        },
        "url" : {
            name: "url",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.url"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.contained"
        },
        "site" : {
            name: "site",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.site"
        },
        "applies" : {
            name: "applies",
            dataType: Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.applies"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.meta"
        },
        "authority" : {
            name: "authority",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.authority"
        },
        "domain" : {
            name: "domain",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.domain"
        },
        "subtitle" : {
            name: "subtitle",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.subtitle"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.implicitRules"
        },
        "subType" : {
            name: "subType",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Contract.subType",
            valueSet: "http://hl7.org/fhir/ValueSet/contract-subtype"
        },
        "legalState" : {
            name: "legalState",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.legalState",
            valueSet: "http://hl7.org/fhir/ValueSet/contract-legalstate"
        },
        "legallyBindingReference" : {
            name: "legallyBindingReference",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.legallyBinding[x]"
        },
        "status" : {
            name: "status",
            dataType: ContractContentDefinitionPublicationStatus,
            min: 0,
            max: 1,
            isArray: false,
            path: "Contract.status",
            valueSet: "http://hl7.org/fhir/ValueSet/contract-status|4.0.1"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type Contract record {|
    *DomainResource;

    RESOURCE_NAME_CONTRACT resourceType = RESOURCE_NAME_CONTRACT;

    BaseContractMeta meta = {
        profile : [PROFILE_BASE_CONTRACT]
    };
    Extension[] extension?;
    ContractFriendly[] friendly?;
    Reference[] subject?;
    Extension[] modifierExtension?;
    ContractFriendly[] rule?;
    code language?;
    string title?;
    CodeableConcept 'type?;
    uri instantiatesUri?;
    Reference[] relevantHistory?;
    Reference[] supportingInfo?;
    Reference topicReference?;
    ContractContentDefinition contentDefinition?;
    CodeableConcept scope?;
    ContractFriendly[] legal?;
    string[] alias?;
    ContractTerm[] term?;
    string id?;
    Narrative text?;
    dateTime issued?;
    CodeableConcept contentDerivative?;
    ContractSigner[] signer?;
    Identifier[] identifier?;
    CodeableConcept expirationType?;
    Attachment legallyBindingAttachment?;
    Reference author?;
    CodeableConcept topicCodeableConcept?;
    Reference instantiatesCanonical?;
    string 'version?;
    uri url?;
    Resource[] contained?;
    Reference[] site?;
    Period applies?;
    Reference[] authority?;
    Reference[] domain?;
    string subtitle?;
    string name?;
    uri implicitRules?;
    CodeableConcept[] subType?;
    CodeableConcept legalState?;
    Reference legallyBindingReference?;
    ContractContentDefinitionPublicationStatus status?;
|};

@DataTypeDefinition {
    name: "BaseContractMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseContractMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/Contract"];
    Coding[] security?;
    Coding[] tag?;
|};

# FHIR ContractTermAsset datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - Asset relevant contractual time period.
# + usePeriod - Time period of asset use.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + securityLabelNumber - Security labels that protects the asset.
# + 'type - Target entity type about which the term may be concerned.
# + condition - Description of the quality and completeness of the asset that imay be a factor in its valuation.
# + linkId - Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
# + periodType - Type of Asset availability for use or ownership.
# + subtype - May be a subtype or part of an offered asset.
# + scope - Differentiates the kind of the asset .
# + context - Circumstance of the asset.
# + typeReference - Associated entities.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
# + valuedItem - Contract Valued Item List.
# + relationship - Specifies the applicability of the term to an asset resource instance, and instances it refers to orinstances that refer to it, and/or are owned by the offeree.
@DataTypeDefinition {
    name: "ContractTermAsset",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.term.asset.extension"
        },
        "period": {
            name: "period",
            dataType: Period,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Asset relevant contractual time period.",
            path: "Contract.term.asset.period"
        },
        "usePeriod": {
            name: "usePeriod",
            dataType: Period,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Time period of asset use.",
            path: "Contract.term.asset.usePeriod"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.term.asset.modifierExtension"
        },
        "securityLabelNumber": {
            name: "securityLabelNumber",
            dataType: unsignedInt,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security labels that protects the asset.",
            path: "Contract.term.asset.securityLabelNumber"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Target entity type about which the term may be concerned.",
            path: "Contract.term.asset.type"
        },
        "condition": {
            name: "condition",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Description of the quality and completeness of the asset that imay be a factor in its valuation.",
            path: "Contract.term.asset.condition"
        },
        "linkId": {
            name: "linkId",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.",
            path: "Contract.term.asset.linkId"
        },
        "periodType": {
            name: "periodType",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Type of Asset availability for use or ownership.",
            path: "Contract.term.asset.periodType"
        },
        "subtype": {
            name: "subtype",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be a subtype or part of an offered asset.",
            path: "Contract.term.asset.subtype"
        },
        "scope": {
            name: "scope",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Differentiates the kind of the asset .",
            path: "Contract.term.asset.scope"
        },
        "context": {
            name: "context",
            dataType: ContractTermAssetContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Circumstance of the asset.",
            path: "Contract.term.asset.context"
        },
        "typeReference": {
            name: "typeReference",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Associated entities.",
            path: "Contract.term.asset.typeReference"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.term.asset.id"
        },
        "text": {
            name: "text",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.",
            path: "Contract.term.asset.text"
        },
        "valuedItem": {
            name: "valuedItem",
            dataType: ContractTermAssetValuedItem,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Contract Valued Item List.",
            path: "Contract.term.asset.valuedItem"
        },
        "relationship": {
            name: "relationship",
            dataType: Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the applicability of the term to an asset resource instance, and instances it refers to orinstances that refer to it, and/or are owned by the offeree.",
            path: "Contract.term.asset.relationship"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractTermAsset record {|
    Extension[] extension?;
    Period[] period?;
    Period[] usePeriod?;
    Extension[] modifierExtension?;
    unsignedInt[] securityLabelNumber?;
    CodeableConcept[] 'type?;
    string condition?;
    string[] linkId?;
    CodeableConcept[] periodType?;
    CodeableConcept[] subtype?;
    CodeableConcept scope?;
    ContractTermAssetContext[] context?;
    Reference[] typeReference?;
    string id?;
    string text?;
    ContractTermAssetValuedItem[] valuedItem?;
    Coding relationship?;
|};

# FHIR ContractTermAssetContext datatype record.
#
# + reference - Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository), location held, e.g., building, jurisdiction.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - Context description.
@DataTypeDefinition {
    name: "ContractTermAssetContext",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository), location held, e.g., building, jurisdiction.",
            path: "Contract.term.asset.context.reference"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.term.asset.context.extension"
        },
        "code": {
            name: "code",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.",
            path: "Contract.term.asset.context.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.term.asset.context.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.term.asset.context.id"
        },
        "text": {
            name: "text",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Context description.",
            path: "Contract.term.asset.context.text"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractTermAssetContext record {|
    Reference reference?;
    Extension[] extension?;
    CodeableConcept[] code?;
    Extension[] modifierExtension?;
    string id?;
    string text?;
|};

# FHIR ContractTermOffer datatype record.
#
# + identifier - Unique identifier for this particular Contract Provision.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + decision - Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + securityLabelNumber - Security labels that protects the offer.
# + 'type - Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.
# + linkId - The id of the clause or question text of the offer in the referenced questionnaire/response.
# + answer - Response to offer text.
# + decisionMode - How the decision about a Contract was conveyed.
# + topic - The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - Human readable form of this Contract Offer.
# + party - Offer Recipient.
@DataTypeDefinition {
    name: "ContractTermOffer",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Unique identifier for this particular Contract Provision.",
            path: "Contract.term.offer.identifier"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.term.offer.extension"
        },
        "decision": {
            name: "decision",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.",
            path: "Contract.term.offer.decision"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.term.offer.modifierExtension"
        },
        "securityLabelNumber": {
            name: "securityLabelNumber",
            dataType: unsignedInt,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security labels that protects the offer.",
            path: "Contract.term.offer.securityLabelNumber"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.",
            path: "Contract.term.offer.type"
        },
        "linkId": {
            name: "linkId",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The id of the clause or question text of the offer in the referenced questionnaire/response.",
            path: "Contract.term.offer.linkId"
        },
        "answer": {
            name: "answer",
            dataType: ContractTermOfferAnswer,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Response to offer text.",
            path: "Contract.term.offer.answer"
        },
        "decisionMode": {
            name: "decisionMode",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "How the decision about a Contract was conveyed.",
            path: "Contract.term.offer.decisionMode"
        },
        "topic": {
            name: "topic",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30).",
            path: "Contract.term.offer.topic"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.term.offer.id"
        },
        "text": {
            name: "text",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Human readable form of this Contract Offer.",
            path: "Contract.term.offer.text"
        },
        "party": {
            name: "party",
            dataType: ContractTermOfferParty,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Offer Recipient.",
            path: "Contract.term.offer.party"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractTermOffer record {|
    Identifier[] identifier?;
    Extension[] extension?;
    CodeableConcept decision?;
    Extension[] modifierExtension?;
    unsignedInt[] securityLabelNumber?;
    CodeableConcept 'type?;
    string[] linkId?;
    ContractTermOfferAnswer[] answer?;
    CodeableConcept[] decisionMode?;
    Reference topic?;
    string id?;
    string text?;
    ContractTermOfferParty[] party?;
|};

# FHIR ContractSigner datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + signature - Legally binding Contract DSIG signature contents in Base64.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Role of this Contract signer, e.g. notary, grantee.
# + party - Party which is a signator to this Contract.
@DataTypeDefinition {
    name: "ContractSigner",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.signer.extension"
        },
        "signature": {
            name: "signature",
            dataType: Signature,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Legally binding Contract DSIG signature contents in Base64.",
            path: "Contract.signer.signature"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.signer.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.signer.id"
        },
        "type": {
            name: "type",
            dataType: Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "Role of this Contract signer, e.g. notary, grantee.",
            path: "Contract.signer.type"
        },
        "party": {
            name: "party",
            dataType: Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Party which is a signator to this Contract.",
            path: "Contract.signer.party"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractSigner record {|
    Extension[] extension?;
    @constraint:Array {
       minLength: 1
    }
    Signature[] signature;
    Extension[] modifierExtension?;
    string id?;
    Coding 'type;
    Reference party;
|};

# FHIR ContractTermOfferAnswer datatype record.
#
# + valueBoolean - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + valueCoding - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueTime - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + valueReference - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + valueDecimal - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + valueUri - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + valueDate - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + valueAttachment - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + valueString - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + valueDateTime - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
# + valueQuantity - Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.
@DataTypeDefinition {
    name: "ContractTermOfferAnswer",
    baseType: (),
    elements: {
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "valueCoding": {
            name: "valueCoding",
            dataType: Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.term.offer.answer.extension"
        },
        "valueTime": {
            name: "valueTime",
            dataType: time,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "valueReference": {
            name: "valueReference",
            dataType: Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.term.offer.answer.modifierExtension"
        },
        "valueDecimal": {
            name: "valueDecimal",
            dataType: decimal,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "valueUri": {
            name: "valueUri",
            dataType: uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "valueDate": {
            name: "valueDate",
            dataType: date,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: Attachment,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "valueString": {
            name: "valueString",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "valueDateTime": {
            name: "valueDateTime",
            dataType: dateTime,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.term.offer.answer.id"
        },
        "valueInteger": {
            name: "valueInteger",
            dataType: integer,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: Quantity,
            min: 1,
            max: 1,
            isArray: false,
            description: "Response to an offer clause or question text, which enables selection of values to be agreed to, e.g., the period of participation, the date of occupancy of a rental, warrently duration, or whether biospecimen may be used for further research.",
            path: "Contract.term.offer.answer.value[x]"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractTermOfferAnswer record {|
    boolean valueBoolean;
    Coding valueCoding;
    Extension[] extension?;
    time valueTime;
    Reference valueReference;
    Extension[] modifierExtension?;
    decimal valueDecimal;
    uri valueUri;
    date valueDate;
    Attachment valueAttachment;
    string valueString;
    dateTime valueDateTime;
    string id?;
    integer valueInteger;
    Quantity valueQuantity;
|};

# FHIR ContractTerm datatype record.
#
# + identifier - Unique identifier for this particular Contract Provision.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + securityLabel - Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + topicCodeableConcept - The entity that the term applies to.
# + 'type - A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
# + offer - The matter of concern in the context of this provision of the agrement.
# + applies - Relevant time or time-period when this Contract Provision is applicable.
# + topicReference - The entity that the term applies to.
# + action - An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
# + subType - A specialized legal clause or condition based on overarching contract type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - Statement of a provision in a policy or a contract.
# + asset - Contract Term Asset List.
# + issued - When this Contract Provision was issued.
@DataTypeDefinition {
    name: "ContractTerm",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique identifier for this particular Contract Provision.",
            path: "Contract.term.identifier"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.term.extension"
        },
        "securityLabel": {
            name: "securityLabel",
            dataType: ContractTermSecurityLabel,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security labels that protect the handling of information about the term and its elements, which may be specifically identified..",
            path: "Contract.term.securityLabel"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.term.modifierExtension"
        },
        "topicCodeableConcept": {
            name: "topicCodeableConcept",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The entity that the term applies to.",
            path: "Contract.term.topic[x]"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.",
            path: "Contract.term.type"
        },
        "offer": {
            name: "offer",
            dataType: ContractTermOffer,
            min: 1,
            max: 1,
            isArray: false,
            description: "The matter of concern in the context of this provision of the agrement.",
            path: "Contract.term.offer"
        },
        "applies": {
            name: "applies",
            dataType: Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "Relevant time or time-period when this Contract Provision is applicable.",
            path: "Contract.term.applies"
        },
        "topicReference": {
            name: "topicReference",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The entity that the term applies to.",
            path: "Contract.term.topic[x]"
        },
        "action": {
            name: "action",
            dataType: ContractTermAction,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.",
            path: "Contract.term.action"
        },
        "subType": {
            name: "subType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A specialized legal clause or condition based on overarching contract type.",
            path: "Contract.term.subType"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.term.id"
        },
        "text": {
            name: "text",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Statement of a provision in a policy or a contract.",
            path: "Contract.term.text"
        },
        "asset": {
            name: "asset",
            dataType: ContractTermAsset,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Contract Term Asset List.",
            path: "Contract.term.asset"
        },
        "issued": {
            name: "issued",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "When this Contract Provision was issued.",
            path: "Contract.term.issued"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractTerm record {|
    Identifier identifier?;
    Extension[] extension?;
    ContractTermSecurityLabel[] securityLabel?;
    Extension[] modifierExtension?;
    CodeableConcept topicCodeableConcept?;
    CodeableConcept 'type?;
    ContractTermOffer offer;
    Period applies?;
    Reference topicReference?;
    ContractTermAction[] action?;
    CodeableConcept subType?;
    string id?;
    string text?;
    ContractTermAsset[] asset?;
    dateTime issued?;
|};

# FHIR ContractFriendly datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + contentReference - Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + contentAttachment - Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "ContractFriendly",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.friendly.extension"
        },
        "contentReference": {
            name: "contentReference",
            dataType: Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.",
            path: "Contract.friendly.content[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.friendly.modifierExtension"
        },
        "contentAttachment": {
            name: "contentAttachment",
            dataType: Attachment,
            min: 1,
            max: 1,
            isArray: false,
            description: "Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.",
            path: "Contract.friendly.content[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.friendly.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractFriendly record {|
    Extension[] extension?;
    Reference contentReference;
    Extension[] modifierExtension?;
    Attachment contentAttachment;
    string id?;
|};

# FHIR ContractTermOfferParty datatype record.
#
# + reference - Participant in the offer.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - How the party participates in the offer.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "ContractTermOfferParty",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Participant in the offer.",
            path: "Contract.term.offer.party.reference"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.term.offer.party.extension"
        },
        "role": {
            name: "role",
            dataType: CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "How the party participates in the offer.",
            path: "Contract.term.offer.party.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.term.offer.party.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.term.offer.party.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractTermOfferParty record {|
    @constraint:Array {
       minLength: 1
    }
    Reference[] reference;
    Extension[] extension?;
    CodeableConcept role;
    Extension[] modifierExtension?;
    string id?;
|};

# FHIR ContractTermAssetValuedItem datatype record.
#
# + unitPrice - A Contract Valued Item unit valuation measure.
# + identifier - Identifies a Contract Valued Item instance.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + quantity - Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
# + effectiveTime - Indicates the time during which this Contract ValuedItem information is effective.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + entityCodeableConcept - Specific type of Contract Valued Item that may be priced.
# + securityLabelNumber - A set of security labels that define which terms are controlled by this condition.
# + points - An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
# + linkId - Id of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
# + entityReference - Specific type of Contract Valued Item that may be priced.
# + responsible - Who will make payment.
# + recipient - Who will receive payment.
# + payment - Terms of valuation.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + factor - A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
# + net - Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
# + paymentDate - When payment is due.
@DataTypeDefinition {
    name: "ContractTermAssetValuedItem",
    baseType: (),
    elements: {
        "unitPrice": {
            name: "unitPrice",
            dataType: Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "A Contract Valued Item unit valuation measure.",
            path: "Contract.term.asset.valuedItem.unitPrice"
        },
        "identifier": {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifies a Contract Valued Item instance.",
            path: "Contract.term.asset.valuedItem.identifier"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.term.asset.valuedItem.extension"
        },
        "quantity": {
            name: "quantity",
            dataType: Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.",
            path: "Contract.term.asset.valuedItem.quantity"
        },
        "effectiveTime": {
            name: "effectiveTime",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates the time during which this Contract ValuedItem information is effective.",
            path: "Contract.term.asset.valuedItem.effectiveTime"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.term.asset.valuedItem.modifierExtension"
        },
        "entityCodeableConcept": {
            name: "entityCodeableConcept",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specific type of Contract Valued Item that may be priced.",
            path: "Contract.term.asset.valuedItem.entity[x]"
        },
        "securityLabelNumber": {
            name: "securityLabelNumber",
            dataType: unsignedInt,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A set of security labels that define which terms are controlled by this condition.",
            path: "Contract.term.asset.valuedItem.securityLabelNumber"
        },
        "points": {
            name: "points",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.",
            path: "Contract.term.asset.valuedItem.points"
        },
        "linkId": {
            name: "linkId",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Id of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.",
            path: "Contract.term.asset.valuedItem.linkId"
        },
        "entityReference": {
            name: "entityReference",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specific type of Contract Valued Item that may be priced.",
            path: "Contract.term.asset.valuedItem.entity[x]"
        },
        "responsible": {
            name: "responsible",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Who will make payment.",
            path: "Contract.term.asset.valuedItem.responsible"
        },
        "recipient": {
            name: "recipient",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Who will receive payment.",
            path: "Contract.term.asset.valuedItem.recipient"
        },
        "payment": {
            name: "payment",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Terms of valuation.",
            path: "Contract.term.asset.valuedItem.payment"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.term.asset.valuedItem.id"
        },
        "factor": {
            name: "factor",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.",
            path: "Contract.term.asset.valuedItem.factor"
        },
        "net": {
            name: "net",
            dataType: Money,
            min: 0,
            max: 1,
            isArray: false,
            description: "Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.",
            path: "Contract.term.asset.valuedItem.net"
        },
        "paymentDate": {
            name: "paymentDate",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "When payment is due.",
            path: "Contract.term.asset.valuedItem.paymentDate"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractTermAssetValuedItem record {|
    Money unitPrice?;
    Identifier identifier?;
    Extension[] extension?;
    Quantity quantity?;
    dateTime effectiveTime?;
    Extension[] modifierExtension?;
    CodeableConcept entityCodeableConcept?;
    unsignedInt[] securityLabelNumber?;
    decimal points?;
    string[] linkId?;
    Reference entityReference?;
    Reference responsible?;
    Reference recipient?;
    string payment?;
    string id?;
    decimal factor?;
    Money net?;
    dateTime paymentDate?;
|};

# FHIR ContractTermSecurityLabel datatype record.
#
# + number - Number used to link this term or term element to the applicable Security Label.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + control - Security label privacy tag that species the manner in which term and/or term elements are to be protected.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + category - Security label privacy tag that species the applicable privacy and security policies governing this term and/or term elements.
# + classification - Security label privacy tag that species the level of confidentiality protection required for this term and/or term elements.
@DataTypeDefinition {
    name: "ContractTermSecurityLabel",
    baseType: (),
    elements: {
        "number": {
            name: "number",
            dataType: unsignedInt,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Number used to link this term or term element to the applicable Security Label.",
            path: "Contract.term.securityLabel.number"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.term.securityLabel.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.term.securityLabel.modifierExtension"
        },
        "control": {
            name: "control",
            dataType: Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security label privacy tag that species the manner in which term and/or term elements are to be protected.",
            path: "Contract.term.securityLabel.control"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.term.securityLabel.id"
        },
        "category": {
            name: "category",
            dataType: Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security label privacy tag that species the applicable privacy and security policies governing this term and/or term elements.",
            path: "Contract.term.securityLabel.category"
        },
        "classification": {
            name: "classification",
            dataType: Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "Security label privacy tag that species the level of confidentiality protection required for this term and/or term elements.",
            path: "Contract.term.securityLabel.classification"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractTermSecurityLabel record {|
    unsignedInt[] number?;
    Extension[] extension?;
    Extension[] modifierExtension?;
    Coding[] control?;
    string id?;
    Coding[] category?;
    Coding classification;
|};

# FHIR ContractTermAction datatype record.
#
# + note - Comments made about the term action made by the requester, performer, subject or other participants.
# + reason - Describes why the action is to be performed or not performed in textual form.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + subject - Entity of the action.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + reasonReference - Indicates another resource whose existence justifies permitting or not permitting this action.
# + performerLinkId - Id [identifier??] of the clause or question text related to the reason type or reference of this action in the referenced form or QuestionnaireResponse.
# + 'type - Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
# + contextLinkId - Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
# + context - Encounter or Episode with primary association to specified term activity.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + reasonCode - Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited.
# + doNotPerform - True if the term prohibits the action.
# + requester - Who or what initiated the action and has responsibility for its activation.
# + performer - Indicates who or what is being asked to perform (or not perform) the ction.
# + performerRole - The type of role or competency of an individual desired or required to perform or not perform the action.
# + securityLabelNumber - Security labels that protects the action.
# + occurrenceTiming - When action happens.
# + intent - Reason or purpose for the action stipulated by this Contract Provision.
# + performerType - The type of individual that is desired or required to perform or not perform the action.
# + requesterLinkId - Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
# + linkId - Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
# + occurrencePeriod - When action happens.
# + occurrenceDateTime - When action happens.
# + reasonLinkId - Id [identifier??] of the clause or question text related to the reason type or reference of this action in the referenced form or QuestionnaireResponse.
# + status - Current state of the term action.
@DataTypeDefinition {
    name: "ContractTermAction",
    baseType: (),
    elements: {
        "note": {
            name: "note",
            dataType: Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Comments made about the term action made by the requester, performer, subject or other participants.",
            path: "Contract.term.action.note"
        },
        "reason": {
            name: "reason",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Describes why the action is to be performed or not performed in textual form.",
            path: "Contract.term.action.reason"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.term.action.extension"
        },
        "subject": {
            name: "subject",
            dataType: ContractTermOfferParty,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Entity of the action.",
            path: "Contract.term.action.subject"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.term.action.modifierExtension"
        },
        "reasonReference": {
            name: "reasonReference",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Indicates another resource whose existence justifies permitting or not permitting this action.",
            path: "Contract.term.action.reasonReference"
        },
        "performerLinkId": {
            name: "performerLinkId",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Id [identifier??] of the clause or question text related to the reason type or reference of this action in the referenced form or QuestionnaireResponse.",
            path: "Contract.term.action.performerLinkId"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.",
            path: "Contract.term.action.type"
        },
        "contextLinkId": {
            name: "contextLinkId",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.",
            path: "Contract.term.action.contextLinkId"
        },
        "context": {
            name: "context",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Encounter or Episode with primary association to specified term activity.",
            path: "Contract.term.action.context"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.term.action.id"
        },
        "reasonCode": {
            name: "reasonCode",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited.",
            path: "Contract.term.action.reasonCode"
        },
        "doNotPerform": {
            name: "doNotPerform",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "True if the term prohibits the action.",
            path: "Contract.term.action.doNotPerform"
        },
        "requester": {
            name: "requester",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Who or what initiated the action and has responsibility for its activation.",
            path: "Contract.term.action.requester"
        },
        "performer": {
            name: "performer",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates who or what is being asked to perform (or not perform) the ction.",
            path: "Contract.term.action.performer"
        },
        "performerRole": {
            name: "performerRole",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of role or competency of an individual desired or required to perform or not perform the action.",
            path: "Contract.term.action.performerRole"
        },
        "securityLabelNumber": {
            name: "securityLabelNumber",
            dataType: unsignedInt,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Security labels that protects the action.",
            path: "Contract.term.action.securityLabelNumber"
        },
        "occurrenceTiming": {
            name: "occurrenceTiming",
            dataType: Timing,
            min: 0,
            max: 1,
            isArray: false,
            description: "When action happens.",
            path: "Contract.term.action.occurrence[x]"
        },
        "intent": {
            name: "intent",
            dataType: CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Reason or purpose for the action stipulated by this Contract Provision.",
            path: "Contract.term.action.intent"
        },
        "performerType": {
            name: "performerType",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The type of individual that is desired or required to perform or not perform the action.",
            path: "Contract.term.action.performerType"
        },
        "requesterLinkId": {
            name: "requesterLinkId",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.",
            path: "Contract.term.action.requesterLinkId"
        },
        "linkId": {
            name: "linkId",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.",
            path: "Contract.term.action.linkId"
        },
        "occurrencePeriod": {
            name: "occurrencePeriod",
            dataType: Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "When action happens.",
            path: "Contract.term.action.occurrence[x]"
        },
        "occurrenceDateTime": {
            name: "occurrenceDateTime",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "When action happens.",
            path: "Contract.term.action.occurrence[x]"
        },
        "reasonLinkId": {
            name: "reasonLinkId",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Id [identifier??] of the clause or question text related to the reason type or reference of this action in the referenced form or QuestionnaireResponse.",
            path: "Contract.term.action.reasonLinkId"
        },
        "status": {
            name: "status",
            dataType: CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Current state of the term action.",
            path: "Contract.term.action.status"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractTermAction record {|
    Annotation[] note?;
    string[] reason?;
    Extension[] extension?;
    ContractTermOfferParty[] subject?;
    Extension[] modifierExtension?;
    Reference[] reasonReference?;
    string[] performerLinkId?;
    CodeableConcept 'type;
    string[] contextLinkId?;
    Reference context?;
    string id?;
    CodeableConcept[] reasonCode?;
    boolean doNotPerform?;
    Reference[] requester?;
    Reference performer?;
    CodeableConcept performerRole?;
    unsignedInt[] securityLabelNumber?;
    Timing occurrenceTiming?;
    CodeableConcept intent;
    CodeableConcept[] performerType?;
    string[] requesterLinkId?;
    string[] linkId?;
    Period occurrencePeriod?;
    dateTime occurrenceDateTime?;
    string[] reasonLinkId?;
    CodeableConcept status;
|};

# ContractContentDefinitionPublicationStatus enum
public enum ContractContentDefinitionPublicationStatus {
   CODE_PUBLICATIONSTATUS_DISPUTED = "disputed",
   CODE_PUBLICATIONSTATUS_REJECTED = "rejected",
   CODE_PUBLICATIONSTATUS_EXECUTED = "executed",
   CODE_PUBLICATIONSTATUS_NEGOTIABLE = "negotiable",
   CODE_PUBLICATIONSTATUS_REVOKED = "revoked",
   CODE_PUBLICATIONSTATUS_EXECUTABLE = "executable",
   CODE_PUBLICATIONSTATUS_AMENDED = "amended",
   CODE_PUBLICATIONSTATUS_RENEWED = "renewed",
   CODE_PUBLICATIONSTATUS_APPENDED = "appended",
   CODE_PUBLICATIONSTATUS_OFFERED = "offered",
   CODE_PUBLICATIONSTATUS_CANCELLED = "cancelled",
   CODE_PUBLICATIONSTATUS_ENTERED_IN_ERROR = "entered-in-error",
   CODE_PUBLICATIONSTATUS_TERMINATED = "terminated",
   CODE_PUBLICATIONSTATUS_POLICY = "policy",
   CODE_PUBLICATIONSTATUS_RESOLVED = "resolved"
}

# FHIR ContractContentDefinition datatype record.
#
# + publicationStatus - amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated.
# + copyright - A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + publisher - The individual or organization that published the Contract precursor content.
# + subType - Detailed Precusory content type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.
# + publicationDate - The date (and optionally time) when the contract was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.
@DataTypeDefinition {
    name: "ContractContentDefinition",
    baseType: (),
    elements: {
        "publicationStatus": {
            name: "publicationStatus",
            dataType: ContractContentDefinitionPublicationStatus,
            min: 1,
            max: 1,
            isArray: false,
            description: "amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated.",
            path: "Contract.contentDefinition.publicationStatus"
        },
        "copyright": {
            name: "copyright",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.",
            path: "Contract.contentDefinition.copyright"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Contract.contentDefinition.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Contract.contentDefinition.modifierExtension"
        },
        "publisher": {
            name: "publisher",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The individual or organization that published the Contract precursor content.",
            path: "Contract.contentDefinition.publisher"
        },
        "subType": {
            name: "subType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Detailed Precusory content type.",
            path: "Contract.contentDefinition.subType"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Contract.contentDefinition.id"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.",
            path: "Contract.contentDefinition.type"
        },
        "publicationDate": {
            name: "publicationDate",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The date (and optionally time) when the contract was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.",
            path: "Contract.contentDefinition.publicationDate"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ContractContentDefinition record {|
    ContractContentDefinitionPublicationStatus publicationStatus;
    markdown copyright?;
    Extension[] extension?;
    Extension[] modifierExtension?;
    Reference publisher?;
    CodeableConcept subType?;
    string id?;
    CodeableConcept 'type;
    dateTime publicationDate?;
|};

