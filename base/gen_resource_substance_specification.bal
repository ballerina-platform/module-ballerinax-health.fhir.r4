// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.


public const string PROFILE_BASE_SUBSTANCESPECIFICATION = "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification";
public const RESOURCE_NAME_SUBSTANCESPECIFICATION = "SubstanceSpecification";

# FHIR SubstanceSpecification resource record.
#
# + resourceType - The type of the resource describes
# + polymer - Data items specific to polymers.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Codes associated with the substance.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Textual description of the substance.
# + language - The base language in which the resource is written.
# + 'source - Supporting literature.
# + 'type - High level categorization, e.g. polymer or nucleic acid.
# + moiety - Moiety, for structural modifications.
# + protein - Data items specific to proteins.
# + property - General specifications for this substance, including how it is related to other substances.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + relationship - A link between this substance and another, with details of the relationship.
# + identifier - Identifier by which this substance is known.
# + referenceInformation - General information detailing this substance.
# + structure - Structural information.
# + sourceMaterial - Material or taxonomic/anatomical source for the substance.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + nucleicAcid - Data items specific to nucleic acids.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + domain - If the substance applies to only human or veterinary use.
# + name - Names applicable to this substance.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + comment - Textual comment about this record of a substance.
# + status - Status of substance within the catalogue e.g. approved.
@ResourceDefinition {
    resourceType: "SubstanceSpecification",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/SubstanceSpecification",
    elements: {
        "polymer" : {
            name: "polymer",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.polymer"
        },
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSpecification.extension"
        },
        "code" : {
            name: "code",
            dataType: SubstanceSpecificationCode,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSpecification.code"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSpecification.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.description"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "source" : {
            name: "source",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSpecification.source"
        },
        "type" : {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.type"
        },
        "moiety" : {
            name: "moiety",
            dataType: SubstanceSpecificationMoiety,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSpecification.moiety"
        },
        "protein" : {
            name: "protein",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.protein"
        },
        "property" : {
            name: "property",
            dataType: SubstanceSpecificationProperty,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSpecification.property"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.text"
        },
        "relationship" : {
            name: "relationship",
            dataType: SubstanceSpecificationRelationship,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSpecification.relationship"
        },
        "identifier" : {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.identifier"
        },
        "referenceInformation" : {
            name: "referenceInformation",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.referenceInformation"
        },
        "structure" : {
            name: "structure",
            dataType: SubstanceSpecificationStructure,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.structure"
        },
        "sourceMaterial" : {
            name: "sourceMaterial",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.sourceMaterial"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSpecification.contained"
        },
        "nucleicAcid" : {
            name: "nucleicAcid",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.nucleicAcid"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.meta"
        },
        "domain" : {
            name: "domain",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.domain"
        },
        "name" : {
            name: "name",
            dataType: SubstanceSpecificationName,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSpecification.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.implicitRules"
        },
        "comment" : {
            name: "comment",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.comment"
        },
        "status" : {
            name: "status",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSpecification.status"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type SubstanceSpecification record {|
    *DomainResource;

    RESOURCE_NAME_SUBSTANCESPECIFICATION resourceType = RESOURCE_NAME_SUBSTANCESPECIFICATION;

    BaseSubstanceSpecificationMeta meta = {
        profile : [PROFILE_BASE_SUBSTANCESPECIFICATION]
    };
    Reference polymer?;
    Extension[] extension?;
    SubstanceSpecificationCode[] code?;
    Extension[] modifierExtension?;
    string description?;
    code language?;
    Reference[] 'source?;
    CodeableConcept 'type?;
    SubstanceSpecificationMoiety[] moiety?;
    Reference protein?;
    SubstanceSpecificationProperty[] property?;
    string id?;
    Narrative text?;
    SubstanceSpecificationRelationship[] relationship?;
    Identifier identifier?;
    Reference referenceInformation?;
    SubstanceSpecificationStructure structure?;
    Reference sourceMaterial?;
    Resource[] contained?;
    Reference nucleicAcid?;
    CodeableConcept domain?;
    SubstanceSpecificationName[] name?;
    uri implicitRules?;
    string comment?;
    CodeableConcept status?;
|};

@DataTypeDefinition {
    name: "BaseSubstanceSpecificationMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseSubstanceSpecificationMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/SubstanceSpecification"];
    Coding[] security?;
    Coding[] tag?;
|};

# FHIR SubstanceSpecificationRelationship datatype record.
#
# + amountRatio - A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
# + amountType - An operator for the amount, for example 'average', 'approximately', 'less than'.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + substanceCodeableConcept - A pointer to another substance, as a resource or just a representational code.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'source - Supporting literature.
# + amountRatioLowLimit - For use when the numeric.
# + isDefining - For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
# + amountQuantity - A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
# + amountString - A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
# + amountRange - A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + relationship - For example 'salt to parent', 'active moiety', 'starting material'.
# + substanceReference - A pointer to another substance, as a resource or just a representational code.
@DataTypeDefinition {
    name: "SubstanceSpecificationRelationship",
    baseType: (),
    elements: {
        "amountRatio": {
            name: "amountRatio",
            dataType: Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.",
            path: "SubstanceSpecification.relationship.amount[x]"
        },
        "amountType": {
            name: "amountType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "An operator for the amount, for example 'average', 'approximately', 'less than'.",
            path: "SubstanceSpecification.relationship.amountType"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.relationship.extension"
        },
        "substanceCodeableConcept": {
            name: "substanceCodeableConcept",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A pointer to another substance, as a resource or just a representational code.",
            path: "SubstanceSpecification.relationship.substance[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.relationship.modifierExtension"
        },
        "source": {
            name: "source",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Supporting literature.",
            path: "SubstanceSpecification.relationship.source"
        },
        "amountRatioLowLimit": {
            name: "amountRatioLowLimit",
            dataType: Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "For use when the numeric.",
            path: "SubstanceSpecification.relationship.amountRatioLowLimit"
        },
        "isDefining": {
            name: "isDefining",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.",
            path: "SubstanceSpecification.relationship.isDefining"
        },
        "amountQuantity": {
            name: "amountQuantity",
            dataType: Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.",
            path: "SubstanceSpecification.relationship.amount[x]"
        },
        "amountString": {
            name: "amountString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.",
            path: "SubstanceSpecification.relationship.amount[x]"
        },
        "amountRange": {
            name: "amountRange",
            dataType: Range,
            min: 0,
            max: 1,
            isArray: false,
            description: "A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.",
            path: "SubstanceSpecification.relationship.amount[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.relationship.id"
        },
        "relationship": {
            name: "relationship",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "For example 'salt to parent', 'active moiety', 'starting material'.",
            path: "SubstanceSpecification.relationship.relationship"
        },
        "substanceReference": {
            name: "substanceReference",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "A pointer to another substance, as a resource or just a representational code.",
            path: "SubstanceSpecification.relationship.substance[x]"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationRelationship record {|
    Ratio amountRatio?;
    CodeableConcept amountType?;
    Extension[] extension?;
    CodeableConcept substanceCodeableConcept?;
    Extension[] modifierExtension?;
    Reference[] 'source?;
    Ratio amountRatioLowLimit?;
    boolean isDefining?;
    Quantity amountQuantity?;
    string amountString?;
    Range amountRange?;
    string id?;
    CodeableConcept relationship?;
    Reference substanceReference?;
|};

# FHIR SubstanceSpecificationCode datatype record.
#
# + statusDate - The date at which the code status is changed as part of the terminology maintenance.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - The specific code.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + comment - Any comment can be provided in this field, if necessary.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - Supporting literature.
# + status - Status of the code assignment.
@DataTypeDefinition {
    name: "SubstanceSpecificationCode",
    baseType: (),
    elements: {
        "statusDate": {
            name: "statusDate",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The date at which the code status is changed as part of the terminology maintenance.",
            path: "SubstanceSpecification.code.statusDate"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.code.extension"
        },
        "code": {
            name: "code",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The specific code.",
            path: "SubstanceSpecification.code.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.code.modifierExtension"
        },
        "comment": {
            name: "comment",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Any comment can be provided in this field, if necessary.",
            path: "SubstanceSpecification.code.comment"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.code.id"
        },
        "source": {
            name: "source",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Supporting literature.",
            path: "SubstanceSpecification.code.source"
        },
        "status": {
            name: "status",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Status of the code assignment.",
            path: "SubstanceSpecification.code.status"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationCode record {|
    dateTime statusDate?;
    Extension[] extension?;
    CodeableConcept code?;
    Extension[] modifierExtension?;
    string comment?;
    string id?;
    Reference[] 'source?;
    CodeableConcept status?;
|};

# FHIR SubstanceSpecificationStructure datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + opticalActivity - Optical activity type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + molecularFormula - Molecular formula.
# + molecularFormulaByMoiety - Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
# + stereochemistry - Stereochemistry type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + isotope - Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.
# + 'source - Supporting literature.
# + representation - Molecular structural representation.
@DataTypeDefinition {
    name: "SubstanceSpecificationStructure",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.structure.extension"
        },
        "opticalActivity": {
            name: "opticalActivity",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Optical activity type.",
            path: "SubstanceSpecification.structure.opticalActivity"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.structure.modifierExtension"
        },
        "molecularFormula": {
            name: "molecularFormula",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Molecular formula.",
            path: "SubstanceSpecification.structure.molecularFormula"
        },
        "molecularFormulaByMoiety": {
            name: "molecularFormulaByMoiety",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.",
            path: "SubstanceSpecification.structure.molecularFormulaByMoiety"
        },
        "stereochemistry": {
            name: "stereochemistry",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Stereochemistry type.",
            path: "SubstanceSpecification.structure.stereochemistry"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.structure.id"
        },
        "isotope": {
            name: "isotope",
            dataType: SubstanceSpecificationStructureIsotope,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Applicable for single substances that contain a radionuclide or a non-natural isotopic ratio.",
            path: "SubstanceSpecification.structure.isotope"
        },
        "source": {
            name: "source",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Supporting literature.",
            path: "SubstanceSpecification.structure.source"
        },
        "representation": {
            name: "representation",
            dataType: SubstanceSpecificationStructureRepresentation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Molecular structural representation.",
            path: "SubstanceSpecification.structure.representation"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationStructure record {|
    Extension[] extension?;
    CodeableConcept opticalActivity?;
    Extension[] modifierExtension?;
    string molecularFormula?;
    string molecularFormulaByMoiety?;
    CodeableConcept stereochemistry?;
    string id?;
    SubstanceSpecificationStructureIsotope[] isotope?;
    Reference[] 'source?;
    SubstanceSpecificationStructureRepresentation[] representation?;
|};

# FHIR SubstanceSpecificationStructureIsotope datatype record.
#
# + identifier - Substance identifier for each non-natural or radioisotope.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + substitution - The type of isotopic substitution present in a single substance.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Substance name for each non-natural or radioisotope.
# + molecularWeight - The molecular weight or weight range (for proteins, polymers or nucleic acids).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + halfLife - Half life - for a non-natural nuclide.
@DataTypeDefinition {
    name: "SubstanceSpecificationStructureIsotope",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "Substance identifier for each non-natural or radioisotope.",
            path: "SubstanceSpecification.structure.isotope.identifier"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.structure.isotope.extension"
        },
        "substitution": {
            name: "substitution",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of isotopic substitution present in a single substance.",
            path: "SubstanceSpecification.structure.isotope.substitution"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.structure.isotope.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Substance name for each non-natural or radioisotope.",
            path: "SubstanceSpecification.structure.isotope.name"
        },
        "molecularWeight": {
            name: "molecularWeight",
            dataType: SubstanceSpecificationStructureIsotopeMolecularWeight,
            min: 0,
            max: 1,
            isArray: false,
            description: "The molecular weight or weight range (for proteins, polymers or nucleic acids).",
            path: "SubstanceSpecification.structure.isotope.molecularWeight"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.structure.isotope.id"
        },
        "halfLife": {
            name: "halfLife",
            dataType: Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "Half life - for a non-natural nuclide.",
            path: "SubstanceSpecification.structure.isotope.halfLife"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationStructureIsotope record {|
    Identifier identifier?;
    Extension[] extension?;
    CodeableConcept substitution?;
    Extension[] modifierExtension?;
    CodeableConcept name?;
    SubstanceSpecificationStructureIsotopeMolecularWeight molecularWeight?;
    string id?;
    Quantity halfLife?;
|};

# FHIR SubstanceSpecificationName datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + domain - The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
# + jurisdiction - The jurisdiction where this name applies.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The actual name.
# + official - Details of the official nature of this name.
# + language - Language of the name.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - Supporting literature.
# + 'type - Name type.
# + preferred - If this is the preferred name for this substance.
# + status - The status of the name.
@DataTypeDefinition {
    name: "SubstanceSpecificationName",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.name.extension"
        },
        "domain": {
            name: "domain",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.",
            path: "SubstanceSpecification.name.domain"
        },
        "jurisdiction": {
            name: "jurisdiction",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The jurisdiction where this name applies.",
            path: "SubstanceSpecification.name.jurisdiction"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.name.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The actual name.",
            path: "SubstanceSpecification.name.name"
        },
        "official": {
            name: "official",
            dataType: SubstanceSpecificationNameOfficial,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Details of the official nature of this name.",
            path: "SubstanceSpecification.name.official"
        },
        "language": {
            name: "language",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Language of the name.",
            path: "SubstanceSpecification.name.language"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.name.id"
        },
        "source": {
            name: "source",
            dataType: Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Supporting literature.",
            path: "SubstanceSpecification.name.source"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Name type.",
            path: "SubstanceSpecification.name.type"
        },
        "preferred": {
            name: "preferred",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If this is the preferred name for this substance.",
            path: "SubstanceSpecification.name.preferred"
        },
        "status": {
            name: "status",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The status of the name.",
            path: "SubstanceSpecification.name.status"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationName record {|
    Extension[] extension?;
    CodeableConcept[] domain?;
    CodeableConcept[] jurisdiction?;
    Extension[] modifierExtension?;
    string name;
    SubstanceSpecificationNameOfficial[] official?;
    CodeableConcept[] language?;
    string id?;
    Reference[] 'source?;
    CodeableConcept 'type?;
    boolean preferred?;
    CodeableConcept status?;
|};

# FHIR SubstanceSpecificationProperty datatype record.
#
# + amountQuantity - Quantitative value for this property.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Property type e.g. viscosity, pH, isoelectric point.
# + amountString - Quantitative value for this property.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + category - A category for this property, e.g. Physical, Chemical, Enzymatic.
# + parameters - Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).
# + definingSubstanceReference - A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
# + definingSubstanceCodeableConcept - A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).
@DataTypeDefinition {
    name: "SubstanceSpecificationProperty",
    baseType: (),
    elements: {
        "amountQuantity": {
            name: "amountQuantity",
            dataType: Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "Quantitative value for this property.",
            path: "SubstanceSpecification.property.amount[x]"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.property.extension"
        },
        "code": {
            name: "code",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Property type e.g. viscosity, pH, isoelectric point.",
            path: "SubstanceSpecification.property.code"
        },
        "amountString": {
            name: "amountString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Quantitative value for this property.",
            path: "SubstanceSpecification.property.amount[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.property.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.property.id"
        },
        "category": {
            name: "category",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A category for this property, e.g. Physical, Chemical, Enzymatic.",
            path: "SubstanceSpecification.property.category"
        },
        "parameters": {
            name: "parameters",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Parameters that were used in the measurement of a property (e.g. for viscosity: measured at 20C with a pH of 7.1).",
            path: "SubstanceSpecification.property.parameters"
        },
        "definingSubstanceReference": {
            name: "definingSubstanceReference",
            dataType: Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).",
            path: "SubstanceSpecification.property.definingSubstance[x]"
        },
        "definingSubstanceCodeableConcept": {
            name: "definingSubstanceCodeableConcept",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A substance upon which a defining property depends (e.g. for solubility: in water, in alcohol).",
            path: "SubstanceSpecification.property.definingSubstance[x]"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationProperty record {|
    Quantity amountQuantity?;
    Extension[] extension?;
    CodeableConcept code?;
    string amountString?;
    Extension[] modifierExtension?;
    string id?;
    CodeableConcept category?;
    string parameters?;
    Reference definingSubstanceReference?;
    CodeableConcept definingSubstanceCodeableConcept?;
|};

# FHIR SubstanceSpecificationStructureRepresentation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + attachment - An attached file with the structural representation.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of structure (e.g. Full, Partial, Representative).
# + representation - The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.
@DataTypeDefinition {
    name: "SubstanceSpecificationStructureRepresentation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.structure.representation.extension"
        },
        "attachment": {
            name: "attachment",
            dataType: Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "An attached file with the structural representation.",
            path: "SubstanceSpecification.structure.representation.attachment"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.structure.representation.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.structure.representation.id"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of structure (e.g. Full, Partial, Representative).",
            path: "SubstanceSpecification.structure.representation.type"
        },
        "representation": {
            name: "representation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The structural representation as text string in a format e.g. InChI, SMILES, MOLFILE, CDX.",
            path: "SubstanceSpecification.structure.representation.representation"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationStructureRepresentation record {|
    Extension[] extension?;
    Attachment attachment?;
    Extension[] modifierExtension?;
    string id?;
    CodeableConcept 'type?;
    string representation?;
|};

# FHIR SubstanceSpecificationNameOfficial datatype record.
#
# + date - Date of official name change.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + authority - Which authority uses this official name.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + status - The status of the official name.
@DataTypeDefinition {
    name: "SubstanceSpecificationNameOfficial",
    baseType: (),
    elements: {
        "date": {
            name: "date",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Date of official name change.",
            path: "SubstanceSpecification.name.official.date"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.name.official.extension"
        },
        "authority": {
            name: "authority",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Which authority uses this official name.",
            path: "SubstanceSpecification.name.official.authority"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.name.official.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.name.official.id"
        },
        "status": {
            name: "status",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The status of the official name.",
            path: "SubstanceSpecification.name.official.status"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationNameOfficial record {|
    dateTime date?;
    Extension[] extension?;
    CodeableConcept authority?;
    Extension[] modifierExtension?;
    string id?;
    CodeableConcept status?;
|};

# FHIR SubstanceSpecificationMoiety datatype record.
#
# + amountQuantity - Quantitative value for this moiety.
# + identifier - Identifier by which this moiety substance is known.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - Role that the moiety is playing.
# + amountString - Quantitative value for this moiety.
# + opticalActivity - Optical activity type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + molecularFormula - Molecular formula.
# + name - Textual name for this moiety substance.
# + stereochemistry - Stereochemistry type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "SubstanceSpecificationMoiety",
    baseType: (),
    elements: {
        "amountQuantity": {
            name: "amountQuantity",
            dataType: Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "Quantitative value for this moiety.",
            path: "SubstanceSpecification.moiety.amount[x]"
        },
        "identifier": {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifier by which this moiety substance is known.",
            path: "SubstanceSpecification.moiety.identifier"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.moiety.extension"
        },
        "role": {
            name: "role",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Role that the moiety is playing.",
            path: "SubstanceSpecification.moiety.role"
        },
        "amountString": {
            name: "amountString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Quantitative value for this moiety.",
            path: "SubstanceSpecification.moiety.amount[x]"
        },
        "opticalActivity": {
            name: "opticalActivity",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Optical activity type.",
            path: "SubstanceSpecification.moiety.opticalActivity"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.moiety.modifierExtension"
        },
        "molecularFormula": {
            name: "molecularFormula",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Molecular formula.",
            path: "SubstanceSpecification.moiety.molecularFormula"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Textual name for this moiety substance.",
            path: "SubstanceSpecification.moiety.name"
        },
        "stereochemistry": {
            name: "stereochemistry",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Stereochemistry type.",
            path: "SubstanceSpecification.moiety.stereochemistry"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.moiety.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationMoiety record {|
    Quantity amountQuantity?;
    Identifier identifier?;
    Extension[] extension?;
    CodeableConcept role?;
    string amountString?;
    CodeableConcept opticalActivity?;
    Extension[] modifierExtension?;
    string molecularFormula?;
    string name?;
    CodeableConcept stereochemistry?;
    string id?;
|};

# FHIR SubstanceSpecificationStructureIsotopeMolecularWeight datatype record.
#
# + amount - Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + method - The method by which the molecular weight was determined.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of molecular weight such as exact, average (also known as. number average), weight average.
@DataTypeDefinition {
    name: "SubstanceSpecificationStructureIsotopeMolecularWeight",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.",
            path: "SubstanceSpecification.structure.isotope.molecularWeight.amount"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSpecification.structure.isotope.molecularWeight.extension"
        },
        "method": {
            name: "method",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The method by which the molecular weight was determined.",
            path: "SubstanceSpecification.structure.isotope.molecularWeight.method"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSpecification.structure.isotope.molecularWeight.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSpecification.structure.isotope.molecularWeight.id"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of molecular weight such as exact, average (also known as. number average), weight average.",
            path: "SubstanceSpecification.structure.isotope.molecularWeight.type"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSpecificationStructureIsotopeMolecularWeight record {|
    Quantity amount?;
    Extension[] extension?;
    CodeableConcept method?;
    Extension[] modifierExtension?;
    string id?;
    CodeableConcept 'type?;
|};

