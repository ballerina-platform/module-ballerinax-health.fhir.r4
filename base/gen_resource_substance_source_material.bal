// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.


public const string PROFILE_BASE_SUBSTANCESOURCEMATERIAL = "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial";
public const RESOURCE_NAME_SUBSTANCESOURCEMATERIAL = "SubstanceSourceMaterial";

# FHIR SubstanceSourceMaterial resource record.
#
# + resourceType - The type of the resource describes
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + geographicalLocation - The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.
# + organism - This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + sourceMaterialType - The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + organismId - The unique identifier associated with the source material parent organism shall be specified.
# + parentSubstanceName - The parent substance of the Herbal Drug, or Herbal preparation.
# + developmentStage - Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + organismName - The organism accepted Scientific name shall be provided based on the organism taxonomy.
# + partDescription - To do.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + sourceMaterialClass - General high level classification of the source material specific to the origin of the material.
# + countryOfOrigin - The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + sourceMaterialState - The state of the source material when extracted.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + parentSubstanceId - The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).
# + fractionDescription - Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.
@ResourceDefinition {
    resourceType: "SubstanceSourceMaterial",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial",
    elements: {
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSourceMaterial.extension"
        },
        "geographicalLocation" : {
            name: "geographicalLocation",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSourceMaterial.geographicalLocation"
        },
        "organism" : {
            name: "organism",
            dataType: SubstanceSourceMaterialOrganism,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.organism"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSourceMaterial.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "sourceMaterialType" : {
            name: "sourceMaterialType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.sourceMaterialType"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSourceMaterial.contained"
        },
        "organismId" : {
            name: "organismId",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.organismId"
        },
        "parentSubstanceName" : {
            name: "parentSubstanceName",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSourceMaterial.parentSubstanceName"
        },
        "developmentStage" : {
            name: "developmentStage",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.developmentStage"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.meta"
        },
        "organismName" : {
            name: "organismName",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.organismName"
        },
        "partDescription" : {
            name: "partDescription",
            dataType: SubstanceSourceMaterialPartDescription,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSourceMaterial.partDescription"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.implicitRules"
        },
        "sourceMaterialClass" : {
            name: "sourceMaterialClass",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.sourceMaterialClass"
        },
        "countryOfOrigin" : {
            name: "countryOfOrigin",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSourceMaterial.countryOfOrigin"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.id"
        },
        "sourceMaterialState" : {
            name: "sourceMaterialState",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.sourceMaterialState"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceSourceMaterial.text"
        },
        "parentSubstanceId" : {
            name: "parentSubstanceId",
            dataType: Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSourceMaterial.parentSubstanceId"
        },
        "fractionDescription" : {
            name: "fractionDescription",
            dataType: SubstanceSourceMaterialFractionDescription,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceSourceMaterial.fractionDescription"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type SubstanceSourceMaterial record {|
    *DomainResource;

    RESOURCE_NAME_SUBSTANCESOURCEMATERIAL resourceType = RESOURCE_NAME_SUBSTANCESOURCEMATERIAL;

    BaseSubstanceSourceMaterialMeta meta = {
        profile : [PROFILE_BASE_SUBSTANCESOURCEMATERIAL]
    };
    Extension[] extension?;
    string[] geographicalLocation?;
    SubstanceSourceMaterialOrganism organism?;
    Extension[] modifierExtension?;
    code language?;
    CodeableConcept sourceMaterialType?;
    Resource[] contained?;
    Identifier organismId?;
    string[] parentSubstanceName?;
    CodeableConcept developmentStage?;
    string organismName?;
    SubstanceSourceMaterialPartDescription[] partDescription?;
    uri implicitRules?;
    CodeableConcept sourceMaterialClass?;
    CodeableConcept[] countryOfOrigin?;
    string id?;
    CodeableConcept sourceMaterialState?;
    Narrative text?;
    Identifier[] parentSubstanceId?;
    SubstanceSourceMaterialFractionDescription[] fractionDescription?;
|};

@DataTypeDefinition {
    name: "BaseSubstanceSourceMaterialMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseSubstanceSourceMaterialMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial"];
    Coding[] security?;
    Coding[] tag?;
|};

# FHIR SubstanceSourceMaterialOrganismOrganismGeneral datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + phylum - The phylum of an organism shall be specified.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'class - The class of an organism shall be specified.
# + kingdom - The kingdom of an organism shall be specified.
# + 'order - The order of an organism shall be specified,.
@DataTypeDefinition {
    name: "SubstanceSourceMaterialOrganismOrganismGeneral",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSourceMaterial.organism.organismGeneral.extension"
        },
        "phylum": {
            name: "phylum",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The phylum of an organism shall be specified.",
            path: "SubstanceSourceMaterial.organism.organismGeneral.phylum"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSourceMaterial.organism.organismGeneral.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSourceMaterial.organism.organismGeneral.id"
        },
        "class": {
            name: "class",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The class of an organism shall be specified.",
            path: "SubstanceSourceMaterial.organism.organismGeneral.class"
        },
        "kingdom": {
            name: "kingdom",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The kingdom of an organism shall be specified.",
            path: "SubstanceSourceMaterial.organism.organismGeneral.kingdom"
        },
        "order": {
            name: "order",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The order of an organism shall be specified,.",
            path: "SubstanceSourceMaterial.organism.organismGeneral.order"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSourceMaterialOrganismOrganismGeneral record {|
    Extension[] extension?;
    CodeableConcept phylum?;
    Extension[] modifierExtension?;
    string id?;
    CodeableConcept 'class?;
    CodeableConcept kingdom?;
    CodeableConcept 'order?;
|};

# FHIR SubstanceSourceMaterialPartDescription datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + part - Entity of anatomical origin of source material within an organism.
# + partLocation - The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "SubstanceSourceMaterialPartDescription",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSourceMaterial.partDescription.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSourceMaterial.partDescription.modifierExtension"
        },
        "part": {
            name: "part",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Entity of anatomical origin of source material within an organism.",
            path: "SubstanceSourceMaterial.partDescription.part"
        },
        "partLocation": {
            name: "partLocation",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.",
            path: "SubstanceSourceMaterial.partDescription.partLocation"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSourceMaterial.partDescription.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSourceMaterialPartDescription record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    CodeableConcept part?;
    CodeableConcept partLocation?;
    string id?;
|};

# FHIR SubstanceSourceMaterialFractionDescription datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + materialType - The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + fraction - This element is capturing information about the fraction of a plant part, or human plasma for fractionation.
@DataTypeDefinition {
    name: "SubstanceSourceMaterialFractionDescription",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSourceMaterial.fractionDescription.extension"
        },
        "materialType": {
            name: "materialType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.",
            path: "SubstanceSourceMaterial.fractionDescription.materialType"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSourceMaterial.fractionDescription.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSourceMaterial.fractionDescription.id"
        },
        "fraction": {
            name: "fraction",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "This element is capturing information about the fraction of a plant part, or human plasma for fractionation.",
            path: "SubstanceSourceMaterial.fractionDescription.fraction"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSourceMaterialFractionDescription record {|
    Extension[] extension?;
    CodeableConcept materialType?;
    Extension[] modifierExtension?;
    string id?;
    string fraction?;
|};

# FHIR SubstanceSourceMaterialOrganismHybrid datatype record.
#
# + maternalOrganismName - The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + maternalOrganismId - The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
# + paternalOrganismId - The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + hybridType - The hybrid type of an organism shall be specified.
# + paternalOrganismName - The name of the paternal species constituting the hybrid organism shall be specified.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "SubstanceSourceMaterialOrganismHybrid",
    baseType: (),
    elements: {
        "maternalOrganismName": {
            name: "maternalOrganismName",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.",
            path: "SubstanceSourceMaterial.organism.hybrid.maternalOrganismName"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSourceMaterial.organism.hybrid.extension"
        },
        "maternalOrganismId": {
            name: "maternalOrganismId",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.",
            path: "SubstanceSourceMaterial.organism.hybrid.maternalOrganismId"
        },
        "paternalOrganismId": {
            name: "paternalOrganismId",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.",
            path: "SubstanceSourceMaterial.organism.hybrid.paternalOrganismId"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSourceMaterial.organism.hybrid.modifierExtension"
        },
        "hybridType": {
            name: "hybridType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The hybrid type of an organism shall be specified.",
            path: "SubstanceSourceMaterial.organism.hybrid.hybridType"
        },
        "paternalOrganismName": {
            name: "paternalOrganismName",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name of the paternal species constituting the hybrid organism shall be specified.",
            path: "SubstanceSourceMaterial.organism.hybrid.paternalOrganismName"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSourceMaterial.organism.hybrid.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSourceMaterialOrganismHybrid record {|
    string maternalOrganismName?;
    Extension[] extension?;
    string maternalOrganismId?;
    string paternalOrganismId?;
    Extension[] modifierExtension?;
    CodeableConcept hybridType?;
    string paternalOrganismName?;
    string id?;
|};

# FHIR SubstanceSourceMaterialOrganism datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + hybrid - 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
# + intraspecificType - The Intraspecific type of an organism shall be specified.
# + genus - The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.
# + species - The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.
# + author - 4.9.13.6.1 Author type (Conditional).
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + organismGeneral - 4.9.13.7.1 Kingdom (Conditional).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + family - The family of an organism shall be specified.
# + intraspecificDescription - The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.
@DataTypeDefinition {
    name: "SubstanceSourceMaterialOrganism",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSourceMaterial.organism.extension"
        },
        "hybrid": {
            name: "hybrid",
            dataType: SubstanceSourceMaterialOrganismHybrid,
            min: 0,
            max: 1,
            isArray: false,
            description: "4.9.13.8.1 Hybrid species maternal organism ID (Optional).",
            path: "SubstanceSourceMaterial.organism.hybrid"
        },
        "intraspecificType": {
            name: "intraspecificType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The Intraspecific type of an organism shall be specified.",
            path: "SubstanceSourceMaterial.organism.intraspecificType"
        },
        "genus": {
            name: "genus",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.",
            path: "SubstanceSourceMaterial.organism.genus"
        },
        "species": {
            name: "species",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.",
            path: "SubstanceSourceMaterial.organism.species"
        },
        "author": {
            name: "author",
            dataType: SubstanceSourceMaterialOrganismAuthor,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "4.9.13.6.1 Author type (Conditional).",
            path: "SubstanceSourceMaterial.organism.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSourceMaterial.organism.modifierExtension"
        },
        "organismGeneral": {
            name: "organismGeneral",
            dataType: SubstanceSourceMaterialOrganismOrganismGeneral,
            min: 0,
            max: 1,
            isArray: false,
            description: "4.9.13.7.1 Kingdom (Conditional).",
            path: "SubstanceSourceMaterial.organism.organismGeneral"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSourceMaterial.organism.id"
        },
        "family": {
            name: "family",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The family of an organism shall be specified.",
            path: "SubstanceSourceMaterial.organism.family"
        },
        "intraspecificDescription": {
            name: "intraspecificDescription",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.",
            path: "SubstanceSourceMaterial.organism.intraspecificDescription"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSourceMaterialOrganism record {|
    Extension[] extension?;
    SubstanceSourceMaterialOrganismHybrid hybrid?;
    CodeableConcept intraspecificType?;
    CodeableConcept genus?;
    CodeableConcept species?;
    SubstanceSourceMaterialOrganismAuthor[] author?;
    Extension[] modifierExtension?;
    SubstanceSourceMaterialOrganismOrganismGeneral organismGeneral?;
    string id?;
    CodeableConcept family?;
    string intraspecificDescription?;
|};

# FHIR SubstanceSourceMaterialOrganismAuthor datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + authorType - The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + authorDescription - The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "SubstanceSourceMaterialOrganismAuthor",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceSourceMaterial.organism.author.extension"
        },
        "authorType": {
            name: "authorType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.",
            path: "SubstanceSourceMaterial.organism.author.authorType"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceSourceMaterial.organism.author.modifierExtension"
        },
        "authorDescription": {
            name: "authorDescription",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).",
            path: "SubstanceSourceMaterial.organism.author.authorDescription"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceSourceMaterial.organism.author.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceSourceMaterialOrganismAuthor record {|
    Extension[] extension?;
    CodeableConcept authorType?;
    Extension[] modifierExtension?;
    string authorDescription?;
    string id?;
|};

