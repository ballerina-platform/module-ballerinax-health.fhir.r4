// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.


public const string PROFILE_BASE_EXAMPLESCENARIO = "http://hl7.org/fhir/StructureDefinition/ExampleScenario";
public const RESOURCE_NAME_EXAMPLESCENARIO = "ExampleScenario";

# FHIR ExampleScenario resource record.
#
# + resourceType - The type of the resource describes
# + date - The date (and optionally time) when the example scenario was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').
# + copyright - A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + instance - Each resource and each version that is present in the workflow.
# + purpose - What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.
# + jurisdiction - A legal or geographic region in which the example scenario is intended to be used.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + experimental - A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
# + language - The base language in which the resource is written.
# + contact - Contact details to assist a user in finding and communicating with the publisher.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + identifier - A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.
# + process - Each major process - a group of operations.
# + workflow - Another nested workflow.
# + 'version - The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
# + url - An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.
# + actor - Actor participating in the resource.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A natural language name identifying the example scenario. This name should be usable as an identifier for the module by machine processing applications such as code generation.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + publisher - The name of the organization or individual that published the example scenario.
# + useContext - The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.
# + status - The status of this example scenario. Enables tracking the life-cycle of the content.
@ResourceDefinition {
    resourceType: "ExampleScenario",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
    elements: {
        "date" : {
            name: "date",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.date"
        },
        "copyright" : {
            name: "copyright",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.copyright"
        },
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.extension"
        },
        "instance" : {
            name: "instance",
            dataType: ExampleScenarioInstance,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.instance"
        },
        "purpose" : {
            name: "purpose",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.purpose"
        },
        "jurisdiction" : {
            name: "jurisdiction",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.jurisdiction",
            valueSet: "http://hl7.org/fhir/ValueSet/jurisdiction"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.modifierExtension"
        },
        "experimental" : {
            name: "experimental",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.experimental"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "contact" : {
            name: "contact",
            dataType: ContactDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.contact"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.text"
        },
        "identifier" : {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.identifier"
        },
        "process" : {
            name: "process",
            dataType: ExampleScenarioProcess,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.process"
        },
        "workflow" : {
            name: "workflow",
            dataType: canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.workflow"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.version"
        },
        "url" : {
            name: "url",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.url"
        },
        "actor" : {
            name: "actor",
            dataType: ExampleScenarioActor,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.actor"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.contained"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.implicitRules"
        },
        "publisher" : {
            name: "publisher",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.publisher"
        },
        "useContext" : {
            name: "useContext",
            dataType: UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.useContext"
        },
        "status" : {
            name: "status",
            dataType: ExampleScenarioStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "ExampleScenario.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|4.0.1"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type ExampleScenario record {|
    *DomainResource;

    RESOURCE_NAME_EXAMPLESCENARIO resourceType = RESOURCE_NAME_EXAMPLESCENARIO;

    BaseExampleScenarioMeta meta = {
        profile : [PROFILE_BASE_EXAMPLESCENARIO]
    };
    dateTime date?;
    markdown copyright?;
    Extension[] extension?;
    ExampleScenarioInstance[] instance?;
    markdown purpose?;
    CodeableConcept[] jurisdiction?;
    Extension[] modifierExtension?;
    boolean experimental?;
    code language?;
    ContactDetail[] contact?;
    string id?;
    Narrative text?;
    Identifier[] identifier?;
    ExampleScenarioProcess[] process?;
    canonical[] workflow?;
    string 'version?;
    uri url?;
    ExampleScenarioActor[] actor?;
    Resource[] contained?;
    string name?;
    uri implicitRules?;
    string publisher?;
    UsageContext[] useContext?;
    ExampleScenarioStatus status;
|};

@DataTypeDefinition {
    name: "BaseExampleScenarioMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseExampleScenarioMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/ExampleScenario"];
    Coding[] security?;
    Coding[] tag?;
|};

# ExampleScenarioStatus enum
public enum ExampleScenarioStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR ExampleScenarioProcessStep datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + alternative - Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + operation - Each interaction or action.
# + pause - If there is a pause in the flow.
@DataTypeDefinition {
    name: "ExampleScenarioProcessStep",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.process.step.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.process.step.modifierExtension"
        },
        "alternative": {
            name: "alternative",
            dataType: ExampleScenarioProcessStepAlternative,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.",
            path: "ExampleScenario.process.step.alternative"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.process.step.id"
        },
        "operation": {
            name: "operation",
            dataType: ExampleScenarioProcessStepOperation,
            min: 0,
            max: 1,
            isArray: false,
            description: "Each interaction or action.",
            path: "ExampleScenario.process.step.operation"
        },
        "pause": {
            name: "pause",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If there is a pause in the flow.",
            path: "ExampleScenario.process.step.pause"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioProcessStep record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    ExampleScenarioProcessStepAlternative[] alternative?;
    string id?;
    ExampleScenarioProcessStepOperation operation?;
    boolean pause?;
|};

# ExampleScenarioActorType enum
public enum ExampleScenarioActorType {
   CODE_TYPE_PERSON = "person",
   CODE_TYPE_ENTITY = "entity"
}

# FHIR ExampleScenarioProcessStepAlternative datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + title - The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
@DataTypeDefinition {
    name: "ExampleScenarioProcessStepAlternative",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.process.step.alternative.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.process.step.alternative.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable description of the alternative explaining when the alternative should occur rather than the base step.",
            path: "ExampleScenario.process.step.alternative.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.process.step.alternative.id"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.",
            path: "ExampleScenario.process.step.alternative.title"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioProcessStepAlternative record {|
    Extension[] extension?;
    Extension[] modifierExtension?;
    markdown description?;
    string id?;
    string title;
|};

# FHIR ExampleScenarioInstance datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + resourceId - The id of the resource for referencing.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - A short name for the resource instance.
# + description - Human-friendly description of the resource instance.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + containedInstance - Resources contained in the instance (e.g. the observations contained in a bundle).
# + 'version - A specific version of the resource.
# + resourceType - The type of the resource.
@DataTypeDefinition {
    name: "ExampleScenarioInstance",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.instance.extension"
        },
        "resourceId": {
            name: "resourceId",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The id of the resource for referencing.",
            path: "ExampleScenario.instance.resourceId"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.instance.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A short name for the resource instance.",
            path: "ExampleScenario.instance.name"
        },
        "description": {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Human-friendly description of the resource instance.",
            path: "ExampleScenario.instance.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.instance.id"
        },
        "containedInstance": {
            name: "containedInstance",
            dataType: ExampleScenarioInstanceContainedInstance,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Resources contained in the instance (e.g. the observations contained in a bundle).",
            path: "ExampleScenario.instance.containedInstance"
        },
        "version": {
            name: "version",
            dataType: ExampleScenarioInstanceVersion,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A specific version of the resource.",
            path: "ExampleScenario.instance.version"
        },
        "resourceType": {
            name: "resourceType",
            dataType: code,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of the resource.",
            path: "ExampleScenario.instance.resourceType"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioInstance record {|
    Extension[] extension?;
    string resourceId;
    Extension[] modifierExtension?;
    string name?;
    markdown description?;
    string id?;
    ExampleScenarioInstanceContainedInstance[] containedInstance?;
    ExampleScenarioInstanceVersion[] 'version?;
    code resourceType;
|};

# FHIR ExampleScenarioActor datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + actorId - ID or acronym of actor.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The name of the actor as shown in the page.
# + description - The description of the actor.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of actor - person or system.
@DataTypeDefinition {
    name: "ExampleScenarioActor",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.actor.extension"
        },
        "actorId": {
            name: "actorId",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "ID or acronym of actor.",
            path: "ExampleScenario.actor.actorId"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.actor.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name of the actor as shown in the page.",
            path: "ExampleScenario.actor.name"
        },
        "description": {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "The description of the actor.",
            path: "ExampleScenario.actor.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.actor.id"
        },
        "type": {
            name: "type",
            dataType: ExampleScenarioActorType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of actor - person or system.",
            path: "ExampleScenario.actor.type"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioActor record {|
    Extension[] extension?;
    string actorId;
    Extension[] modifierExtension?;
    string name?;
    markdown description?;
    string id?;
    ExampleScenarioActorType 'type;
|};

# FHIR ExampleScenarioInstanceContainedInstance datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + resourceId - Each resource contained in the instance.
# + versionId - A specific version of a resource contained in the instance.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "ExampleScenarioInstanceContainedInstance",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.instance.containedInstance.extension"
        },
        "resourceId": {
            name: "resourceId",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Each resource contained in the instance.",
            path: "ExampleScenario.instance.containedInstance.resourceId"
        },
        "versionId": {
            name: "versionId",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A specific version of a resource contained in the instance.",
            path: "ExampleScenario.instance.containedInstance.versionId"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.instance.containedInstance.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.instance.containedInstance.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioInstanceContainedInstance record {|
    Extension[] extension?;
    string resourceId;
    string versionId?;
    Extension[] modifierExtension?;
    string id?;
|};

# FHIR ExampleScenarioInstanceVersion datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + versionId - The identifier of a specific version of a resource.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - The description of the resource version.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "ExampleScenarioInstanceVersion",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.instance.version.extension"
        },
        "versionId": {
            name: "versionId",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identifier of a specific version of a resource.",
            path: "ExampleScenario.instance.version.versionId"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.instance.version.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: markdown,
            min: 1,
            max: 1,
            isArray: false,
            description: "The description of the resource version.",
            path: "ExampleScenario.instance.version.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.instance.version.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioInstanceVersion record {|
    Extension[] extension?;
    string versionId;
    Extension[] modifierExtension?;
    markdown description;
    string id?;
|};

# FHIR ExampleScenarioProcessStepOperation datatype record.
#
# + number - The sequential number of the interaction, e.g. 1.2.5.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + receiver - Who receives the transaction.
# + initiator - Who starts the transaction.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The human-friendly name of the interaction.
# + description - A comment to be inserted in the diagram.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + receiverActive - Whether the receiver is deactivated right after the transaction.
# + 'type - The type of operation - CRUD.
# + initiatorActive - Whether the initiator is deactivated right after the transaction.
@DataTypeDefinition {
    name: "ExampleScenarioProcessStepOperation",
    baseType: (),
    elements: {
        "number": {
            name: "number",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The sequential number of the interaction, e.g. 1.2.5.",
            path: "ExampleScenario.process.step.operation.number"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.process.step.operation.extension"
        },
        "receiver": {
            name: "receiver",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Who receives the transaction.",
            path: "ExampleScenario.process.step.operation.receiver"
        },
        "initiator": {
            name: "initiator",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Who starts the transaction.",
            path: "ExampleScenario.process.step.operation.initiator"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.process.step.operation.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The human-friendly name of the interaction.",
            path: "ExampleScenario.process.step.operation.name"
        },
        "description": {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A comment to be inserted in the diagram.",
            path: "ExampleScenario.process.step.operation.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.process.step.operation.id"
        },
        "receiverActive": {
            name: "receiverActive",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether the receiver is deactivated right after the transaction.",
            path: "ExampleScenario.process.step.operation.receiverActive"
        },
        "type": {
            name: "type",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of operation - CRUD.",
            path: "ExampleScenario.process.step.operation.type"
        },
        "initiatorActive": {
            name: "initiatorActive",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether the initiator is deactivated right after the transaction.",
            path: "ExampleScenario.process.step.operation.initiatorActive"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioProcessStepOperation record {|
    string number;
    Extension[] extension?;
    string receiver?;
    string initiator?;
    Extension[] modifierExtension?;
    string name?;
    markdown description?;
    string id?;
    boolean receiverActive?;
    string 'type?;
    boolean initiatorActive?;
|};

# FHIR ExampleScenarioProcess datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + postConditions - Description of final status after the process ends.
# + preConditions - Description of initial status before the process starts.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A longer description of the group of operations.
# + step - Each step of the process.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + title - The diagram title of the group of operations.
@DataTypeDefinition {
    name: "ExampleScenarioProcess",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.process.extension"
        },
        "postConditions": {
            name: "postConditions",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Description of final status after the process ends.",
            path: "ExampleScenario.process.postConditions"
        },
        "preConditions": {
            name: "preConditions",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Description of initial status before the process starts.",
            path: "ExampleScenario.process.preConditions"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.process.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A longer description of the group of operations.",
            path: "ExampleScenario.process.description"
        },
        "step": {
            name: "step",
            dataType: ExampleScenarioProcessStep,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Each step of the process.",
            path: "ExampleScenario.process.step"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.process.id"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The diagram title of the group of operations.",
            path: "ExampleScenario.process.title"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioProcess record {|
    Extension[] extension?;
    markdown postConditions?;
    markdown preConditions?;
    Extension[] modifierExtension?;
    markdown description?;
    ExampleScenarioProcessStep[] step?;
    string id?;
    string title;
|};

