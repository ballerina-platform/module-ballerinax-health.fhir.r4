// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.


public const string PROFILE_BASE_SUBSTANCEPOLYMER = "http://hl7.org/fhir/StructureDefinition/SubstancePolymer";
public const RESOURCE_NAME_SUBSTANCEPOLYMER = "SubstancePolymer";

# FHIR SubstancePolymer resource record.
#
# + resourceType - The type of the resource describes
# + monomerSet - Todo.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + modification - Todo.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + copolymerConnectivity - Todo.
# + repeat - Todo.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + geometry - Todo.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + 'class - Todo.
@ResourceDefinition {
    resourceType: "SubstancePolymer",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
    elements: {
        "monomerSet" : {
            name: "monomerSet",
            dataType: SubstancePolymerMonomerSet,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.monomerSet"
        },
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.extension"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "modification" : {
            name: "modification",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.modification"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.contained"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.meta"
        },
        "copolymerConnectivity" : {
            name: "copolymerConnectivity",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.copolymerConnectivity"
        },
        "repeat" : {
            name: "repeat",
            dataType: SubstancePolymerRepeat,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.repeat"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.implicitRules"
        },
        "geometry" : {
            name: "geometry",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.geometry"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.text"
        },
        "class" : {
            name: "class",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.class"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type SubstancePolymer record {|
    *DomainResource;

    RESOURCE_NAME_SUBSTANCEPOLYMER resourceType = RESOURCE_NAME_SUBSTANCEPOLYMER;

    BaseSubstancePolymerMeta meta = {
        profile : [PROFILE_BASE_SUBSTANCEPOLYMER]
    };
    SubstancePolymerMonomerSet[] monomerSet?;
    Extension[] extension?;
    Extension[] modifierExtension?;
    code language?;
    string[] modification?;
    Resource[] contained?;
    CodeableConcept[] copolymerConnectivity?;
    SubstancePolymerRepeat[] repeat?;
    uri implicitRules?;
    CodeableConcept geometry?;
    string id?;
    Narrative text?;
    CodeableConcept 'class?;
|};

@DataTypeDefinition {
    name: "BaseSubstancePolymerMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseSubstancePolymerMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/SubstancePolymer"];
    Coding[] security?;
    Coding[] tag?;
|};

# FHIR SubstancePolymerRepeat datatype record.
#
# + repeatUnit - Todo.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + numberOfUnits - Todo.
# + repeatUnitAmountType - Todo.
# + averageMolecularFormula - Todo.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "SubstancePolymerRepeat",
    baseType: (),
    elements: {
        "repeatUnit": {
            name: "repeatUnit",
            dataType: SubstancePolymerRepeatRepeatUnit,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.repeat.extension"
        },
        "numberOfUnits": {
            name: "numberOfUnits",
            dataType: integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.numberOfUnits"
        },
        "repeatUnitAmountType": {
            name: "repeatUnitAmountType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnitAmountType"
        },
        "averageMolecularFormula": {
            name: "averageMolecularFormula",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.averageMolecularFormula"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.repeat.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.repeat.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerRepeat record {|
    SubstancePolymerRepeatRepeatUnit[] repeatUnit?;
    Extension[] extension?;
    integer numberOfUnits?;
    CodeableConcept repeatUnitAmountType?;
    string averageMolecularFormula?;
    Extension[] modifierExtension?;
    string id?;
|};

# FHIR SubstancePolymerMonomerSetStartingMaterial datatype record.
#
# + amount - Todo.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + material - Todo.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Todo.
# + isDefining - Todo.
@DataTypeDefinition {
    name: "SubstancePolymerMonomerSetStartingMaterial",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: SubstanceAmount,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.monomerSet.startingMaterial.amount"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.monomerSet.startingMaterial.extension"
        },
        "material": {
            name: "material",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.monomerSet.startingMaterial.material"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.monomerSet.startingMaterial.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.monomerSet.startingMaterial.id"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.monomerSet.startingMaterial.type"
        },
        "isDefining": {
            name: "isDefining",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.monomerSet.startingMaterial.isDefining"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerMonomerSetStartingMaterial record {|
    SubstanceAmount amount?;
    Extension[] extension?;
    CodeableConcept material?;
    Extension[] modifierExtension?;
    string id?;
    CodeableConcept 'type?;
    boolean isDefining?;
|};

# FHIR SubstancePolymerMonomerSet datatype record.
#
# + startingMaterial - Todo.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + ratioType - Todo.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "SubstancePolymerMonomerSet",
    baseType: (),
    elements: {
        "startingMaterial": {
            name: "startingMaterial",
            dataType: SubstancePolymerMonomerSetStartingMaterial,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Todo.",
            path: "SubstancePolymer.monomerSet.startingMaterial"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.monomerSet.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.monomerSet.modifierExtension"
        },
        "ratioType": {
            name: "ratioType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.monomerSet.ratioType"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.monomerSet.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerMonomerSet record {|
    SubstancePolymerMonomerSetStartingMaterial[] startingMaterial?;
    Extension[] extension?;
    Extension[] modifierExtension?;
    CodeableConcept ratioType?;
    string id?;
|};

# FHIR SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation datatype record.
#
# + amount - Todo.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + degree - Todo.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: SubstanceAmount,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.amount"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.modifierExtension"
        },
        "degree": {
            name: "degree",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.degree"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation record {|
    SubstanceAmount amount?;
    Extension[] extension?;
    Extension[] modifierExtension?;
    CodeableConcept degree?;
    string id?;
|};

# FHIR SubstancePolymerRepeatRepeatUnit datatype record.
#
# + structuralRepresentation - Todo.
# + repeatUnit - Todo.
# + amount - Todo.
# + degreeOfPolymerisation - Todo.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + orientationOfPolymerisation - Todo.
@DataTypeDefinition {
    name: "SubstancePolymerRepeatRepeatUnit",
    baseType: (),
    elements: {
        "structuralRepresentation": {
            name: "structuralRepresentation",
            dataType: SubstancePolymerRepeatRepeatUnitStructuralRepresentation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation"
        },
        "repeatUnit": {
            name: "repeatUnit",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.repeatUnit"
        },
        "amount": {
            name: "amount",
            dataType: SubstanceAmount,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.amount"
        },
        "degreeOfPolymerisation": {
            name: "degreeOfPolymerisation",
            dataType: SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.repeat.repeatUnit.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.repeat.repeatUnit.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.repeat.repeatUnit.id"
        },
        "orientationOfPolymerisation": {
            name: "orientationOfPolymerisation",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.orientationOfPolymerisation"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerRepeatRepeatUnit record {|
    SubstancePolymerRepeatRepeatUnitStructuralRepresentation[] structuralRepresentation?;
    string repeatUnit?;
    SubstanceAmount amount?;
    SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[] degreeOfPolymerisation?;
    Extension[] extension?;
    Extension[] modifierExtension?;
    string id?;
    CodeableConcept orientationOfPolymerisation?;
|};

# FHIR SubstancePolymerRepeatRepeatUnitStructuralRepresentation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + attachment - Todo.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Todo.
# + representation - Todo.
@DataTypeDefinition {
    name: "SubstancePolymerRepeatRepeatUnitStructuralRepresentation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.extension"
        },
        "attachment": {
            name: "attachment",
            dataType: Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.attachment"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.id"
        },
        "type": {
            name: "type",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.type"
        },
        "representation": {
            name: "representation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Todo.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.representation"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerRepeatRepeatUnitStructuralRepresentation record {|
    Extension[] extension?;
    Attachment attachment?;
    Extension[] modifierExtension?;
    string id?;
    CodeableConcept 'type?;
    string representation?;
|};

