// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;

public const string PROFILE_BASE_CONCEPTMAP = "http://hl7.org/fhir/StructureDefinition/ConceptMap";
public const RESOURCE_NAME_CONCEPTMAP = "ConceptMap";

# FHIR ConceptMap resource record.
#
# + resourceType - The type of the resource describes
# + date - The date (and optionally time) when the concept map was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.
# + copyright - A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + purpose - Explanation of why this concept map is needed and why it has been designed as it has.
# + jurisdiction - A legal or geographic region in which the concept map is intended to be used.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A free text natural language description of the concept map from a consumer's perspective.
# + experimental - A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
# + language - The base language in which the resource is written.
# + title - A short, descriptive, user-friendly title for the concept map.
# + sourceUri - Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.
# + contact - Contact details to assist a user in finding and communicating with the publisher.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + group - A group of mappings that all have the same source and target system.
# + identifier - A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.
# + sourceCanonical - Identifier for the source value set that contains the concepts that are being mapped and provides context for the mappings.
# + 'version - The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
# + url - An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.
# + targetUri - The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
# + targetCanonical - The target value set provides context for the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + publisher - The name of the organization or individual that published the concept map.
# + useContext - The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances.
# + status - The status of this concept map. Enables tracking the life-cycle of the content.
@ResourceDefinition {
    resourceType: "ConceptMap",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/ConceptMap",
    elements: {
        "date" : {
            name: "date",
            dataType: dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.date"
        },
        "copyright" : {
            name: "copyright",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.copyright"
        },
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ConceptMap.extension"
        },
        "purpose" : {
            name: "purpose",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.purpose"
        },
        "jurisdiction" : {
            name: "jurisdiction",
            dataType: CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ConceptMap.jurisdiction",
            valueSet: "http://hl7.org/fhir/ValueSet/jurisdiction"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ConceptMap.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.description"
        },
        "experimental" : {
            name: "experimental",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.experimental"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.title"
        },
        "sourceUri" : {
            name: "sourceUri",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.source[x]"
        },
        "contact" : {
            name: "contact",
            dataType: ContactDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ConceptMap.contact"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.text"
        },
        "group" : {
            name: "group",
            dataType: ConceptMapGroup,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ConceptMap.group"
        },
        "identifier" : {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.identifier"
        },
        "sourceCanonical" : {
            name: "sourceCanonical",
            dataType: canonical,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.source[x]"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.version"
        },
        "url" : {
            name: "url",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.url"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ConceptMap.contained"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.name"
        },
        "targetUri" : {
            name: "targetUri",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.target[x]"
        },
        "targetCanonical" : {
            name: "targetCanonical",
            dataType: canonical,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.target[x]"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.implicitRules"
        },
        "publisher" : {
            name: "publisher",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ConceptMap.publisher"
        },
        "useContext" : {
            name: "useContext",
            dataType: UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ConceptMap.useContext"
        },
        "status" : {
            name: "status",
            dataType: ConceptMapStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "ConceptMap.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|4.0.1"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type ConceptMap record {|
    *DomainResource;

    RESOURCE_NAME_CONCEPTMAP resourceType = RESOURCE_NAME_CONCEPTMAP;

    BaseConceptMapMeta meta = {
        profile : [PROFILE_BASE_CONCEPTMAP]
    };
    dateTime date?;
    markdown copyright?;
    Extension[] extension?;
    markdown purpose?;
    CodeableConcept[] jurisdiction?;
    Extension[] modifierExtension?;
    markdown description?;
    boolean experimental?;
    code language?;
    string title?;
    uri sourceUri?;
    ContactDetail[] contact?;
    string id?;
    Narrative text?;
    ConceptMapGroup[] group?;
    Identifier identifier?;
    canonical sourceCanonical?;
    string 'version?;
    uri url?;
    Resource[] contained?;
    string name?;
    uri targetUri?;
    canonical targetCanonical?;
    uri implicitRules?;
    string publisher?;
    UsageContext[] useContext?;
    ConceptMapStatus status;
|};

@DataTypeDefinition {
    name: "BaseConceptMapMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseConceptMapMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/ConceptMap"];
    Coding[] security?;
    Coding[] tag?;
|};

# FHIR ConceptMapGroup datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + sourceVersion - The specific version of the code system, as determined by the code system authority.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - An absolute URI that identifies the source system where the concepts to be mapped are defined.
# + unmapped - What to do when there is no mapping for the source concept. 'Unmapped' does not include codes that are unmatched, and the unmapped element is ignored in a code is specified to have equivalence = unmatched.
# + element - Mappings for an individual concept in the source to one or more concepts in the target.
# + target - An absolute URI that identifies the target system that the concepts will be mapped to.
# + targetVersion - The specific version of the code system, as determined by the code system authority.
@DataTypeDefinition {
    name: "ConceptMapGroup",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ConceptMap.group.extension"
        },
        "sourceVersion": {
            name: "sourceVersion",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The specific version of the code system, as determined by the code system authority.",
            path: "ConceptMap.group.sourceVersion"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ConceptMap.group.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ConceptMap.group.id"
        },
        "source": {
            name: "source",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "An absolute URI that identifies the source system where the concepts to be mapped are defined.",
            path: "ConceptMap.group.source"
        },
        "unmapped": {
            name: "unmapped",
            dataType: ConceptMapGroupUnmapped,
            min: 0,
            max: 1,
            isArray: false,
            description: "What to do when there is no mapping for the source concept. 'Unmapped' does not include codes that are unmatched, and the unmapped element is ignored in a code is specified to have equivalence = unmatched.",
            path: "ConceptMap.group.unmapped"
        },
        "element": {
            name: "element",
            dataType: ConceptMapGroupElement,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Mappings for an individual concept in the source to one or more concepts in the target.",
            path: "ConceptMap.group.element"
        },
        "target": {
            name: "target",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "An absolute URI that identifies the target system that the concepts will be mapped to.",
            path: "ConceptMap.group.target"
        },
        "targetVersion": {
            name: "targetVersion",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The specific version of the code system, as determined by the code system authority.",
            path: "ConceptMap.group.targetVersion"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ConceptMapGroup record {|
    Extension[] extension?;
    string sourceVersion?;
    Extension[] modifierExtension?;
    string id?;
    uri 'source?;
    ConceptMapGroupUnmapped unmapped?;
    @constraint:Array {
       minLength: 1
    }
    ConceptMapGroupElement[] element;
    uri target?;
    string targetVersion?;
|};

# ConceptMapGroupElementTargetEquivalence enum
public enum ConceptMapGroupElementTargetEquivalence {
   CODE_EQUIVALENCE_EQUAL = "equal",
   CODE_EQUIVALENCE_INEXACT = "inexact",
   CODE_EQUIVALENCE_EQUIVALENT = "equivalent",
   CODE_EQUIVALENCE_WIDER = "wider",
   CODE_EQUIVALENCE_SPECIALIZES = "specializes",
   CODE_EQUIVALENCE_DISJOINT = "disjoint",
   CODE_EQUIVALENCE_NARROWER = "narrower",
   CODE_EQUIVALENCE_UNMATCHED = "unmatched",
   CODE_EQUIVALENCE_RELATEDTO = "relatedto",
   CODE_EQUIVALENCE_SUBSUMES = "subsumes"
}

# FHIR ConceptMapGroupUnmapped datatype record.
#
# + mode - Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - The fixed code to use when the mode = 'fixed' - all unmapped codes are mapped to a single fixed code.
# + display - The display for the code. The display is only provided to help editors when editing the concept map.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + url - The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.
@DataTypeDefinition {
    name: "ConceptMapGroupUnmapped",
    baseType: (),
    elements: {
        "mode": {
            name: "mode",
            dataType: ConceptMapGroupUnmappedMode,
            min: 1,
            max: 1,
            isArray: false,
            description: "Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).",
            path: "ConceptMap.group.unmapped.mode"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ConceptMap.group.unmapped.extension"
        },
        "code": {
            name: "code",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            description: "The fixed code to use when the mode = 'fixed' - all unmapped codes are mapped to a single fixed code.",
            path: "ConceptMap.group.unmapped.code"
        },
        "display": {
            name: "display",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The display for the code. The display is only provided to help editors when editing the concept map.",
            path: "ConceptMap.group.unmapped.display"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ConceptMap.group.unmapped.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ConceptMap.group.unmapped.id"
        },
        "url": {
            name: "url",
            dataType: canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.",
            path: "ConceptMap.group.unmapped.url"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ConceptMapGroupUnmapped record {|
    ConceptMapGroupUnmappedMode mode;
    Extension[] extension?;
    code code?;
    string display?;
    Extension[] modifierExtension?;
    string id?;
    canonical url?;
|};

# FHIR ConceptMapGroupElementTarget datatype record.
#
# + equivalence - The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Identity (code or path) or the element/item that the map refers to.
# + dependsOn - A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
# + display - The display for the code. The display is only provided to help editors when editing the concept map.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + comment - A description of status/issues in mapping that conveys additional information not represented in the structured data.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "ConceptMapGroupElementTarget",
    baseType: (),
    elements: {
        "equivalence": {
            name: "equivalence",
            dataType: ConceptMapGroupElementTargetEquivalence,
            min: 1,
            max: 1,
            isArray: false,
            description: "The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source).",
            path: "ConceptMap.group.element.target.equivalence"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ConceptMap.group.element.target.extension"
        },
        "code": {
            name: "code",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identity (code or path) or the element/item that the map refers to.",
            path: "ConceptMap.group.element.target.code"
        },
        "dependsOn": {
            name: "dependsOn",
            dataType: ConceptMapGroupElementTargetDependsOn,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.",
            path: "ConceptMap.group.element.target.dependsOn"
        },
        "display": {
            name: "display",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The display for the code. The display is only provided to help editors when editing the concept map.",
            path: "ConceptMap.group.element.target.display"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ConceptMap.group.element.target.modifierExtension"
        },
        "comment": {
            name: "comment",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A description of status/issues in mapping that conveys additional information not represented in the structured data.",
            path: "ConceptMap.group.element.target.comment"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ConceptMap.group.element.target.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ConceptMapGroupElementTarget record {|
    ConceptMapGroupElementTargetEquivalence equivalence;
    Extension[] extension?;
    code code?;
    ConceptMapGroupElementTargetDependsOn[] dependsOn?;
    string display?;
    Extension[] modifierExtension?;
    string comment?;
    string id?;
|};

# FHIR ConceptMapGroupElementTargetDependsOn datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + system - An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).
# + display - The display for the code. The display is only provided to help editors when editing the concept map.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + property - A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somewhere that is labeled to correspond with a code system property.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + value - Identity (code or path) or the element/item/ValueSet/text that the map depends on / refers to.
@DataTypeDefinition {
    name: "ConceptMapGroupElementTargetDependsOn",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ConceptMap.group.element.target.dependsOn.extension"
        },
        "system": {
            name: "system",
            dataType: canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).",
            path: "ConceptMap.group.element.target.dependsOn.system"
        },
        "display": {
            name: "display",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The display for the code. The display is only provided to help editors when editing the concept map.",
            path: "ConceptMap.group.element.target.dependsOn.display"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ConceptMap.group.element.target.dependsOn.modifierExtension"
        },
        "property": {
            name: "property",
            dataType: uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somewhere that is labeled to correspond with a code system property.",
            path: "ConceptMap.group.element.target.dependsOn.property"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ConceptMap.group.element.target.dependsOn.id"
        },
        "value": {
            name: "value",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Identity (code or path) or the element/item/ValueSet/text that the map depends on / refers to.",
            path: "ConceptMap.group.element.target.dependsOn.value"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ConceptMapGroupElementTargetDependsOn record {|
    Extension[] extension?;
    canonical system?;
    string display?;
    Extension[] modifierExtension?;
    uri property;
    string id?;
    string value;
|};

# FHIR ConceptMapGroupElement datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Identity (code or path) or the element/item being mapped.
# + display - The display for the code. The display is only provided to help editors when editing the concept map.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + target - A concept from the target value set that this concept maps to.
@DataTypeDefinition {
    name: "ConceptMapGroupElement",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ConceptMap.group.element.extension"
        },
        "code": {
            name: "code",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identity (code or path) or the element/item being mapped.",
            path: "ConceptMap.group.element.code"
        },
        "display": {
            name: "display",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The display for the code. The display is only provided to help editors when editing the concept map.",
            path: "ConceptMap.group.element.display"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ConceptMap.group.element.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ConceptMap.group.element.id"
        },
        "target": {
            name: "target",
            dataType: ConceptMapGroupElementTarget,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A concept from the target value set that this concept maps to.",
            path: "ConceptMap.group.element.target"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type ConceptMapGroupElement record {|
    Extension[] extension?;
    code code?;
    string display?;
    Extension[] modifierExtension?;
    string id?;
    ConceptMapGroupElementTarget[] target?;
|};

# ConceptMapGroupUnmappedMode enum
public enum ConceptMapGroupUnmappedMode {
   CODE_MODE_PROVIDED = "provided",
   CODE_MODE_FIXED = "fixed",
   CODE_MODE_OTHER_MAP = "other-map"
}

# ConceptMapStatus enum
public enum ConceptMapStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

