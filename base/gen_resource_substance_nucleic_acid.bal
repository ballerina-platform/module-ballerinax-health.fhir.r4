// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.


public const string PROFILE_BASE_SUBSTANCENUCLEICACID = "http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid";
public const RESOURCE_NAME_SUBSTANCENUCLEICACID = "SubstanceNucleicAcid";

# FHIR SubstanceNucleicAcid resource record.
#
# + resourceType - The type of the resource describes
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + subunit - Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.
# + numberOfSubunits - The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + oligoNucleotideType - (TBC).
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + areaOfHybridisation - The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”.
# + sequenceType - The type of the sequence shall be specified based on a controlled vocabulary.
@ResourceDefinition {
    resourceType: "SubstanceNucleicAcid",
    baseType: DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid",
    elements: {
        "extension" : {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceNucleicAcid.extension"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceNucleicAcid.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: code,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceNucleicAcid.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "subunit" : {
            name: "subunit",
            dataType: SubstanceNucleicAcidSubunit,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceNucleicAcid.subunit"
        },
        "numberOfSubunits" : {
            name: "numberOfSubunits",
            dataType: integer,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceNucleicAcid.numberOfSubunits"
        },
        "contained" : {
            name: "contained",
            dataType: Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceNucleicAcid.contained"
        },
        "meta" : {
            name: "meta",
            dataType: Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceNucleicAcid.meta"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceNucleicAcid.implicitRules"
        },
        "oligoNucleotideType" : {
            name: "oligoNucleotideType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceNucleicAcid.oligoNucleotideType"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceNucleicAcid.id"
        },
        "text" : {
            name: "text",
            dataType: Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceNucleicAcid.text"
        },
        "areaOfHybridisation" : {
            name: "areaOfHybridisation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceNucleicAcid.areaOfHybridisation"
        },
        "sequenceType" : {
            name: "sequenceType",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceNucleicAcid.sequenceType"
        }
    },
    serializers: {
        'xml: fhirResourceXMLSerializer,
        'json: fhirResourceJsonSerializer
    }
}
public type SubstanceNucleicAcid record {|
    *DomainResource;

    RESOURCE_NAME_SUBSTANCENUCLEICACID resourceType = RESOURCE_NAME_SUBSTANCENUCLEICACID;

    BaseSubstanceNucleicAcidMeta meta = {
        profile : [PROFILE_BASE_SUBSTANCENUCLEICACID]
    };
    Extension[] extension?;
    Extension[] modifierExtension?;
    code language?;
    SubstanceNucleicAcidSubunit[] subunit?;
    integer numberOfSubunits?;
    Resource[] contained?;
    uri implicitRules?;
    CodeableConcept oligoNucleotideType?;
    string id?;
    Narrative text?;
    string areaOfHybridisation?;
    CodeableConcept sequenceType?;
|};

@DataTypeDefinition {
    name: "BaseSubstanceNucleicAcidMeta",
    baseType: Meta,
    elements: {},
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type BaseSubstanceNucleicAcidMeta record {|
    *Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    id versionId?;
    instant lastUpdated?;
    uri 'source?;
    canonical[] profile = ["http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid"];
    Coding[] security?;
    Coding[] tag?;
|};

# FHIR SubstanceNucleicAcidSubunitSugar datatype record.
#
# + identifier - The Substance ID of the sugar or sugar-like component that make up the nucleotide.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + residueSite - The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The name of the sugar or sugar-like component that make up the nucleotide.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "SubstanceNucleicAcidSubunitSugar",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "The Substance ID of the sugar or sugar-like component that make up the nucleotide.",
            path: "SubstanceNucleicAcid.subunit.sugar.identifier"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceNucleicAcid.subunit.sugar.extension"
        },
        "residueSite": {
            name: "residueSite",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.",
            path: "SubstanceNucleicAcid.subunit.sugar.residueSite"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceNucleicAcid.subunit.sugar.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The name of the sugar or sugar-like component that make up the nucleotide.",
            path: "SubstanceNucleicAcid.subunit.sugar.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceNucleicAcid.subunit.sugar.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceNucleicAcidSubunitSugar record {|
    Identifier identifier?;
    Extension[] extension?;
    string residueSite?;
    Extension[] modifierExtension?;
    string name?;
    string id?;
|};

# FHIR SubstanceNucleicAcidSubunitLinkage datatype record.
#
# + identifier - Each linkage will be registered as a fragment and have an ID.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + connectivity - The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.
# + residueSite - Residues shall be captured as described in 5.3.6.8.3.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@DataTypeDefinition {
    name: "SubstanceNucleicAcidSubunitLinkage",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "Each linkage will be registered as a fragment and have an ID.",
            path: "SubstanceNucleicAcid.subunit.linkage.identifier"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceNucleicAcid.subunit.linkage.extension"
        },
        "connectivity": {
            name: "connectivity",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.",
            path: "SubstanceNucleicAcid.subunit.linkage.connectivity"
        },
        "residueSite": {
            name: "residueSite",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Residues shall be captured as described in 5.3.6.8.3.",
            path: "SubstanceNucleicAcid.subunit.linkage.residueSite"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceNucleicAcid.subunit.linkage.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.",
            path: "SubstanceNucleicAcid.subunit.linkage.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceNucleicAcid.subunit.linkage.id"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceNucleicAcidSubunitLinkage record {|
    Identifier identifier?;
    Extension[] extension?;
    string connectivity?;
    string residueSite?;
    Extension[] modifierExtension?;
    string name?;
    string id?;
|};

# FHIR SubstanceNucleicAcidSubunit datatype record.
#
# + sequence - Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + threePrime - The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + fivePrime - The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.
# + length - The length of the sequence shall be captured.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + linkage - The linkages between sugar residues will also be captured.
# + subunit - Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
# + sugar - 5.3.6.8.1 Sugar ID (Mandatory).
# + sequenceAttachment - (TBC).
@DataTypeDefinition {
    name: "SubstanceNucleicAcidSubunit",
    baseType: (),
    elements: {
        "sequence": {
            name: "sequence",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.",
            path: "SubstanceNucleicAcid.subunit.sequence"
        },
        "extension": {
            name: "extension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceNucleicAcid.subunit.extension"
        },
        "threePrime": {
            name: "threePrime",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.",
            path: "SubstanceNucleicAcid.subunit.threePrime"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceNucleicAcid.subunit.modifierExtension"
        },
        "fivePrime": {
            name: "fivePrime",
            dataType: CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.",
            path: "SubstanceNucleicAcid.subunit.fivePrime"
        },
        "length": {
            name: "length",
            dataType: integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The length of the sequence shall be captured.",
            path: "SubstanceNucleicAcid.subunit.length"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceNucleicAcid.subunit.id"
        },
        "linkage": {
            name: "linkage",
            dataType: SubstanceNucleicAcidSubunitLinkage,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The linkages between sugar residues will also be captured.",
            path: "SubstanceNucleicAcid.subunit.linkage"
        },
        "subunit": {
            name: "subunit",
            dataType: integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.",
            path: "SubstanceNucleicAcid.subunit.subunit"
        },
        "sugar": {
            name: "sugar",
            dataType: SubstanceNucleicAcidSubunitSugar,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "5.3.6.8.1 Sugar ID (Mandatory).",
            path: "SubstanceNucleicAcid.subunit.sugar"
        },
        "sequenceAttachment": {
            name: "sequenceAttachment",
            dataType: Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "(TBC).",
            path: "SubstanceNucleicAcid.subunit.sequenceAttachment"
        }
    },
    serializers: {
        'xml: complexDataTypeXMLSerializer,
        'json: complexDataTypeJsonSerializer
    }
}
public type SubstanceNucleicAcidSubunit record {|
    string sequence?;
    Extension[] extension?;
    CodeableConcept threePrime?;
    Extension[] modifierExtension?;
    CodeableConcept fivePrime?;
    integer length?;
    string id?;
    SubstanceNucleicAcidSubunitLinkage[] linkage?;
    integer subunit?;
    SubstanceNucleicAcidSubunitSugar[] sugar?;
    Attachment sequenceAttachment?;
|};

