// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.


# Terminology processor instance
public final TerminologyProcessor terminologyProcessor = new();

# FHIR registry instance
public final FHIRRegistry fhirRegistry = new();

# Modifier to Search parameter compatibility mapping
final readonly & ModifierMap SEARCH_PARAM_MODIFIER_MAP = {
    modifierTypeMapping: {
        "above" : [REFERENCE, TOKEN, URI],
        "below" : [REFERENCE, TOKEN, URI],
        "code-text" : [REFERENCE, TOKEN],
        "contains" : [STRING, URI],
        "exact": [STRING],
        "identifier": [REFERENCE],
        "in": [TOKEN],
        "missing": [DATE, NUMBER, QUANTITY, REFERENCE, STRING, TOKEN, URI],
        "not": [TOKEN],
        "not-in": [REFERENCE, TOKEN],
        "of-type": [TOKEN],
        "text": [REFERENCE, TOKEN, STRING],
        "text-advanced": [REFERENCE, TOKEN]
    }
};

# Search Parameters for all resources
final readonly & map<CommonSearchParameterDefinition> COMMON_SEARCH_PARAMETERS = {
    "_id": {
            name: "_id",
            'type: TOKEN,
            base: ["Resource"],
            expression: "Resource.id",
            default: (),
            effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
            preProcessor: (),
            postProcessor:  ()
    },
    "_lastUpdated": {
        name: "_lastUpdated",
        'type: DATE,
        base: ["Resource"],
        expression: "Resource.meta.lastUpdated",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_tag": {
        name: "_tag",
        'type: TOKEN,
        base: ["Resource"],
        expression: "Resource.meta.tag",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_profile": {
        name: "_profile",
        'type: URI,
        base: ["Resource"],
        expression: "Resource.meta.profile",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: _profileSearchParamPreProcessor,
        postProcessor:  ()
    },
    "_security": {
        name: "_security",
        'type: TOKEN,
        base: ["Resource"],
        expression: "Resource.meta.security",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_source": {
        name: "_source",
        'type: URI,
        base: ["Resource"],
        expression: "Resource.meta.source",
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_text": {
        name: "_text",
        'type: STRING,
        base: ["DomainResource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_content": {
        name: "_content",
        'type: STRING,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_list": {
        name: "_list",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_has": {
        name: "_has",
        'type: COMPOSITE,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    },
    "_type": {
        name: "_type",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_RESOURCE_COMMON,
        preProcessor: (),
        postProcessor:  ()
    }
};

# Search Parameter to control search results
final readonly & map<CommonSearchParameterDefinition> CONTROL_SEARCH_PARAMETERS = {
    "_sort": {
        name: "_sort",
        'type: STRING,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_count": {
        name: "_count",
        'type: NUMBER,
        base: ["Resource"],
        expression: (),
        default: 10,
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: paginationSearchParamPreProcessor,
        postProcessor: paginationSearchParamPostProcessor
    },
    "_offset": {
        name: "_offset",
        'type: NUMBER,
        base: ["Resource"],
        expression: (),
        default: 0,
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: paginationSearchParamPreProcessor,
        postProcessor: paginationSearchParamPostProcessor
    },
    "_include": {
        name: "_include",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_revinclude": {
        name: "_revinclude",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_summary": {
        name: "_summary",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_elements": {
        name: "_elements",
        'type: STRING,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_contained": {
        name: "_contained",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    },
    "_containedType": {
        name: "_containedType",
        'type: TOKEN,
        base: ["Resource"],
        expression: (),
        default: (),
        effectiveLevel: SEARCH_PARAM_CATEGORY_SEARCH_RESULT,
        preProcessor: (),
        postProcessor:  ()
    }
};

//Number of search params in BASE_IG_SEARCH_PARAMS_1  = 100
final readonly & map<FHIRSearchParameterDefinition[]> BASE_IG_SEARCH_PARAMS_1 = {
    "parent": [
        {
            name: "parent",
            'type: REFERENCE,
            base: ["Specimen","DeviceMetric","DeviceDefinition","MessageDefinition"],
            expression: "MessageDefinition.parent | DeviceDefinition.parentDevice | DeviceMetric.parent | Specimen.parent"
        }
    ],
    "modality": [
        {
            name: "modality",
            'type: TOKEN,
            base: ["ImagingStudy","Media"],
            expression: "Media.modality | ImagingStudy.series.modality"
        }
    ],
    "setting": [
        {
            name: "setting",
            'type: TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.context.practiceSetting"
        }
    ],
    "_list": [
        {
            name: "_list",
            'type: STRING,
            base: ["Resource"],
            expression: ""
        }
    ],
    "path": [
        {
            name: "path",
            'type: TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.snapshot.element.path | StructureDefinition.differential.element.path"
        }
    ],
    "code-value-date": [
        {
            name: "code-value-date",
            'type: COMPOSITE,
            base: ["Observation"],
            expression: "Observation"
        }
    ],
    "connection-type": [
        {
            name: "connection-type",
            'type: TOKEN,
            base: ["Endpoint"],
            expression: "Endpoint.connectionType"
        }
    ],
    "instantiates-uri": [
        {
            name: "instantiates-uri",
            'type: URI,
            base: ["CarePlan","Communication","Procedure","NutritionOrder","DeviceRequest","RequestGroup","ServiceRequest","FamilyMemberHistory"],
            expression: "FamilyMemberHistory.instantiatesUri | ServiceRequest.instantiatesUri | RequestGroup.instantiatesUri | DeviceRequest.instantiatesUri | NutritionOrder.instantiatesUri | Procedure.instantiatesUri | Communication.instantiatesUri | CarePlan.instantiatesUri"
        }
    ],
    "near": [
        {
            name: "near",
            'type: SPECIAL,
            base: ["Location"],
            expression: "Location.position"
        }
    ],
    "item-udi": [
        {
            name: "item-udi",
            'type: REFERENCE,
            base: ["ExplanationOfBenefit","Claim"],
            expression: "Claim.item.udi | ExplanationOfBenefit.item.udi"
        }
    ],
    "value-string": [
        {
            name: "value-string",
            'type: STRING,
            base: ["Observation"],
            expression: "(Observation.value as string) | (Observation.value as CodeableConcept).text"
        }
    ],
    "finding-code": [
        {
            name: "finding-code",
            'type: TOKEN,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.finding.itemCodeableConcept"
        }
    ],
    "general-practitioner": [
        {
            name: "general-practitioner",
            'type: REFERENCE,
            base: ["Patient"],
            expression: "Patient.generalPractitioner"
        }
    ],
    "active": [
        {
            name: "active",
            'type: TOKEN,
            base: ["HealthcareService","RelatedPerson","Schedule","Patient","OrganizationAffiliation","Organization","PractitionerRole","Practitioner"],
            expression: "Practitioner.active | PractitionerRole.active | Organization.active | OrganizationAffiliation.active | Patient.active | Schedule.active | RelatedPerson.active | HealthcareService.active"
        }
    ],
    "version": [
        {
            name: "version",
            'type: TOKEN,
            base: ["ResearchDefinition","PlanDefinition","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","Evidence","Library","ChargeItemDefinition","Questionnaire","Measure","ExampleScenario","TestScript","ResearchElementDefinition","EventDefinition","EvidenceVariable"],
            expression: "EvidenceVariable.version | EventDefinition.version | ResearchElementDefinition.version | TestScript.version | ExampleScenario.version | Measure.version | Questionnaire.version | ChargeItemDefinition.version | Library.version | Evidence.version | CapabilityStatement.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | GraphDefinition.version | ImplementationGuide.version | MessageDefinition.version | OperationDefinition.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | TerminologyCapabilities.version | ValueSet.version | PlanDefinition.version | ResearchDefinition.version"
        }
    ],
    "address-postalcode": [
        {
            name: "address-postalcode",
            'type: STRING,
            base: ["Patient","Person","Practitioner","RelatedPerson","Organization","Location","InsurancePlan"],
            expression: "InsurancePlan.contact.address.postalCode | Location.address.postalCode | Organization.address.postalCode | Patient.address.postalCode | Person.address.postalCode | Practitioner.address.postalCode | RelatedPerson.address.postalCode"
        }
    ],
    "route": [
        {
            name: "route",
            'type: TOKEN,
            base: ["AllergyIntolerance"],
            expression: "AllergyIntolerance.reaction.exposureRoute"
        }
    ],
    "chromosome-variant-coordinate": [
        {
            name: "chromosome-variant-coordinate",
            'type: COMPOSITE,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.variant"
        }
    ],
    "sender": [
        {
            name: "sender",
            'type: REFERENCE,
            base: ["CommunicationRequest","MessageHeader","Communication"],
            expression: "Communication.sender | MessageHeader.sender | CommunicationRequest.sender"
        }
    ],
    "domain": [
        {
            name: "domain",
            'type: REFERENCE,
            base: ["Contract"],
            expression: "Contract.domain"
        }
    ],
    "response-id": [
        {
            name: "response-id",
            'type: TOKEN,
            base: ["MessageHeader"],
            expression: "MessageHeader.response.identifier"
        }
    ],
    "signature-type": [
        {
            name: "signature-type",
            'type: TOKEN,
            base: ["Provenance"],
            expression: "Provenance.signature.type"
        }
    ],
    "role": [
        {
            name: "role",
            'type: TOKEN,
            base: ["PractitionerRole","OrganizationAffiliation"],
            expression: "OrganizationAffiliation.code | PractitionerRole.code"
        }
    ],
    "authoredon": [
        {
            name: "authoredon",
            'type: DATE,
            base: ["MedicationRequest"],
            expression: "MedicationRequest.authoredOn"
        }
    ],
    "target-system": [
        {
            name: "target-system",
            'type: URI,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.target"
        }
    ],
    "characteristic": [
        {
            name: "characteristic",
            'type: TOKEN,
            base: ["HealthcareService","Group"],
            expression: "Group.characteristic.code | HealthcareService.characteristic"
        }
    ],
    "entered-date": [
        {
            name: "entered-date",
            'type: DATE,
            base: ["ChargeItem"],
            expression: "ChargeItem.enteredDate"
        }
    ],
    "result": [
        {
            name: "result",
            'type: REFERENCE,
            base: ["DiagnosticReport"],
            expression: "DiagnosticReport.result"
        },
        {
            name: "result",
            'type: TOKEN,
            base: ["TestReport"],
            expression: "TestReport.result"
        }
    ],
    "composition": [
        {
            name: "composition",
            'type: REFERENCE,
            base: ["Bundle"],
            expression: "Bundle.entry[0].resource"
        }
    ],
    "insurer": [
        {
            name: "insurer",
            'type: REFERENCE,
            base: ["Claim","ClaimResponse","CoverageEligibilityResponse"],
            expression: "CoverageEligibilityResponse.insurer | ClaimResponse.insurer | Claim.insurer"
        }
    ],
    "monitoring-program-name": [
        {
            name: "monitoring-program-name",
            'type: TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.monitoringProgram.name"
        }
    ],
    "target-code": [
        {
            name: "target-code",
            'type: TOKEN,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.element.target.code"
        }
    ],
    "policy": [
        {
            name: "policy",
            'type: URI,
            base: ["AuditEvent"],
            expression: "AuditEvent.agent.policy"
        }
    ],
    "related-id": [
        {
            name: "related-id",
            'type: TOKEN,
            base: ["DocumentManifest","Composition"],
            expression: "(Composition.relatesTo.target as Identifier) | DocumentManifest.related.identifier"
        }
    ],
    "address": [
        {
            name: "address",
            'type: STRING,
            base: ["InsurancePlan","Organization","Location","Patient","Person","Practitioner","RelatedPerson","AuditEvent"],
            expression: "AuditEvent.agent.network.address | Patient.address | Person.address | Practitioner.address | RelatedPerson.address | Location.address | Organization.address | InsurancePlan.contact.address"
        }
    ],
    "referenceseqid-variant-coordinate": [
        {
            name: "referenceseqid-variant-coordinate",
            'type: COMPOSITE,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.variant"
        }
    ],
    "sex": [
        {
            name: "sex",
            'type: TOKEN,
            base: ["FamilyMemberHistory"],
            expression: "FamilyMemberHistory.sex"
        }
    ],
    "component-value-quantity": [
        {
            name: "component-value-quantity",
            'type: QUANTITY,
            base: ["Observation"],
            expression: "(Observation.component.value as Quantity) | (Observation.component.value as SampledData)"
        }
    ],
    "episode-of-care": [
        {
            name: "episode-of-care",
            'type: REFERENCE,
            base: ["Encounter"],
            expression: "Encounter.episodeOfCare"
        }
    ],
    "onset": [
        {
            name: "onset",
            'type: DATE,
            base: ["AllergyIntolerance"],
            expression: "AllergyIntolerance.reaction.onset"
        }
    ],
    "actor": [
        {
            name: "actor",
            'type: REFERENCE,
            base: ["Consent","AppointmentResponse","Appointment","Schedule"],
            expression: "Schedule.actor | Appointment.participant.actor | AppointmentResponse.actor | Consent.provision.actor.reference"
        }
    ],
    "input-profile": [
        {
            name: "input-profile",
            'type: REFERENCE,
            base: ["OperationDefinition"],
            expression: "OperationDefinition.inputProfile"
        }
    ],
    "component": [
        {
            name: "component",
            'type: REFERENCE,
            base: ["SearchParameter"],
            expression: "SearchParameter.component.definition"
        }
    ],
    "source-code": [
        {
            name: "source-code",
            'type: TOKEN,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.element.code"
        }
    ],
    "subject-type": [
        {
            name: "subject-type",
            'type: TOKEN,
            base: ["Questionnaire"],
            expression: "Questionnaire.subjectType"
        }
    ],
    "stage": [
        {
            name: "stage",
            'type: TOKEN,
            base: ["Condition"],
            expression: "Condition.stage.summary"
        }
    ],
    "series": [
        {
            name: "series",
            'type: TOKEN,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.series.uid"
        },
        {
            name: "series",
            'type: STRING,
            base: ["Immunization"],
            expression: "Immunization.protocolApplied.series"
        }
    ],
    "information": [
        {
            name: "information",
            'type: REFERENCE,
            base: ["ImmunizationRecommendation"],
            expression: "ImmunizationRecommendation.recommendation.supportingPatientInformation"
        }
    ],
    "notes": [
        {
            name: "notes",
            'type: STRING,
            base: ["List"],
            expression: "List.note.text"
        }
    ],
    "service-category": [
        {
            name: "service-category",
            'type: TOKEN,
            base: ["Appointment","Schedule","Slot","HealthcareService"],
            expression: "HealthcareService.category | Slot.serviceCategory | Schedule.serviceCategory | Appointment.serviceCategory"
        }
    ],
    "evidence": [
        {
            name: "evidence",
            'type: TOKEN,
            base: ["Condition"],
            expression: "Condition.evidence.code"
        }
    ],
    "criticality": [
        {
            name: "criticality",
            'type: TOKEN,
            base: ["AllergyIntolerance"],
            expression: "AllergyIntolerance.criticality"
        }
    ],
    "language": [
        {
            name: "language",
            'type: TOKEN,
            base: ["CodeSystem","DocumentReference","Patient"],
            expression: "Patient.communication.language | DocumentReference.content.attachment.language | CodeSystem.concept.designation.language"
        }
    ],
    "payment-date": [
        {
            name: "payment-date",
            'type: DATE,
            base: ["ClaimResponse"],
            expression: "ClaimResponse.payment.date"
        }
    ],
    "component-code-value-quantity": [
        {
            name: "component-code-value-quantity",
            'type: COMPOSITE,
            base: ["Observation"],
            expression: "Observation.component"
        }
    ],
    "payload": [
        {
            name: "payload",
            'type: TOKEN,
            base: ["Subscription"],
            expression: "Subscription.channel.payload"
        }
    ],
    "effective-time": [
        {
            name: "effective-time",
            'type: DATE,
            base: ["MedicationAdministration"],
            expression: "MedicationAdministration.effective"
        }
    ],
    "contact": [
        {
            name: "contact",
            'type: TOKEN,
            base: ["Subscription"],
            expression: "Subscription.contact"
        },
        {
            name: "contact",
            'type: STRING,
            base: ["NamingSystem"],
            expression: "NamingSystem.contact.name"
        }
    ],
    "enterer": [
        {
            name: "enterer",
            'type: REFERENCE,
            base: ["Claim","ExplanationOfBenefit","ChargeItem","CoverageEligibilityRequest","MessageHeader"],
            expression: "MessageHeader.enterer | CoverageEligibilityRequest.enterer | ChargeItem.enterer | ExplanationOfBenefit.enterer | Claim.enterer"
        }
    ],
    "location-period": [
        {
            name: "location-period",
            'type: DATE,
            base: ["Encounter"],
            expression: "Encounter.location.period"
        }
    ],
    "exclude": [
        {
            name: "exclude",
            'type: TOKEN,
            base: ["Group"],
            expression: "Group.characteristic.exclude"
        }
    ],
    "care-manager": [
        {
            name: "care-manager",
            'type: REFERENCE,
            base: ["EpisodeOfCare"],
            expression: "EpisodeOfCare.careManager.where(resolve() is Practitioner)"
        }
    ],
    "manifestation": [
        {
            name: "manifestation",
            'type: TOKEN,
            base: ["AllergyIntolerance"],
            expression: "AllergyIntolerance.reaction.manifestation"
        }
    ],
    "part-status": [
        {
            name: "part-status",
            'type: TOKEN,
            base: ["Appointment","AppointmentResponse"],
            expression: "AppointmentResponse.participantStatus | Appointment.participant.status"
        }
    ],
    "content-mode": [
        {
            name: "content-mode",
            'type: TOKEN,
            base: ["CodeSystem"],
            expression: "CodeSystem.content"
        }
    ],
    "appointment-type": [
        {
            name: "appointment-type",
            'type: TOKEN,
            base: ["Slot","Appointment"],
            expression: "Appointment.appointmentType | Slot.appointmentType"
        }
    ],
    "reason-given": [
        {
            name: "reason-given",
            'type: TOKEN,
            base: ["MedicationAdministration"],
            expression: "MedicationAdministration.reasonCode"
        }
    ],
    "dose-status": [
        {
            name: "dose-status",
            'type: TOKEN,
            base: ["ImmunizationEvaluation"],
            expression: "ImmunizationEvaluation.doseStatus"
        }
    ],
    "beneficiary": [
        {
            name: "beneficiary",
            'type: REFERENCE,
            base: ["Coverage"],
            expression: "Coverage.beneficiary"
        }
    ],
    "authority": [
        {
            name: "authority",
            'type: REFERENCE,
            base: ["Contract"],
            expression: "Contract.authority"
        }
    ],
    "subdetail-udi": [
        {
            name: "subdetail-udi",
            'type: REFERENCE,
            base: ["ExplanationOfBenefit","Claim"],
            expression: "Claim.item.detail.subDetail.udi | ExplanationOfBenefit.item.detail.subDetail.udi"
        }
    ],
    "policy-holder": [
        {
            name: "policy-holder",
            'type: REFERENCE,
            base: ["Coverage"],
            expression: "Coverage.policyHolder"
        }
    ],
    "onset-info": [
        {
            name: "onset-info",
            'type: STRING,
            base: ["Condition"],
            expression: "Condition.onset.as(string)"
        }
    ],
    "lot-number": [
        {
            name: "lot-number",
            'type: TOKEN,
            base: ["Medication"],
            expression: "Medication.batch.lotNumber"
        },
        {
            name: "lot-number",
            'type: STRING,
            base: ["Immunization"],
            expression: "Immunization.lotNumber"
        }
    ],
    "context-type-value": [
        {
            name: "context-type-value",
            'type: COMPOSITE,
            base: ["EvidenceVariable","Measure","TestScript","ExampleScenario","EventDefinition","Library","ResearchDefinition","ResearchElementDefinition","ChargeItemDefinition","Questionnaire","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","PlanDefinition","Evidence"],
            expression: "Evidence.useContext | PlanDefinition.useContext | CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext | Questionnaire.useContext | ChargeItemDefinition.useContext | ResearchElementDefinition.useContext | ResearchDefinition.useContext | Library.useContext | EventDefinition.useContext | ExampleScenario.useContext | TestScript.useContext | Measure.useContext | EvidenceVariable.useContext"
        }
    ],
    "component-data-absent-reason": [
        {
            name: "component-data-absent-reason",
            'type: TOKEN,
            base: ["Observation"],
            expression: "Observation.component.dataAbsentReason"
        }
    ],
    "medium": [
        {
            name: "medium",
            'type: TOKEN,
            base: ["CommunicationRequest","Communication"],
            expression: "Communication.medium | CommunicationRequest.medium"
        }
    ],
    "title": [
        {
            name: "title",
            'type: STRING,
            base: ["Questionnaire","List","TestScript","PlanDefinition","CapabilityStatement","CodeSystem","ConceptMap","ImplementationGuide","MessageDefinition","OperationDefinition","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","EvidenceVariable","Library","ResearchDefinition","Evidence","Measure","ChargeItemDefinition","ResearchElementDefinition","Composition","EventDefinition","ResearchStudy"],
            expression: "ResearchStudy.title | EventDefinition.title | Composition.title | ResearchElementDefinition.title | ChargeItemDefinition.title | Measure.title | Evidence.title | ResearchDefinition.title | Library.title | EvidenceVariable.title | CapabilityStatement.title | CodeSystem.title | ConceptMap.title | ImplementationGuide.title | MessageDefinition.title | OperationDefinition.title | StructureDefinition.title | StructureMap.title | TerminologyCapabilities.title | ValueSet.title | PlanDefinition.title | TestScript.title | List.title | Questionnaire.title"
        }
    ],
    "collector": [
        {
            name: "collector",
            'type: REFERENCE,
            base: ["Specimen"],
            expression: "Specimen.collection.collector"
        }
    ],
    "administered-by": [
        {
            name: "administered-by",
            'type: REFERENCE,
            base: ["InsurancePlan"],
            expression: "InsurancePlan.administeredBy"
        }
    ],
    "code-value-string": [
        {
            name: "code-value-string",
            'type: COMPOSITE,
            base: ["Observation"],
            expression: "Observation"
        }
    ],
    "related": [
        {
            name: "related",
            'type: REFERENCE,
            base: ["DocumentReference"],
            expression: "DocumentReference.context.related"
        }
    ],
    "provider": [
        {
            name: "provider",
            'type: REFERENCE,
            base: ["ExplanationOfBenefit","CoverageEligibilityRequest","NutritionOrder","Claim","PaymentNotice"],
            expression: "PaymentNotice.provider | Claim.provider | NutritionOrder.orderer | CoverageEligibilityRequest.provider | ExplanationOfBenefit.provider"
        }
    ],
    "responsible": [
        {
            name: "responsible",
            'type: REFERENCE,
            base: ["MessageHeader"],
            expression: "MessageHeader.responsible"
        },
        {
            name: "responsible",
            'type: STRING,
            base: ["NamingSystem"],
            expression: "NamingSystem.responsible"
        }
    ],
    "scope": [
        {
            name: "scope",
            'type: TOKEN,
            base: ["Consent"],
            expression: "Consent.scope"
        }
    ],
    "activity-date": [
        {
            name: "activity-date",
            'type: DATE,
            base: ["CarePlan"],
            expression: "CarePlan.activity.detail.scheduled"
        }
    ],
    "class": [
        {
            name: "class",
            'type: TOKEN,
            base: ["Encounter"],
            expression: "Encounter.class"
        }
    ],
    "owner": [
        {
            name: "owner",
            'type: REFERENCE,
            base: ["Task","Account"],
            expression: "Account.owner | Task.owner"
        }
    ],
    "recorded-date": [
        {
            name: "recorded-date",
            'type: DATE,
            base: ["Condition"],
            expression: "Condition.recordedDate"
        }
    ],
    "recorder": [
        {
            name: "recorder",
            'type: REFERENCE,
            base: ["AdverseEvent","AllergyIntolerance"],
            expression: "AllergyIntolerance.recorder | AdverseEvent.recorder"
        }
    ],
    "event-date": [
        {
            name: "event-date",
            'type: DATE,
            base: ["DeviceRequest"],
            expression: "(DeviceRequest.occurrence as dateTime) | (DeviceRequest.occurrence as Period)"
        }
    ],
    "length": [
        {
            name: "length",
            'type: QUANTITY,
            base: ["Encounter"],
            expression: "Encounter.length"
        }
    ],
    "vaccine-type": [
        {
            name: "vaccine-type",
            'type: TOKEN,
            base: ["ImmunizationRecommendation"],
            expression: "ImmunizationRecommendation.recommendation.vaccineCode"
        }
    ],
    "recorded": [
        {
            name: "recorded",
            'type: DATE,
            base: ["Provenance"],
            expression: "Provenance.recorded"
        }
    ],
    "message": [
        {
            name: "message",
            'type: REFERENCE,
            base: ["Bundle"],
            expression: "Bundle.entry[0].resource"
        }
    ],
    "window-start": [
        {
            name: "window-start",
            'type: NUMBER,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.referenceSeq.windowStart"
        }
    ],
    "whenhandedover": [
        {
            name: "whenhandedover",
            'type: DATE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.whenHandedOver"
        }
    ],
    "schedule": [
        {
            name: "schedule",
            'type: REFERENCE,
            base: ["Slot"],
            expression: "Slot.schedule"
        }
    ],
    "referrer": [
        {
            name: "referrer",
            'type: REFERENCE,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.referrer"
        }
    ],
    "form": [
        {
            name: "form",
            'type: TOKEN,
            base: ["Medication"],
            expression: "Medication.form"
        }
    ]    
};
//Number of search params in BASE_IG_SEARCH_PARAMS_2  = 100
final readonly & map<FHIRSearchParameterDefinition[]> BASE_IG_SEARCH_PARAMS_2 = {
    "service": [
        {
            name: "service",
            'type: REFERENCE,
            base: ["OrganizationAffiliation","PractitionerRole","ChargeItem"],
            expression: "ChargeItem.service | PractitionerRole.healthcareService | OrganizationAffiliation.healthcareService"
        }
    ],
    "ext-context": [
        {
            name: "ext-context",
            'type: TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.context.type"
        }
    ],
    "onset-age": [
        {
            name: "onset-age",
            'type: QUANTITY,
            base: ["Condition"],
            expression: "Condition.onset.as(Age) | Condition.onset.as(Range)"
        }
    ],
    "agent-role": [
        {
            name: "agent-role",
            'type: TOKEN,
            base: ["AuditEvent","Provenance"],
            expression: "Provenance.agent.role | AuditEvent.agent.role"
        }
    ],
    "family": [
        {
            name: "family",
            'type: STRING,
            base: ["Patient","Practitioner"],
            expression: "Patient.name.family | Practitioner.name.family"
        }
    ],
    "prior-request": [
        {
            name: "prior-request",
            'type: REFERENCE,
            base: ["DeviceRequest"],
            expression: "DeviceRequest.priorRequest"
        }
    ],
    "results-interpreter": [
        {
            name: "results-interpreter",
            'type: REFERENCE,
            base: ["DiagnosticReport"],
            expression: "DiagnosticReport.resultsInterpreter"
        }
    ],
    "basedon": [
        {
            name: "basedon",
            'type: REFERENCE,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.basedOn"
        }
    ],
    "empty-reason": [
        {
            name: "empty-reason",
            'type: TOKEN,
            base: ["List"],
            expression: "List.emptyReason"
        }
    ],
    "source-reference": [
        {
            name: "source-reference",
            'type: REFERENCE,
            base: ["Consent"],
            expression: "Consent.source"
        }
    ],
    "value-concept": [
        {
            name: "value-concept",
            'type: TOKEN,
            base: ["Observation"],
            expression: "(Observation.value as CodeableConcept)"
        }
    ],
    "focus": [
        {
            name: "focus",
            'type: REFERENCE,
            base: ["Observation","MessageHeader","Task"],
            expression: "Task.focus | MessageHeader.focus | Observation.focus"
        },
        {
            name: "focus",
            'type: TOKEN,
            base: ["ResearchStudy","MessageDefinition"],
            expression: "MessageDefinition.focus.code | ResearchStudy.focus"
        }
    ],
    "classification-type": [
        {
            name: "classification-type",
            'type: TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.medicineClassification.type"
        }
    ],
    "principalinvestigator": [
        {
            name: "principalinvestigator",
            'type: REFERENCE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.principalInvestigator"
        }
    ],
    "altid": [
        {
            name: "altid",
            'type: TOKEN,
            base: ["AuditEvent"],
            expression: "AuditEvent.agent.altId"
        }
    ],
    "payee": [
        {
            name: "payee",
            'type: REFERENCE,
            base: ["Claim","ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.payee.party | Claim.payee.party"
        }
    ],
    "source-uri": [
        {
            name: "source-uri",
            'type: URI,
            base: ["MessageHeader"],
            expression: "MessageHeader.source.endpoint"
        },
        {
            name: "source-uri",
            'type: REFERENCE,
            base: ["ConceptMap"],
            expression: "(ConceptMap.source as uri)"
        }
    ],
    "supplier": [
        {
            name: "supplier",
            'type: REFERENCE,
            base: ["SupplyDelivery","SupplyRequest"],
            expression: "SupplyRequest.supplier | SupplyDelivery.supplier"
        }
    ],
    "context": [
        {
            name: "context",
            'type: REFERENCE,
            base: ["MedicationDispense","MedicationStatement","ChargeItem","MedicationAdministration"],
            expression: "MedicationAdministration.context | ChargeItem.context | MedicationStatement.context | MedicationDispense.context"
        },
        {
            name: "context",
            'type: TOKEN,
            base: ["Measure","ExampleScenario","PlanDefinition","EvidenceVariable","ResearchElementDefinition","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","Questionnaire","ResearchDefinition","EventDefinition","ChargeItemDefinition","Composition","Library","TestScript","Evidence"],
            expression: "(Evidence.useContext.value as CodeableConcept) | (TestScript.useContext.value as CodeableConcept) | (Library.useContext.value as CodeableConcept) | Composition.event.code | (ChargeItemDefinition.useContext.value as CodeableConcept) | (EventDefinition.useContext.value as CodeableConcept) | (ResearchDefinition.useContext.value as CodeableConcept) | (Questionnaire.useContext.value as CodeableConcept) | (CapabilityStatement.useContext.value as CodeableConcept) | (CodeSystem.useContext.value as CodeableConcept) | (CompartmentDefinition.useContext.value as CodeableConcept) | (ConceptMap.useContext.value as CodeableConcept) | (GraphDefinition.useContext.value as CodeableConcept) | (ImplementationGuide.useContext.value as CodeableConcept) | (MessageDefinition.useContext.value as CodeableConcept) | (NamingSystem.useContext.value as CodeableConcept) | (OperationDefinition.useContext.value as CodeableConcept) | (SearchParameter.useContext.value as CodeableConcept) | (StructureDefinition.useContext.value as CodeableConcept) | (StructureMap.useContext.value as CodeableConcept) | (TerminologyCapabilities.useContext.value as CodeableConcept) | (ValueSet.useContext.value as CodeableConcept) | (ResearchElementDefinition.useContext.value as CodeableConcept) | (EvidenceVariable.useContext.value as CodeableConcept) | (PlanDefinition.useContext.value as CodeableConcept) | (ExampleScenario.useContext.value as CodeableConcept) | (Measure.useContext.value as CodeableConcept)"
        }
    ],
    "code-value-quantity": [
        {
            name: "code-value-quantity",
            'type: COMPOSITE,
            base: ["Observation"],
            expression: "Observation"
        }
    ],
    "substance-reference": [
        {
            name: "substance-reference",
            'type: REFERENCE,
            base: ["Substance"],
            expression: "(Substance.ingredient.substance as Reference)"
        }
    ],
    "action": [
        {
            name: "action",
            'type: TOKEN,
            base: ["Consent","AuditEvent"],
            expression: "AuditEvent.action | Consent.provision.action"
        }
    ],
    "model": [
        {
            name: "model",
            'type: STRING,
            base: ["Device"],
            expression: "Device.modelNumber"
        }
    ],
    "signer": [
        {
            name: "signer",
            'type: REFERENCE,
            base: ["Contract"],
            expression: "Contract.signer.party"
        }
    ],
    "period": [
        {
            name: "period",
            'type: DATE,
            base: ["Task","Account","Consent","NamingSystem","MeasureReport","DocumentReference","Composition"],
            expression: "Composition.event.period | DocumentReference.context.period | MeasureReport.period | NamingSystem.uniqueId.period | Consent.provision.period | Account.servicePeriod | Task.executionPeriod"
        }
    ],
    "morphology": [
        {
            name: "morphology",
            'type: TOKEN,
            base: ["BodyStructure"],
            expression: "BodyStructure.morphology"
        }
    ],
    "practitioner": [
        {
            name: "practitioner",
            'type: REFERENCE,
            base: ["Encounter","PractitionerRole","AppointmentResponse","Person","Appointment"],
            expression: "Appointment.participant.actor.where(resolve() is Practitioner) | Person.link.target.where(resolve() is Practitioner) | AppointmentResponse.actor.where(resolve() is Practitioner) | PractitionerRole.practitioner | Encounter.participant.individual.where(resolve() is Practitioner)"
        }
    ],
    "classification": [
        {
            name: "classification",
            'type: TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.medicineClassification.classification"
        }
    ],
    "payment-status": [
        {
            name: "payment-status",
            'type: TOKEN,
            base: ["PaymentNotice"],
            expression: "PaymentNotice.paymentStatus"
        }
    ],
    "additive": [
        {
            name: "additive",
            'type: TOKEN,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.enteralFormula.additiveType"
        }
    ],
    "system": [
        {
            name: "system",
            'type: URI,
            base: ["CodeSystem"],
            expression: "CodeSystem.url"
        },
        {
            name: "system",
            'type: TOKEN,
            base: ["OperationDefinition"],
            expression: "OperationDefinition.system"
        }
    ],
    "supplement": [
        {
            name: "supplement",
            'type: TOKEN,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.supplement.type"
        }
    ],
    "security-service": [
        {
            name: "security-service",
            'type: TOKEN,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.rest.security.service"
        }
    ],
    "_source": [
        {
            name: "_source",
            'type: URI,
            base: ["Resource"],
            expression: "Resource.meta.source"
        }
    ],
    "status": [
        {
            name: "status",
            'type: TOKEN,
            base: ["ImmunizationEvaluation","MedicationAdministration","MedicationDispense","MedicationRequest","MedicationStatement","Appointment","Task","EpisodeOfCare","Procedure","MedicationKnowledge","ResearchElementDefinition","Medication","CarePlan","Location","DeviceRequest","SupplyDelivery","QuestionnaireResponse","Claim","DiagnosticReport","DocumentReference","EventDefinition","Endpoint","EnrollmentResponse","EvidenceVariable","Library","SupplyRequest","ResearchSubject","FamilyMemberHistory","List","Composition","Questionnaire","PlanDefinition","Communication","ExampleScenario","ServiceRequest","DocumentManifest","Encounter","MeasureReport","TestScript","Media","InsurancePlan","Contract","Specimen","Substance","CoverageEligibilityRequest","ImagingStudy","Immunization","VisionPrescription","ImmunizationRecommendation","CareTeam","Measure","Subscription","ClaimResponse","PaymentNotice","EnrollmentRequest","ExplanationOfBenefit","RequestGroup","NutritionOrder","Account","Consent","PaymentReconciliation","Evidence","ResearchDefinition","ClinicalImpression","Observation","ChargeItemDefinition","ResearchStudy","Device","Coverage","Invoice","Slot","CoverageEligibilityResponse","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","CommunicationRequest"],
            expression: "CommunicationRequest.status | CapabilityStatement.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | GraphDefinition.status | ImplementationGuide.status | MessageDefinition.status | NamingSystem.status | OperationDefinition.status | SearchParameter.status | StructureDefinition.status | StructureMap.status | TerminologyCapabilities.status | ValueSet.status | CoverageEligibilityResponse.status | Slot.status | Invoice.status | Coverage.status | Device.status | ResearchStudy.status | ChargeItemDefinition.status | Observation.status | ClinicalImpression.status | ResearchDefinition.status | Evidence.status | PaymentReconciliation.status | Consent.status | Account.status | NutritionOrder.status | RequestGroup.status | ExplanationOfBenefit.status | EnrollmentRequest.status | PaymentNotice.status | ClaimResponse.status | Subscription.status | Measure.status | CareTeam.status | ImmunizationRecommendation.recommendation.forecastStatus | VisionPrescription.status | Immunization.status | ImagingStudy.status | CoverageEligibilityRequest.status | Substance.status | Specimen.status | Contract.status | InsurancePlan.status | Media.status | TestScript.status | MeasureReport.status | Encounter.status | DocumentManifest.status | ServiceRequest.status | ExampleScenario.status | Communication.status | PlanDefinition.status | Questionnaire.status | Composition.status | List.status | FamilyMemberHistory.status | ResearchSubject.status | SupplyRequest.status | Library.status | EvidenceVariable.status | EnrollmentResponse.status | Endpoint.status | EventDefinition.status | DocumentReference.status | DiagnosticReport.status | Claim.status | QuestionnaireResponse.status | SupplyDelivery.status | DeviceRequest.status | Location.status | CarePlan.status | Medication.status | ResearchElementDefinition.status | MedicationKnowledge.status | Procedure.status | EpisodeOfCare.status | Task.status | Appointment.status | MedicationAdministration.status | MedicationDispense.status | MedicationRequest.status | MedicationStatement.status | ImmunizationEvaluation.status"
        }
    ],
    "other": [
        {
            name: "other",
            'type: REFERENCE,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.unmapped.url"
        }
    ],
    "successor": [
        {
            name: "successor",
            'type: REFERENCE,
            base: ["Library","ResearchDefinition","PlanDefinition","ResearchElementDefinition","Measure","EventDefinition"],
            expression: "EventDefinition.relatedArtifact.where(type='successor').resource | Measure.relatedArtifact.where(type='successor').resource | ResearchElementDefinition.relatedArtifact.where(type='successor').resource | PlanDefinition.relatedArtifact.where(type='successor').resource | ResearchDefinition.relatedArtifact.where(type='successor').resource | Library.relatedArtifact.where(type='successor').resource"
        }
    ],
    "combo-code-value-quantity": [
        {
            name: "combo-code-value-quantity",
            'type: COMPOSITE,
            base: ["Observation"],
            expression: "Observation | Observation.component"
        }
    ],
    "operational-status": [
        {
            name: "operational-status",
            'type: TOKEN,
            base: ["Location"],
            expression: "Location.operationalStatus"
        }
    ],
    "part-of": [
        {
            name: "part-of",
            'type: REFERENCE,
            base: ["CarePlan","Procedure","MedicationStatement","Observation","QuestionnaireResponse","Task","Encounter","Communication"],
            expression: "Communication.partOf | Encounter.partOf | Task.partOf | QuestionnaireResponse.partOf | Observation.partOf | MedicationStatement.partOf | Procedure.partOf | CarePlan.partOf"
        }
    ],
    "start-date": [
        {
            name: "start-date",
            'type: DATE,
            base: ["Goal"],
            expression: "(Goal.start as date)"
        }
    ],
    "occurrence": [
        {
            name: "occurrence",
            'type: DATE,
            base: ["CommunicationRequest","ServiceRequest","ChargeItem"],
            expression: "ChargeItem.occurrence | ServiceRequest.occurrence | (CommunicationRequest.occurrence as dateTime)"
        }
    ],
    "fhirversion": [
        {
            name: "fhirversion",
            'type: TOKEN,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.version"
        }
    ],
    "manufacturer": [
        {
            name: "manufacturer",
            'type: STRING,
            base: ["Device"],
            expression: "Device.manufacturer"
        },
        {
            name: "manufacturer",
            'type: REFERENCE,
            base: ["MedicationKnowledge","Medication","Immunization"],
            expression: "Immunization.manufacturer | Medication.manufacturer | MedicationKnowledge.manufacturer"
        }
    ],
    "base-path": [
        {
            name: "base-path",
            'type: TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.snapshot.element.base.path | StructureDefinition.differential.element.base.path"
        }
    ],
    "member": [
        {
            name: "member",
            'type: REFERENCE,
            base: ["Group"],
            expression: "Group.member.entity"
        }
    ],
    "authenticator": [
        {
            name: "authenticator",
            'type: REFERENCE,
            base: ["DocumentReference"],
            expression: "DocumentReference.authenticator"
        }
    ],
    "outcome": [
        {
            name: "outcome",
            'type: TOKEN,
            base: ["PaymentReconciliation","AuditEvent","CoverageEligibilityResponse","ClaimResponse"],
            expression: "ClaimResponse.outcome | CoverageEligibilityResponse.outcome | AuditEvent.outcome | PaymentReconciliation.outcome"
        }
    ],
    "evidence-detail": [
        {
            name: "evidence-detail",
            'type: REFERENCE,
            base: ["Condition"],
            expression: "Condition.evidence.detail"
        }
    ],
    "product": [
        {
            name: "product",
            'type: URI,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.element.target.product.property"
        }
    ],
    "_security": [
        {
            name: "_security",
            'type: TOKEN,
            base: ["Resource"],
            expression: "Resource.meta.security"
        }
    ],
    "_type": [
        {
            name: "_type",
            'type: TOKEN,
            base: ["Resource"],
            expression: ""
        }
    ],
    "url": [
        {
            name: "url",
            'type: URI,
            base: ["ResearchElementDefinition","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","EventDefinition","Subscription","Library","PlanDefinition","Contract","ResearchDefinition","Device","Measure","ExampleScenario","EvidenceVariable","ChargeItemDefinition","Questionnaire","Evidence","TestScript"],
            expression: "TestScript.url | Evidence.url | Questionnaire.url | ChargeItemDefinition.url | EvidenceVariable.url | ExampleScenario.url | Measure.url | Device.url | ResearchDefinition.url | Contract.url | PlanDefinition.url | Library.url | Subscription.channel.endpoint | EventDefinition.url | CapabilityStatement.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | GraphDefinition.url | ImplementationGuide.url | MessageDefinition.url | OperationDefinition.url | SearchParameter.url | StructureDefinition.url | StructureMap.url | TerminologyCapabilities.url | ValueSet.url | ResearchElementDefinition.url"
        }
    ],
    "disposition": [
        {
            name: "disposition",
            'type: STRING,
            base: ["ClaimResponse","PaymentReconciliation","CoverageEligibilityResponse","ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.disposition | CoverageEligibilityResponse.disposition | PaymentReconciliation.disposition | ClaimResponse.disposition"
        }
    ],
    "lifecycle-status": [
        {
            name: "lifecycle-status",
            'type: TOKEN,
            base: ["Goal"],
            expression: "Goal.lifecycleStatus"
        }
    ],
    "seriousness": [
        {
            name: "seriousness",
            'type: TOKEN,
            base: ["AdverseEvent"],
            expression: "AdverseEvent.seriousness"
        }
    ],
    "reason-reference": [
        {
            name: "reason-reference",
            'type: REFERENCE,
            base: ["Immunization","Procedure","Appointment","Encounter"],
            expression: "Encounter.reasonReference | Appointment.reasonReference | Procedure.reasonReference | Immunization.reasonReference"
        }
    ],
    "consentor": [
        {
            name: "consentor",
            'type: REFERENCE,
            base: ["Consent"],
            expression: "Consent.performer"
        }
    ],
    "entity": [
        {
            name: "entity",
            'type: REFERENCE,
            base: ["AuditEvent","Provenance"],
            expression: "Provenance.entity.what | AuditEvent.entity.what"
        }
    ],
    "requesting-organization": [
        {
            name: "requesting-organization",
            'type: REFERENCE,
            base: ["ChargeItem"],
            expression: "ChargeItem.requestingOrganization"
        }
    ],
    "evaluated-resource": [
        {
            name: "evaluated-resource",
            'type: REFERENCE,
            base: ["MeasureReport"],
            expression: "MeasureReport.evaluatedResource"
        }
    ],
    "instance": [
        {
            name: "instance",
            'type: TOKEN,
            base: ["ImagingStudy","OperationDefinition"],
            expression: "OperationDefinition.instance | ImagingStudy.series.instance.uid"
        }
    ],
    "entity-role": [
        {
            name: "entity-role",
            'type: TOKEN,
            base: ["AuditEvent"],
            expression: "AuditEvent.entity.role"
        }
    ],
    "use": [
        {
            name: "use",
            'type: TOKEN,
            base: ["ClaimResponse","Claim"],
            expression: "Claim.use | ClaimResponse.use"
        }
    ],
    "subject": [
        {
            name: "subject",
            'type: REFERENCE,
            base: ["RiskAssessment","Observation","ServiceRequest","Contract","List","MedicationDispense","QuestionnaireResponse","DocumentReference","CommunicationRequest","DiagnosticReport","CareTeam","Communication","Condition","Media","Goal","Encounter","Invoice","MedicationStatement","ChargeItem","DocumentManifest","Specimen","Procedure","RequestGroup","SupplyRequest","EnrollmentRequest","ClinicalImpression","Basic","AdverseEvent","Task","CarePlan","MeasureReport","MedicationAdministration","DeviceUseStatement","ImagingStudy","Composition","DeviceRequest","Flag","MedicationRequest","Account","GuidanceResponse"],
            expression: "GuidanceResponse.subject | Account.subject | MedicationRequest.subject | Flag.subject | DeviceRequest.subject | Composition.subject | ImagingStudy.subject | DeviceUseStatement.subject | MedicationAdministration.subject | MeasureReport.subject | CarePlan.subject | Task.for | AdverseEvent.subject | Basic.subject | ClinicalImpression.subject | EnrollmentRequest.candidate | SupplyRequest.deliverTo | RequestGroup.subject | Procedure.subject | Specimen.subject | DocumentManifest.subject | ChargeItem.subject | MedicationStatement.subject | Invoice.subject | Encounter.subject | Goal.subject | Media.subject | Condition.subject | Communication.subject | CareTeam.subject | DiagnosticReport.subject | CommunicationRequest.subject | DocumentReference.subject | QuestionnaireResponse.subject | MedicationDispense.subject | List.subject | Contract.subject | ServiceRequest.subject | Observation.subject | RiskAssessment.subject"
        }
    ],
    "assessor": [
        {
            name: "assessor",
            'type: REFERENCE,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.assessor"
        }
    ],
    "value-date": [
        {
            name: "value-date",
            'type: DATE,
            base: ["Observation"],
            expression: "(Observation.value as dateTime) | (Observation.value as Period)"
        }
    ],
    "testscript-capability": [
        {
            name: "testscript-capability",
            'type: STRING,
            base: ["TestScript"],
            expression: "TestScript.metadata.capability.description"
        }
    ],
    "mode": [
        {
            name: "mode",
            'type: TOKEN,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.rest.mode"
        }
    ],
    "abatement-date": [
        {
            name: "abatement-date",
            'type: DATE,
            base: ["Condition"],
            expression: "Condition.abatement.as(dateTime) | Condition.abatement.as(Period)"
        }
    ],
    "datetime": [
        {
            name: "datetime",
            'type: DATE,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.dateTime"
        }
    ],
    "factor-override": [
        {
            name: "factor-override",
            'type: NUMBER,
            base: ["ChargeItem"],
            expression: "ChargeItem.factorOverride"
        }
    ],
    "abatement-age": [
        {
            name: "abatement-age",
            'type: QUANTITY,
            base: ["Condition"],
            expression: "Condition.abatement.as(Age) | Condition.abatement.as(Range)"
        }
    ],
    "modified": [
        {
            name: "modified",
            'type: DATE,
            base: ["Task"],
            expression: "Task.lastModified"
        }
    ],
    "claim": [
        {
            name: "claim",
            'type: REFERENCE,
            base: ["ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.claim"
        }
    ],
    "communication": [
        {
            name: "communication",
            'type: TOKEN,
            base: ["Practitioner"],
            expression: "Practitioner.communication"
        }
    ],
    "combo-code-value-concept": [
        {
            name: "combo-code-value-concept",
            'type: COMPOSITE,
            base: ["Observation"],
            expression: "Observation | Observation.component"
        }
    ],
    "class-type": [
        {
            name: "class-type",
            'type: TOKEN,
            base: ["Coverage"],
            expression: "Coverage.class.type"
        }
    ],
    "partof": [
        {
            name: "partof",
            'type: REFERENCE,
            base: ["ResearchStudy","Organization","Location"],
            expression: "Location.partOf | Organization.partOf | ResearchStudy.partOf"
        }
    ],
    "author": [
        {
            name: "author",
            'type: REFERENCE,
            base: ["Composition","RequestGroup","DetectedIssue","DocumentManifest","Flag","Basic","QuestionnaireResponse","DocumentReference","Linkage","MessageHeader"],
            expression: "MessageHeader.author | Linkage.author | DocumentReference.author | QuestionnaireResponse.author | Basic.author | Flag.author | DocumentManifest.author | DetectedIssue.author | RequestGroup.author | Composition.author"
        }
    ],
    "diagnosis": [
        {
            name: "diagnosis",
            'type: REFERENCE,
            base: ["Encounter"],
            expression: "Encounter.diagnosis.condition"
        }
    ],
    "expansion": [
        {
            name: "expansion",
            'type: URI,
            base: ["ValueSet"],
            expression: "ValueSet.expansion.identifier"
        }
    ],
    "entry": [
        {
            name: "entry",
            'type: REFERENCE,
            base: ["Composition"],
            expression: "Composition.section.entry"
        }
    ],
    "condition": [
        {
            name: "condition",
            'type: REFERENCE,
            base: ["CarePlan","EpisodeOfCare","RiskAssessment"],
            expression: "RiskAssessment.condition | EpisodeOfCare.diagnosis.condition | CarePlan.addresses"
        }
    ],
    "related-ref": [
        {
            name: "related-ref",
            'type: REFERENCE,
            base: ["DocumentManifest","Composition"],
            expression: "(Composition.relatesTo.target as Reference) | DocumentManifest.related.ref"
        }
    ],
    "monograph": [
        {
            name: "monograph",
            'type: REFERENCE,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.monograph.source"
        }
    ],
    "service-provider": [
        {
            name: "service-provider",
            'type: REFERENCE,
            base: ["Encounter"],
            expression: "Encounter.serviceProvider"
        }
    ],
    "_id": [
        {
            name: "_id",
            'type: TOKEN,
            base: ["Resource"],
            expression: "Resource.id"
        }
    ],
    "last-date": [
        {
            name: "last-date",
            'type: DATE,
            base: ["AllergyIntolerance"],
            expression: "AllergyIntolerance.lastOccurrence"
        }
    ],
    "combo-data-absent-reason": [
        {
            name: "combo-data-absent-reason",
            'type: TOKEN,
            base: ["Observation"],
            expression: "Observation.dataAbsentReason | Observation.component.dataAbsentReason"
        }
    ],
    "code": [
        {
            name: "code",
            'type: TOKEN,
            base: ["OperationDefinition","Substance","MedicationKnowledge","ValueSet","ChargeItem","SearchParameter","CompartmentDefinition","CodeSystem","RequestGroup","Task","DetectedIssue","MessageHeader","Basic","AllergyIntolerance","Condition","DeviceRequest","DiagnosticReport","FamilyMemberHistory","List","Medication","MedicationAdministration","MedicationDispense","MedicationRequest","MedicationStatement","Observation","Procedure","ServiceRequest","Group","Questionnaire"],
            expression: "Questionnaire.item.code | Group.code | AllergyIntolerance.code | AllergyIntolerance.reaction.substance | Condition.code | (DeviceRequest.code as CodeableConcept) | DiagnosticReport.code | FamilyMemberHistory.condition.code | List.code | Medication.code | (MedicationAdministration.medication as CodeableConcept) | (MedicationDispense.medication as CodeableConcept) | (MedicationRequest.medication as CodeableConcept) | (MedicationStatement.medication as CodeableConcept) | Observation.code | Procedure.code | ServiceRequest.code | Basic.code | MessageHeader.response.code | DetectedIssue.code | Task.code | RequestGroup.code | CodeSystem.concept.code | CompartmentDefinition.code | SearchParameter.code | ChargeItem.code | ValueSet.expansion.contains.code | ValueSet.compose.include.concept.code | MedicationKnowledge.code | Substance.code | (Substance.ingredient.substance as CodeableConcept) | OperationDefinition.code"
        }
    ],
    "participant-type": [
        {
            name: "participant-type",
            'type: TOKEN,
            base: ["Encounter"],
            expression: "Encounter.participant.type"
        }
    ],
    "slot": [
        {
            name: "slot",
            'type: REFERENCE,
            base: ["Appointment"],
            expression: "Appointment.slot"
        }
    ],
    "accession": [
        {
            name: "accession",
            'type: TOKEN,
            base: ["Specimen"],
            expression: "Specimen.accessionIdentifier"
        }
    ],
    "media": [
        {
            name: "media",
            'type: REFERENCE,
            base: ["DiagnosticReport"],
            expression: "DiagnosticReport.media.link"
        }
    ],
    "composed-of": [
        {
            name: "composed-of",
            'type: REFERENCE,
            base: ["PlanDefinition","ResearchElementDefinition","EventDefinition","Library","Measure","ResearchDefinition"],
            expression: "ResearchDefinition.relatedArtifact.where(type='composed-of').resource | Measure.relatedArtifact.where(type='composed-of').resource | Library.relatedArtifact.where(type='composed-of').resource | EventDefinition.relatedArtifact.where(type='composed-of').resource | ResearchElementDefinition.relatedArtifact.where(type='composed-of').resource | PlanDefinition.relatedArtifact.where(type='composed-of').resource"
        }
    ],
    "context-quantity": [
        {
            name: "context-quantity",
            'type: QUANTITY,
            base: ["TestScript","Questionnaire","Evidence","EventDefinition","EvidenceVariable","Measure","PlanDefinition","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","Library","ResearchElementDefinition","ChargeItemDefinition","ResearchDefinition","ExampleScenario"],
            expression: "(ExampleScenario.useContext.value as Quantity) | (ExampleScenario.useContext.value as Range) | (ResearchDefinition.useContext.value as Quantity) | (ResearchDefinition.useContext.value as Range) | (ChargeItemDefinition.useContext.value as Quantity) | (ChargeItemDefinition.useContext.value as Range) | (ResearchElementDefinition.useContext.value as Quantity) | (ResearchElementDefinition.useContext.value as Range) | (Library.useContext.value as Quantity) | (Library.useContext.value as Range) | (CapabilityStatement.useContext.value as Quantity) | (CapabilityStatement.useContext.value as Range) | (CodeSystem.useContext.value as Quantity) | (CodeSystem.useContext.value as Range) | (CompartmentDefinition.useContext.value as Quantity) | (CompartmentDefinition.useContext.value as Range) | (ConceptMap.useContext.value as Quantity) | (ConceptMap.useContext.value as Range) | (GraphDefinition.useContext.value as Quantity) | (GraphDefinition.useContext.value as Range) | (ImplementationGuide.useContext.value as Quantity) | (ImplementationGuide.useContext.value as Range) | (MessageDefinition.useContext.value as Quantity) | (MessageDefinition.useContext.value as Range) | (NamingSystem.useContext.value as Quantity) | (NamingSystem.useContext.value as Range) | (OperationDefinition.useContext.value as Quantity) | (OperationDefinition.useContext.value as Range) | (SearchParameter.useContext.value as Quantity) | (SearchParameter.useContext.value as Range) | (StructureDefinition.useContext.value as Quantity) | (StructureDefinition.useContext.value as Range) | (StructureMap.useContext.value as Quantity) | (StructureMap.useContext.value as Range) | (TerminologyCapabilities.useContext.value as Quantity) | (TerminologyCapabilities.useContext.value as Range) | (ValueSet.useContext.value as Quantity) | (ValueSet.useContext.value as Range) | (PlanDefinition.useContext.value as Quantity) | (PlanDefinition.useContext.value as Range) | (Measure.useContext.value as Quantity) | (Measure.useContext.value as Range) | (EvidenceVariable.useContext.value as Quantity) | (EvidenceVariable.useContext.value as Range) | (EventDefinition.useContext.value as Quantity) | (EventDefinition.useContext.value as Range) | (Evidence.useContext.value as Quantity) | (Evidence.useContext.value as Range) | (Questionnaire.useContext.value as Quantity) | (Questionnaire.useContext.value as Range) | (TestScript.useContext.value as Quantity) | (TestScript.useContext.value as Range)"
        }
    ],
    "effective": [
        {
            name: "effective",
            'type: DATE,
            base: ["ResearchElementDefinition","Library","MedicationStatement","ResearchDefinition","Measure","EventDefinition","Questionnaire","ChargeItemDefinition","PlanDefinition"],
            expression: "PlanDefinition.effectivePeriod | ChargeItemDefinition.effectivePeriod | Questionnaire.effectivePeriod | EventDefinition.effectivePeriod | Measure.effectivePeriod | ResearchDefinition.effectivePeriod | MedicationStatement.effective | Library.effectivePeriod | ResearchElementDefinition.effectivePeriod"
        }
    ],
    "subtype": [
        {
            name: "subtype",
            'type: TOKEN,
            base: ["AuditEvent"],
            expression: "AuditEvent.subtype"
        }
    ],
    "source-system": [
        {
            name: "source-system",
            'type: URI,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.source"
        }
    ]    
};
//Number of search params in BASE_IG_SEARCH_PARAMS_3  = 100
final readonly & map<FHIRSearchParameterDefinition[]> BASE_IG_SEARCH_PARAMS_3 = {
    "custodian": [
        {
            name: "custodian",
            'type: REFERENCE,
            base: ["DocumentReference"],
            expression: "DocumentReference.custodian"
        }
    ],
    "service-type": [
        {
            name: "service-type",
            'type: TOKEN,
            base: ["Slot","HealthcareService","Schedule","Appointment"],
            expression: "Appointment.serviceType | Schedule.serviceType | HealthcareService.type | Slot.serviceType"
        }
    ],
    "medication": [
        {
            name: "medication",
            'type: REFERENCE,
            base: ["MedicationAdministration","MedicationDispense","MedicationRequest","MedicationStatement"],
            expression: "(MedicationAdministration.medication as Reference) | (MedicationDispense.medication as Reference) | (MedicationRequest.medication as Reference) | (MedicationStatement.medication as Reference)"
        }
    ],
    "authored-on": [
        {
            name: "authored-on",
            'type: DATE,
            base: ["DeviceRequest","Task"],
            expression: "Task.authoredOn | DeviceRequest.authoredOn"
        }
    ],
    "performer-type": [
        {
            name: "performer-type",
            'type: TOKEN,
            base: ["ServiceRequest"],
            expression: "ServiceRequest.performerType"
        }
    ],
    "requestor": [
        {
            name: "requestor",
            'type: REFERENCE,
            base: ["CoverageEligibilityResponse","ClaimResponse","PaymentReconciliation"],
            expression: "PaymentReconciliation.requestor | ClaimResponse.requestor | CoverageEligibilityResponse.requestor"
        }
    ],
    "_filter": [
        {
            name: "_filter",
            'type: TOKEN,
            base: ["Resource"],
            expression: ""
        }
    ],
    "destination-uri": [
        {
            name: "destination-uri",
            'type: URI,
            base: ["MessageHeader"],
            expression: "MessageHeader.destination.endpoint"
        }
    ],
    "_has": [
        {
            name: "_has",
            'type: STRING,
            base: ["Resource"],
            expression: ""
        }
    ],
    "address-use": [
        {
            name: "address-use",
            'type: TOKEN,
            base: ["Location","InsurancePlan","Patient","Person","Practitioner","RelatedPerson","Organization"],
            expression: "Organization.address.use | Patient.address.use | Person.address.use | Practitioner.address.use | RelatedPerson.address.use | InsurancePlan.contact.address.use | Location.address.use"
        }
    ],
    "implicated": [
        {
            name: "implicated",
            'type: REFERENCE,
            base: ["DetectedIssue"],
            expression: "DetectedIssue.implicated"
        }
    ],
    "participating-organization": [
        {
            name: "participating-organization",
            'type: REFERENCE,
            base: ["OrganizationAffiliation"],
            expression: "OrganizationAffiliation.participatingOrganization"
        }
    ],
    "authored": [
        {
            name: "authored",
            'type: DATE,
            base: ["CommunicationRequest","ServiceRequest","QuestionnaireResponse","RequestGroup"],
            expression: "RequestGroup.authoredOn | QuestionnaireResponse.authored | ServiceRequest.authoredOn | CommunicationRequest.authoredOn"
        }
    ],
    "reason": [
        {
            name: "reason",
            'type: TOKEN,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.reasonCode"
        }
    ],
    "specialty": [
        {
            name: "specialty",
            'type: TOKEN,
            base: ["Slot","HealthcareService","OrganizationAffiliation","PractitionerRole","Schedule","Appointment"],
            expression: "Appointment.specialty | Schedule.specialty | PractitionerRole.specialty | OrganizationAffiliation.specialty | HealthcareService.specialty | Slot.specialty"
        }
    ],
    "deceased": [
        {
            name: "deceased",
            'type: TOKEN,
            base: ["Patient"],
            expression: "Patient.deceased.exists() and Patient.deceased != false"
        }
    ],
    "clinical-status": [
        {
            name: "clinical-status",
            'type: TOKEN,
            base: ["AllergyIntolerance","Condition"],
            expression: "Condition.clinicalStatus | AllergyIntolerance.clinicalStatus"
        }
    ],
    "address-country": [
        {
            name: "address-country",
            'type: STRING,
            base: ["Organization","InsurancePlan","Patient","Person","Practitioner","RelatedPerson","Location"],
            expression: "Location.address.country | Patient.address.country | Person.address.country | Practitioner.address.country | RelatedPerson.address.country | InsurancePlan.contact.address.country | Organization.address.country"
        }
    ],
    "ingredient-code": [
        {
            name: "ingredient-code",
            'type: TOKEN,
            base: ["Medication","MedicationKnowledge"],
            expression: "(MedicationKnowledge.ingredient.item as CodeableConcept) | (Medication.ingredient.item as CodeableConcept)"
        }
    ],
    "source-cost": [
        {
            name: "source-cost",
            'type: TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.cost.source"
        }
    ],
    "achievement-status": [
        {
            name: "achievement-status",
            'type: TOKEN,
            base: ["Goal"],
            expression: "Goal.achievementStatus"
        }
    ],
    "detail-udi": [
        {
            name: "detail-udi",
            'type: REFERENCE,
            base: ["ExplanationOfBenefit","Claim"],
            expression: "Claim.item.detail.udi | ExplanationOfBenefit.item.detail.udi"
        }
    ],
    "supporting-info": [
        {
            name: "supporting-info",
            'type: REFERENCE,
            base: ["Appointment","ClinicalImpression"],
            expression: "ClinicalImpression.supportingInfo | Appointment.supportingInformation"
        }
    ],
    "variant-start": [
        {
            name: "variant-start",
            'type: NUMBER,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.variant.start"
        }
    ],
    "expiry": [
        {
            name: "expiry",
            'type: DATE,
            base: ["Substance"],
            expression: "Substance.instance.expiry"
        }
    ],
    "special-arrangement": [
        {
            name: "special-arrangement",
            'type: TOKEN,
            base: ["Encounter"],
            expression: "Encounter.hospitalization.specialArrangement"
        }
    ],
    "requester": [
        {
            name: "requester",
            'type: REFERENCE,
            base: ["CommunicationRequest","Task","MedicationRequest","ServiceRequest","SupplyRequest","DeviceRequest"],
            expression: "DeviceRequest.requester | SupplyRequest.requester | ServiceRequest.requester | MedicationRequest.requester | Task.requester | CommunicationRequest.requester"
        }
    ],
    "udi-di": [
        {
            name: "udi-di",
            'type: STRING,
            base: ["Device"],
            expression: "Device.udiCarrier.deviceIdentifier"
        }
    ],
    "receiver": [
        {
            name: "receiver",
            'type: REFERENCE,
            base: ["MessageHeader","MedicationDispense","SupplyDelivery"],
            expression: "SupplyDelivery.receiver | MedicationDispense.receiver | MessageHeader.destination.receiver"
        }
    ],
    "datewritten": [
        {
            name: "datewritten",
            'type: DATE,
            base: ["VisionPrescription"],
            expression: "VisionPrescription.dateWritten"
        }
    ],
    "received": [
        {
            name: "received",
            'type: DATE,
            base: ["Communication"],
            expression: "Communication.received"
        }
    ],
    "relatedperson": [
        {
            name: "relatedperson",
            'type: REFERENCE,
            base: ["Person"],
            expression: "Person.link.target.where(resolve() is RelatedPerson)"
        }
    ],
    "interpreter": [
        {
            name: "interpreter",
            'type: REFERENCE,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.interpreter"
        }
    ],
    "target-disease": [
        {
            name: "target-disease",
            'type: TOKEN,
            base: ["Immunization","ImmunizationRecommendation","ImmunizationEvaluation"],
            expression: "ImmunizationEvaluation.targetDisease | ImmunizationRecommendation.recommendation.targetDisease | Immunization.protocolApplied.targetDisease"
        }
    ],
    "device": [
        {
            name: "device",
            'type: REFERENCE,
            base: ["Media","DeviceUseStatement","MedicationAdministration","Observation","DeviceRequest"],
            expression: "(DeviceRequest.code as Reference) | Observation.device | MedicationAdministration.device | DeviceUseStatement.device | Media.device"
        }
    ],
    "container-id": [
        {
            name: "container-id",
            'type: TOKEN,
            base: ["Specimen"],
            expression: "Specimen.container.identifier"
        }
    ],
    "dicom-class": [
        {
            name: "dicom-class",
            'type: TOKEN,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.series.instance.sopClass"
        }
    ],
    "container-identifier": [
        {
            name: "container-identifier",
            'type: TOKEN,
            base: ["Substance"],
            expression: "Substance.instance.identifier"
        }
    ],
    "dependson": [
        {
            name: "dependson",
            'type: URI,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.element.target.dependsOn.property"
        }
    ],
    "jurisdiction": [
        {
            name: "jurisdiction",
            'type: TOKEN,
            base: ["Library","ResearchElementDefinition","EventDefinition","PlanDefinition","TestScript","CapabilityStatement","CodeSystem","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","ChargeItemDefinition","Questionnaire","ResearchDefinition","Measure","ExampleScenario"],
            expression: "ExampleScenario.jurisdiction | Measure.jurisdiction | ResearchDefinition.jurisdiction | Questionnaire.jurisdiction | ChargeItemDefinition.jurisdiction | CapabilityStatement.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | ValueSet.jurisdiction | TestScript.jurisdiction | PlanDefinition.jurisdiction | EventDefinition.jurisdiction | ResearchElementDefinition.jurisdiction | Library.jurisdiction"
        }
    ],
    "global": [
        {
            name: "global",
            'type: REFERENCE,
            base: ["ImplementationGuide"],
            expression: "ImplementationGuide.global.profile"
        }
    ],
    "predecessor": [
        {
            name: "predecessor",
            'type: REFERENCE,
            base: ["ResearchDefinition","PlanDefinition","EventDefinition","Measure","Library","ResearchElementDefinition"],
            expression: "ResearchElementDefinition.relatedArtifact.where(type='predecessor').resource | Library.relatedArtifact.where(type='predecessor').resource | Measure.relatedArtifact.where(type='predecessor').resource | EventDefinition.relatedArtifact.where(type='predecessor').resource | PlanDefinition.relatedArtifact.where(type='predecessor').resource | ResearchDefinition.relatedArtifact.where(type='predecessor').resource"
        }
    ],
    "endpoint": [
        {
            name: "endpoint",
            'type: REFERENCE,
            base: ["PractitionerRole","Location","OrganizationAffiliation","ImagingStudy","Organization","HealthcareService","InsurancePlan"],
            expression: "InsurancePlan.endpoint | HealthcareService.endpoint | Organization.endpoint | ImagingStudy.endpoint | ImagingStudy.series.endpoint | OrganizationAffiliation.endpoint | Location.endpoint | PractitionerRole.endpoint"
        }
    ],
    "performer-function": [
        {
            name: "performer-function",
            'type: TOKEN,
            base: ["ChargeItem"],
            expression: "ChargeItem.performer.function"
        }
    ],
    "intended-performer": [
        {
            name: "intended-performer",
            'type: REFERENCE,
            base: ["MedicationRequest"],
            expression: "MedicationRequest.performer"
        }
    ],
    "component-code": [
        {
            name: "component-code",
            'type: TOKEN,
            base: ["Observation"],
            expression: "Observation.component.code"
        }
    ],
    "intended-performertype": [
        {
            name: "intended-performertype",
            'type: TOKEN,
            base: ["MedicationRequest"],
            expression: "MedicationRequest.performerType"
        }
    ],
    "relationship": [
        {
            name: "relationship",
            'type: COMPOSITE,
            base: ["DocumentReference"],
            expression: "DocumentReference.relatesTo"
        },
        {
            name: "relationship",
            'type: TOKEN,
            base: ["RelatedPerson","FamilyMemberHistory"],
            expression: "FamilyMemberHistory.relationship | RelatedPerson.relationship"
        }
    ],
    "email": [
        {
            name: "email",
            'type: TOKEN,
            base: ["Patient","Person","Practitioner","PractitionerRole","RelatedPerson","OrganizationAffiliation"],
            expression: "OrganizationAffiliation.telecom.where(system='email') | Patient.telecom.where(system='email') | Person.telecom.where(system='email') | Practitioner.telecom.where(system='email') | PractitionerRole.telecom.where(system='email') | RelatedPerson.telecom.where(system='email')"
        }
    ],
    "timestamp": [
        {
            name: "timestamp",
            'type: DATE,
            base: ["Bundle"],
            expression: "Bundle.timestamp"
        }
    ],
    "bodysite": [
        {
            name: "bodysite",
            'type: TOKEN,
            base: ["ImagingStudy","Specimen"],
            expression: "Specimen.collection.bodySite | ImagingStudy.series.bodySite"
        }
    ],
    "ingredient": [
        {
            name: "ingredient",
            'type: REFERENCE,
            base: ["Medication","MedicationKnowledge"],
            expression: "(MedicationKnowledge.ingredient.item as Reference) | (Medication.ingredient.item as Reference)"
        }
    ],
    "reaction": [
        {
            name: "reaction",
            'type: REFERENCE,
            base: ["Immunization"],
            expression: "Immunization.reaction.detail"
        }
    ],
    "replaces": [
        {
            name: "replaces",
            'type: REFERENCE,
            base: ["ServiceRequest","CommunicationRequest","CarePlan"],
            expression: "CarePlan.replaces | CommunicationRequest.replaces | ServiceRequest.replaces"
        }
    ],
    "responsibleparty": [
        {
            name: "responsibleparty",
            'type: REFERENCE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.substitution.responsibleParty"
        }
    ],
    "reporter": [
        {
            name: "reporter",
            'type: REFERENCE,
            base: ["MeasureReport"],
            expression: "MeasureReport.reporter"
        }
    ],
    "started": [
        {
            name: "started",
            'type: DATE,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.started"
        }
    ],
    "activity-reference": [
        {
            name: "activity-reference",
            'type: REFERENCE,
            base: ["CarePlan"],
            expression: "CarePlan.activity.reference"
        }
    ],
    "characteristic-value": [
        {
            name: "characteristic-value",
            'type: COMPOSITE,
            base: ["Group"],
            expression: "Group.characteristic"
        }
    ],
    "_profile": [
        {
            name: "_profile",
            'type: URI,
            base: ["Resource"],
            expression: "Resource.meta.profile"
        }
    ],
    "performer-actor": [
        {
            name: "performer-actor",
            'type: REFERENCE,
            base: ["ChargeItem"],
            expression: "ChargeItem.performer.actor"
        }
    ],
    "_content": [
        {
            name: "_content",
            'type: STRING,
            base: ["Resource"],
            expression: ""
        }
    ],
    "insurance": [
        {
            name: "insurance",
            'type: REFERENCE,
            base: ["DeviceRequest"],
            expression: "DeviceRequest.insurance"
        }
    ],
    "agent": [
        {
            name: "agent",
            'type: REFERENCE,
            base: ["Provenance","AuditEvent"],
            expression: "AuditEvent.agent.who | Provenance.agent.who"
        }
    ],
    "participant-role": [
        {
            name: "participant-role",
            'type: TOKEN,
            base: ["Invoice"],
            expression: "Invoice.participant.role"
        }
    ],
    "source": [
        {
            name: "source",
            'type: URI,
            base: ["DocumentManifest"],
            expression: "DocumentManifest.source"
        },
        {
            name: "source",
            'type: REFERENCE,
            base: ["AuditEvent","QuestionnaireResponse","List","DeviceMetric","ConceptMap","Linkage","MedicationStatement"],
            expression: "MedicationStatement.informationSource | Linkage.item.resource | (ConceptMap.source as canonical) | DeviceMetric.source | List.source | QuestionnaireResponse.source | AuditEvent.source.observer"
        },
        {
            name: "source",
            'type: STRING,
            base: ["MessageHeader"],
            expression: "MessageHeader.source.name"
        }
    ],
    "oraldiet": [
        {
            name: "oraldiet",
            'type: TOKEN,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.oralDiet.type"
        }
    ],
    "totalnet": [
        {
            name: "totalnet",
            'type: QUANTITY,
            base: ["Invoice"],
            expression: "Invoice.totalNet"
        }
    ],
    "operator": [
        {
            name: "operator",
            'type: REFERENCE,
            base: ["Media"],
            expression: "Media.operator"
        }
    ],
    "participant": [
        {
            name: "participant",
            'type: URI,
            base: ["TestReport"],
            expression: "TestReport.participant.uri"
        },
        {
            name: "participant",
            'type: REFERENCE,
            base: ["CareTeam","Encounter","RequestGroup","Invoice"],
            expression: "Invoice.participant.actor | RequestGroup.action.participant | Encounter.participant.individual | CareTeam.participant.member"
        }
    ],
    "view": [
        {
            name: "view",
            'type: TOKEN,
            base: ["Media"],
            expression: "Media.view"
        }
    ],
    "output-profile": [
        {
            name: "output-profile",
            'type: REFERENCE,
            base: ["OperationDefinition"],
            expression: "OperationDefinition.outputProfile"
        }
    ],
    "agent-name": [
        {
            name: "agent-name",
            'type: STRING,
            base: ["AuditEvent"],
            expression: "AuditEvent.agent.name"
        }
    ],
    "chromosome-window-coordinate": [
        {
            name: "chromosome-window-coordinate",
            'type: COMPOSITE,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.referenceSeq"
        }
    ],
    "referenceseqid": [
        {
            name: "referenceseqid",
            'type: TOKEN,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.referenceSeq.referenceSeqId"
        }
    ],
    "keyword": [
        {
            name: "keyword",
            'type: TOKEN,
            base: ["StructureDefinition","ResearchStudy"],
            expression: "ResearchStudy.keyword | StructureDefinition.keyword"
        }
    ],
    "target-date": [
        {
            name: "target-date",
            'type: DATE,
            base: ["Goal"],
            expression: "(Goal.target.due as date)"
        }
    ],
    "activity-code": [
        {
            name: "activity-code",
            'type: TOKEN,
            base: ["CarePlan"],
            expression: "CarePlan.activity.detail.code"
        }
    ],
    "actual": [
        {
            name: "actual",
            'type: TOKEN,
            base: ["Group"],
            expression: "Group.actual"
        }
    ],
    "given": [
        {
            name: "given",
            'type: STRING,
            base: ["Patient","Practitioner"],
            expression: "Patient.name.given | Practitioner.name.given"
        }
    ],
    "valueset": [
        {
            name: "valueset",
            'type: REFERENCE,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.snapshot.element.binding.valueSet"
        }
    ],
    "value-quantity": [
        {
            name: "value-quantity",
            'type: QUANTITY,
            base: ["Observation"],
            expression: "(Observation.value as Quantity) | (Observation.value as SampledData)"
        }
    ],
    "combo-value-quantity": [
        {
            name: "combo-value-quantity",
            'type: QUANTITY,
            base: ["Observation"],
            expression: "(Observation.value as Quantity) | (Observation.value as SampledData) | (Observation.component.value as Quantity) | (Observation.component.value as SampledData)"
        }
    ],
    "incoming-referral": [
        {
            name: "incoming-referral",
            'type: REFERENCE,
            base: ["EpisodeOfCare"],
            expression: "EpisodeOfCare.referralRequest"
        }
    ],
    "supplements": [
        {
            name: "supplements",
            'type: REFERENCE,
            base: ["CodeSystem"],
            expression: "CodeSystem.supplements"
        }
    ],
    "measure": [
        {
            name: "measure",
            'type: REFERENCE,
            base: ["MeasureReport"],
            expression: "MeasureReport.measure"
        }
    ],
    "name": [
        {
            name: "name",
            'type: STRING,
            base: ["EventDefinition","PlanDefinition","Organization","InsurancePlan","Location","Measure","RelatedPerson","ResearchDefinition","Questionnaire","Patient","Library","TestScript","Endpoint","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","ResearchElementDefinition","HealthcareService","Account","ExampleScenario","EvidenceVariable","Practitioner","Person"],
            expression: "Person.name | Practitioner.name | EvidenceVariable.name | ExampleScenario.name | Account.name | HealthcareService.name | ResearchElementDefinition.name | CapabilityStatement.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | GraphDefinition.name | ImplementationGuide.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | ValueSet.name | Endpoint.name | TestScript.name | Library.name | Patient.name | Questionnaire.name | ResearchDefinition.name | RelatedPerson.name | Measure.name | Location.name | Location.alias | name | alias | Organization.name | Organization.alias | PlanDefinition.name | EventDefinition.name"
        }
    ],
    "class-value": [
        {
            name: "class-value",
            'type: STRING,
            base: ["Coverage"],
            expression: "Coverage.class.value"
        }
    ],
    "support": [
        {
            name: "support",
            'type: REFERENCE,
            base: ["ImmunizationRecommendation"],
            expression: "ImmunizationRecommendation.recommendation.supportingImmunization"
        }
    ],
    "questionnaire": [
        {
            name: "questionnaire",
            'type: REFERENCE,
            base: ["QuestionnaireResponse"],
            expression: "QuestionnaireResponse.questionnaire"
        }
    ],
    "_lastUpdated": [
        {
            name: "_lastUpdated",
            'type: DATE,
            base: ["Resource"],
            expression: "Resource.meta.lastUpdated"
        }
    ],
    "destination": [
        {
            name: "destination",
            'type: REFERENCE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.destination"
        },
        {
            name: "destination",
            'type: STRING,
            base: ["MessageHeader"],
            expression: "MessageHeader.destination.name"
        }
    ],
    "description": [
        {
            name: "description",
            'type: STRING,
            base: ["EventDefinition","Evidence","Measure","ChargeItemDefinition","PlanDefinition","ResearchDefinition","Library","DocumentReference","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","Questionnaire","ResearchElementDefinition","DocumentManifest","EvidenceVariable","TestScript"],
            expression: "TestScript.description | EvidenceVariable.description | DocumentManifest.description | ResearchElementDefinition.description | Questionnaire.description | CapabilityStatement.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | GraphDefinition.description | ImplementationGuide.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | ValueSet.description | DocumentReference.description | Library.description | ResearchDefinition.description | PlanDefinition.description | ChargeItemDefinition.description | Measure.description | Evidence.description | EventDefinition.description"
        }
    ],
    "reason-code": [
        {
            name: "reason-code",
            'type: TOKEN,
            base: ["Appointment","Immunization","Encounter","Procedure"],
            expression: "Procedure.reasonCode | Encounter.reasonCode | Immunization.reasonCode | Appointment.reasonCode"
        }
    ],
    "finding-ref": [
        {
            name: "finding-ref",
            'type: REFERENCE,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.finding.itemReference"
        }
    ],
    "conclusion": [
        {
            name: "conclusion",
            'type: TOKEN,
            base: ["DiagnosticReport"],
            expression: "DiagnosticReport.conclusionCode"
        }
    ],
    "payor": [
        {
            name: "payor",
            'type: REFERENCE,
            base: ["Coverage"],
            expression: "Coverage.payor"
        }
    ],
    "coverage-area": [
        {
            name: "coverage-area",
            'type: REFERENCE,
            base: ["HealthcareService"],
            expression: "HealthcareService.coverageArea"
        }
    ],
    "definition": [
        {
            name: "definition",
            'type: URI,
            base: ["Questionnaire"],
            expression: "Questionnaire.item.definition"
        },
        {
            name: "definition",
            'type: REFERENCE,
            base: ["PlanDefinition"],
            expression: "PlanDefinition.action.definition"
        }
    ],
    "content-type": [
        {
            name: "content-type",
            'type: TOKEN,
            base: ["Library"],
            expression: "Library.content.contentType"
        }
    ]    
};
//Number of search params in BASE_IG_SEARCH_PARAMS_4  = 100
final readonly & map<FHIRSearchParameterDefinition[]> BASE_IG_SEARCH_PARAMS_4 = {
    "referenceseqid-window-coordinate": [
        {
            name: "referenceseqid-window-coordinate",
            'type: COMPOSITE,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.referenceSeq"
        }
    ],
    "severity": [
        {
            name: "severity",
            'type: TOKEN,
            base: ["Condition","AllergyIntolerance","AdverseEvent"],
            expression: "AdverseEvent.severity | AllergyIntolerance.reaction.severity | Condition.severity"
        }
    ],
    "coverage": [
        {
            name: "coverage",
            'type: REFERENCE,
            base: ["ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.insurance.coverage"
        }
    ],
    "business-status": [
        {
            name: "business-status",
            'type: TOKEN,
            base: ["Task"],
            expression: "Task.businessStatus"
        }
    ],
    "previous": [
        {
            name: "previous",
            'type: REFERENCE,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.previous"
        }
    ],
    "device-name": [
        {
            name: "device-name",
            'type: STRING,
            base: ["Device"],
            expression: "Device.deviceName.name | Device.type.coding.display | Device.type.text"
        }
    ],
    "substance": [
        {
            name: "substance",
            'type: REFERENCE,
            base: ["AdverseEvent"],
            expression: "AdverseEvent.suspectEntity.instance"
        }
    ],
    "start": [
        {
            name: "start",
            'type: TOKEN,
            base: ["GraphDefinition"],
            expression: "GraphDefinition.start"
        },
        {
            name: "start",
            'type: DATE,
            base: ["Slot"],
            expression: "Slot.start"
        }
    ],
    "primary-organization": [
        {
            name: "primary-organization",
            'type: REFERENCE,
            base: ["OrganizationAffiliation"],
            expression: "OrganizationAffiliation.organization"
        }
    ],
    "attester": [
        {
            name: "attester",
            'type: REFERENCE,
            base: ["Composition"],
            expression: "Composition.attester.party"
        }
    ],
    "target": [
        {
            name: "target",
            'type: REFERENCE,
            base: ["MessageHeader","VerificationResult","ConceptMap","Provenance"],
            expression: "Provenance.target | (ConceptMap.target as canonical) | VerificationResult.target | MessageHeader.destination.target"
        },
        {
            name: "target",
            'type: TOKEN,
            base: ["SearchParameter"],
            expression: "SearchParameter.target"
        }
    ],
    "_tag": [
        {
            name: "_tag",
            'type: TOKEN,
            base: ["Resource"],
            expression: "Resource.meta.tag"
        }
    ],
    "recipient": [
        {
            name: "recipient",
            'type: REFERENCE,
            base: ["DocumentManifest","Communication","CommunicationRequest","Invoice"],
            expression: "Invoice.recipient | CommunicationRequest.recipient | Communication.recipient | DocumentManifest.recipient"
        }
    ],
    "formula": [
        {
            name: "formula",
            'type: TOKEN,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.enteralFormula.baseFormulaType"
        }
    ],
    "location": [
        {
            name: "location",
            'type: REFERENCE,
            base: ["Procedure","Immunization","Device","Provenance","Encounter","AdverseEvent","PractitionerRole","OrganizationAffiliation","Appointment","HealthcareService","AppointmentResponse"],
            expression: "AppointmentResponse.actor.where(resolve() is Location) | HealthcareService.location | Appointment.participant.actor.where(resolve() is Location) | OrganizationAffiliation.location | PractitionerRole.location | AdverseEvent.location | Encounter.location.location | Provenance.location | Device.location | Immunization.location | Procedure.location"
        },
        {
            name: "location",
            'type: TOKEN,
            base: ["BodyStructure","ResearchStudy"],
            expression: "ResearchStudy.location | BodyStructure.location"
        },
        {
            name: "location",
            'type: URI,
            base: ["DocumentReference"],
            expression: "DocumentReference.content.attachment.url"
        }
    ],
    "component-code-value-concept": [
        {
            name: "component-code-value-concept",
            'type: COMPOSITE,
            base: ["Observation"],
            expression: "Observation.component"
        }
    ],
    "risk": [
        {
            name: "risk",
            'type: TOKEN,
            base: ["RiskAssessment"],
            expression: "RiskAssessment.prediction.qualitativeRisk"
        }
    ],
    "expiration-date": [
        {
            name: "expiration-date",
            'type: DATE,
            base: ["Medication"],
            expression: "Medication.batch.expirationDate"
        }
    ],
    "base": [
        {
            name: "base",
            'type: TOKEN,
            base: ["SearchParameter"],
            expression: "SearchParameter.base"
        },
        {
            name: "base",
            'type: REFERENCE,
            base: ["OperationDefinition","StructureDefinition"],
            expression: "StructureDefinition.baseDefinition | OperationDefinition.base"
        }
    ],
    "container": [
        {
            name: "container",
            'type: TOKEN,
            base: ["Specimen","SpecimenDefinition"],
            expression: "SpecimenDefinition.typeTested.container.type | Specimen.container.type"
        }
    ],
    "udi-carrier": [
        {
            name: "udi-carrier",
            'type: STRING,
            base: ["Device"],
            expression: "Device.udiCarrier.carrierHRF"
        }
    ],
    "birthdate": [
        {
            name: "birthdate",
            'type: DATE,
            base: ["Patient","Person","RelatedPerson"],
            expression: "Patient.birthDate | Person.birthDate | RelatedPerson.birthDate"
        }
    ],
    "software": [
        {
            name: "software",
            'type: STRING,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.software.name"
        }
    ],
    "requisition": [
        {
            name: "requisition",
            'type: TOKEN,
            base: ["ServiceRequest"],
            expression: "ServiceRequest.requisition"
        }
    ],
    "criteria": [
        {
            name: "criteria",
            'type: STRING,
            base: ["Subscription"],
            expression: "Subscription.criteria"
        }
    ],
    "resultingcondition": [
        {
            name: "resultingcondition",
            'type: REFERENCE,
            base: ["AdverseEvent"],
            expression: "AdverseEvent.resultingCondition"
        }
    ],
    "tester": [
        {
            name: "tester",
            'type: STRING,
            base: ["TestReport"],
            expression: "TestReport.tester"
        }
    ],
    "derived-from": [
        {
            name: "derived-from",
            'type: REFERENCE,
            base: ["Measure","Library","ResearchDefinition","Observation","EventDefinition","PlanDefinition","ResearchElementDefinition","SearchParameter"],
            expression: "SearchParameter.derivedFrom | ResearchElementDefinition.relatedArtifact.where(type='derived-from').resource | PlanDefinition.relatedArtifact.where(type='derived-from').resource | EventDefinition.relatedArtifact.where(type='derived-from').resource | Observation.derivedFrom | ResearchDefinition.relatedArtifact.where(type='derived-from').resource | Library.relatedArtifact.where(type='derived-from').resource | Measure.relatedArtifact.where(type='derived-from').resource"
        }
    ],
    "experimental": [
        {
            name: "experimental",
            'type: TOKEN,
            base: ["ImplementationGuide","StructureDefinition"],
            expression: "StructureDefinition.experimental | ImplementationGuide.experimental"
        }
    ],
    "status-reason": [
        {
            name: "status-reason",
            'type: TOKEN,
            base: ["Immunization"],
            expression: "Immunization.statusReason"
        }
    ],
    "collected": [
        {
            name: "collected",
            'type: DATE,
            base: ["Specimen"],
            expression: "Specimen.collection.collected"
        }
    ],
    "program": [
        {
            name: "program",
            'type: TOKEN,
            base: ["HealthcareService"],
            expression: "HealthcareService.program"
        }
    ],
    "has-member": [
        {
            name: "has-member",
            'type: REFERENCE,
            base: ["Observation"],
            expression: "Observation.hasMember"
        }
    ],
    "type": [
        {
            name: "type",
            'type: URI,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.type"
        },
        {
            name: "type",
            'type: TOKEN,
            base: ["Device","SearchParameter","NamingSystem","DeviceDefinition","SpecimenDefinition","Account","OperationDefinition","Specimen","Group","Invoice","AllergyIntolerance","Composition","DocumentManifest","DocumentReference","Encounter","EpisodeOfCare","MedicationDispense","Organization","PlanDefinition","Subscription","Location","InsurancePlan","AuditEvent","MolecularSequence","Library","Coverage","Bundle","Media","DeviceMetric"],
            expression: "DeviceMetric.type | Media.type | Bundle.type | Coverage.type | Library.type | MolecularSequence.type | AuditEvent.type | InsurancePlan.type | Location.type | Subscription.channel.type | PlanDefinition.type | Organization.type | MedicationDispense.type | AllergyIntolerance.type | Composition.type | DocumentManifest.type | DocumentReference.type | Encounter.type | EpisodeOfCare.type | Invoice.type | Group.type | Specimen.type | OperationDefinition.type | Account.type | SpecimenDefinition.typeCollected | DeviceDefinition.type | NamingSystem.type | SearchParameter.type | Device.type"
        }
    ],
    "when": [
        {
            name: "when",
            'type: DATE,
            base: ["Provenance"],
            expression: "(Provenance.occurred as dateTime)"
        }
    ],
    "issuer": [
        {
            name: "issuer",
            'type: REFERENCE,
            base: ["Invoice"],
            expression: "Invoice.issuer"
        }
    ],
    "relation": [
        {
            name: "relation",
            'type: TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.relatesTo.code"
        }
    ],
    "death-date": [
        {
            name: "death-date",
            'type: DATE,
            base: ["Patient"],
            expression: "(Patient.deceased as dateTime)"
        }
    ],
    "problem": [
        {
            name: "problem",
            'type: REFERENCE,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.problem"
        }
    ],
    "identified": [
        {
            name: "identified",
            'type: DATE,
            base: ["DetectedIssue"],
            expression: "DetectedIssue.identified"
        }
    ],
    "reason-not-given": [
        {
            name: "reason-not-given",
            'type: TOKEN,
            base: ["MedicationAdministration"],
            expression: "MedicationAdministration.statusReason"
        }
    ],
    "issued": [
        {
            name: "issued",
            'type: DATE,
            base: ["TestReport","DiagnosticReport","Contract"],
            expression: "Contract.issued | DiagnosticReport.issued | TestReport.issued"
        }
    ],
    "dependent": [
        {
            name: "dependent",
            'type: STRING,
            base: ["Coverage"],
            expression: "Coverage.dependent"
        }
    ],
    "context-type-quantity": [
        {
            name: "context-type-quantity",
            'type: COMPOSITE,
            base: ["PlanDefinition","ChargeItemDefinition","ExampleScenario","TestScript","Evidence","Library","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","ResearchElementDefinition","Measure","EventDefinition","Questionnaire","ResearchDefinition","EvidenceVariable"],
            expression: "EvidenceVariable.useContext | ResearchDefinition.useContext | Questionnaire.useContext | EventDefinition.useContext | Measure.useContext | ResearchElementDefinition.useContext | CapabilityStatement.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | ValueSet.useContext | Library.useContext | Evidence.useContext | TestScript.useContext | ExampleScenario.useContext | ChargeItemDefinition.useContext | PlanDefinition.useContext"
        }
    ],
    "guide": [
        {
            name: "guide",
            'type: REFERENCE,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.implementationGuide"
        }
    ],
    "identifier": [
        {
            name: "identifier",
            'type: TOKEN,
            base: ["PractitionerRole","ExplanationOfBenefit","Patient","ResearchDefinition","Group","Task","TestScript","Device","Location","CodeSystem","ConceptMap","MessageDefinition","StructureDefinition","StructureMap","ValueSet","Coverage","ResearchStudy","Media","ResearchSubject","Medication","Appointment","OrganizationAffiliation","Communication","SpecimenDefinition","Questionnaire","Invoice","ResearchElementDefinition","Specimen","Measure","Organization","Claim","InsurancePlan","HealthcareService","ClinicalImpression","ClaimResponse","CoverageEligibilityResponse","RelatedPerson","Schedule","DeviceUseStatement","EnrollmentRequest","PlanDefinition","Flag","Account","PaymentNotice","CommunicationRequest","Evidence","Bundle","Person","ImmunizationEvaluation","CoverageEligibilityRequest","EventDefinition","EnrollmentResponse","Practitioner","DeviceMetric","ImmunizationRecommendation","Basic","Slot","AppointmentResponse","EvidenceVariable","AllergyIntolerance","CarePlan","CareTeam","Composition","Condition","Consent","DetectedIssue","DeviceRequest","DiagnosticReport","DocumentManifest","DocumentReference","Encounter","EpisodeOfCare","FamilyMemberHistory","Goal","ImagingStudy","Immunization","List","MedicationAdministration","MedicationDispense","MedicationRequest","MedicationStatement","NutritionOrder","Observation","Procedure","RiskAssessment","ServiceRequest","SupplyDelivery","SupplyRequest","VisionPrescription","ExampleScenario","Contract","BodyStructure","RequestGroup","QuestionnaireResponse","ChargeItem","MolecularSequence","Substance","Endpoint","DeviceDefinition","GuidanceResponse","ChargeItemDefinition","Library","MeasureReport","TestReport","PaymentReconciliation"],
            expression: "PaymentReconciliation.identifier | TestReport.identifier | MeasureReport.identifier | Library.identifier | ChargeItemDefinition.identifier | GuidanceResponse.identifier | DeviceDefinition.identifier | Endpoint.identifier | Substance.identifier | MolecularSequence.identifier | ChargeItem.identifier | QuestionnaireResponse.identifier | RequestGroup.identifier | BodyStructure.identifier | Contract.identifier | ExampleScenario.identifier | AllergyIntolerance.identifier | CarePlan.identifier | CareTeam.identifier | Composition.identifier | Condition.identifier | Consent.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DiagnosticReport.identifier | DocumentManifest.masterIdentifier | DocumentManifest.identifier | DocumentReference.masterIdentifier | DocumentReference.identifier | Encounter.identifier | EpisodeOfCare.identifier | FamilyMemberHistory.identifier | Goal.identifier | ImagingStudy.identifier | Immunization.identifier | List.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | NutritionOrder.identifier | Observation.identifier | Procedure.identifier | RiskAssessment.identifier | ServiceRequest.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | VisionPrescription.identifier | EvidenceVariable.identifier | AppointmentResponse.identifier | Slot.identifier | Basic.identifier | ImmunizationRecommendation.identifier | DeviceMetric.identifier | Practitioner.identifier | EnrollmentResponse.identifier | EventDefinition.identifier | CoverageEligibilityRequest.identifier | ImmunizationEvaluation.identifier | Person.identifier | Bundle.identifier | Evidence.identifier | CommunicationRequest.identifier | PaymentNotice.identifier | Account.identifier | Flag.identifier | PlanDefinition.identifier | EnrollmentRequest.identifier | DeviceUseStatement.identifier | Schedule.identifier | RelatedPerson.identifier | CoverageEligibilityResponse.identifier | ClaimResponse.identifier | ClinicalImpression.identifier | HealthcareService.identifier | InsurancePlan.identifier | Claim.identifier | Organization.identifier | Measure.identifier | Specimen.identifier | ResearchElementDefinition.identifier | Invoice.identifier | Questionnaire.identifier | SpecimenDefinition.identifier | Communication.identifier | OrganizationAffiliation.identifier | Appointment.identifier | Medication.identifier | ResearchSubject.identifier | Media.identifier | ResearchStudy.identifier | Coverage.identifier | CodeSystem.identifier | ConceptMap.identifier | MessageDefinition.identifier | StructureDefinition.identifier | StructureMap.identifier | ValueSet.identifier | Location.identifier | Device.identifier | TestScript.identifier | Task.identifier | Group.identifier | ResearchDefinition.identifier | Patient.identifier | ExplanationOfBenefit.identifier | PractitionerRole.identifier"
        }
    ],
    "item": [
        {
            name: "item",
            'type: REFERENCE,
            base: ["DocumentManifest","Linkage","List"],
            expression: "List.entry.item | Linkage.item.resource | DocumentManifest.content"
        }
    ],
    "intended-dispenser": [
        {
            name: "intended-dispenser",
            'type: REFERENCE,
            base: ["MedicationRequest"],
            expression: "MedicationRequest.dispenseRequest.performer"
        }
    ],
    "goal": [
        {
            name: "goal",
            'type: REFERENCE,
            base: ["CarePlan"],
            expression: "CarePlan.goal"
        }
    ],
    "subscriber": [
        {
            name: "subscriber",
            'type: REFERENCE,
            base: ["Coverage"],
            expression: "Coverage.subscriber"
        }
    ],
    "method": [
        {
            name: "method",
            'type: TOKEN,
            base: ["Observation","RiskAssessment"],
            expression: "RiskAssessment.method | Observation.method"
        }
    ],
    "probability": [
        {
            name: "probability",
            'type: NUMBER,
            base: ["RiskAssessment"],
            expression: "RiskAssessment.prediction.probability"
        }
    ],
    "priority": [
        {
            name: "priority",
            'type: TOKEN,
            base: ["CommunicationRequest","Task","Claim","MedicationRequest","RequestGroup","ServiceRequest"],
            expression: "ServiceRequest.priority | RequestGroup.priority | MedicationRequest.priority | Claim.priority | Task.priority | CommunicationRequest.priority"
        }
    ],
    "payload-type": [
        {
            name: "payload-type",
            'type: TOKEN,
            base: ["Endpoint"],
            expression: "Endpoint.payloadType"
        }
    ],
    "security-label": [
        {
            name: "security-label",
            'type: TOKEN,
            base: ["Consent","DocumentReference"],
            expression: "DocumentReference.securityLabel | Consent.provision.securityLabel"
        }
    ],
    "phone": [
        {
            name: "phone",
            'type: TOKEN,
            base: ["OrganizationAffiliation","Patient","Person","Practitioner","PractitionerRole","RelatedPerson"],
            expression: "Patient.telecom.where(system='phone') | Person.telecom.where(system='phone') | Practitioner.telecom.where(system='phone') | PractitionerRole.telecom.where(system='phone') | RelatedPerson.telecom.where(system='phone') | OrganizationAffiliation.telecom.where(system='phone')"
        }
    ],
    "abatement-string": [
        {
            name: "abatement-string",
            'type: STRING,
            base: ["Condition"],
            expression: "Condition.abatement.as(string)"
        }
    ],
    "entity-type": [
        {
            name: "entity-type",
            'type: TOKEN,
            base: ["AuditEvent"],
            expression: "AuditEvent.entity.type"
        }
    ],
    "study": [
        {
            name: "study",
            'type: REFERENCE,
            base: ["ResearchSubject","AdverseEvent"],
            expression: "AdverseEvent.study | ResearchSubject.study"
        }
    ],
    "_query": [
        {
            name: "_query",
            'type: TOKEN,
            base: ["Resource"],
            expression: ""
        }
    ],
    "performing-organization": [
        {
            name: "performing-organization",
            'type: REFERENCE,
            base: ["ChargeItem"],
            expression: "ChargeItem.performingOrganization"
        }
    ],
    "gender": [
        {
            name: "gender",
            'type: TOKEN,
            base: ["Patient","Person","Practitioner","RelatedPerson"],
            expression: "Patient.gender | Person.gender | Practitioner.gender | RelatedPerson.gender"
        }
    ],
    "confidentiality": [
        {
            name: "confidentiality",
            'type: TOKEN,
            base: ["Composition"],
            expression: "Composition.confidentiality"
        }
    ],
    "context-type": [
        {
            name: "context-type",
            'type: TOKEN,
            base: ["EventDefinition","Evidence","ResearchElementDefinition","Library","TestScript","EvidenceVariable","Questionnaire","ResearchDefinition","Measure","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","ExampleScenario","PlanDefinition","ChargeItemDefinition"],
            expression: "ChargeItemDefinition.useContext.code | PlanDefinition.useContext.code | ExampleScenario.useContext.code | CapabilityStatement.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | ValueSet.useContext.code | Measure.useContext.code | ResearchDefinition.useContext.code | Questionnaire.useContext.code | EvidenceVariable.useContext.code | TestScript.useContext.code | Library.useContext.code | ResearchElementDefinition.useContext.code | Evidence.useContext.code | EventDefinition.useContext.code"
        }
    ],
    "group-identifier": [
        {
            name: "group-identifier",
            'type: TOKEN,
            base: ["DeviceRequest","RequestGroup","CommunicationRequest","Task"],
            expression: "Task.groupIdentifier | CommunicationRequest.groupIdentifier | RequestGroup.groupIdentifier | DeviceRequest.groupIdentifier"
        }
    ],
    "based-on": [
        {
            name: "based-on",
            'type: REFERENCE,
            base: ["CommunicationRequest","ServiceRequest","Appointment","Encounter","Task","Procedure","Communication","QuestionnaireResponse","CarePlan","Media","Observation","DiagnosticReport","DeviceRequest"],
            expression: "DeviceRequest.basedOn | DiagnosticReport.basedOn | Observation.basedOn | Media.basedOn | CarePlan.basedOn | QuestionnaireResponse.basedOn | Communication.basedOn | Procedure.basedOn | Task.basedOn | Encounter.basedOn | Appointment.basedOn | ServiceRequest.basedOn | CommunicationRequest.basedOn"
        }
    ],
    "telecom": [
        {
            name: "telecom",
            'type: TOKEN,
            base: ["Patient","Person","Practitioner","PractitionerRole","RelatedPerson","NamingSystem","OrganizationAffiliation"],
            expression: "OrganizationAffiliation.telecom | NamingSystem.contact.telecom | Patient.telecom | Person.telecom | Practitioner.telecom | PractitionerRole.telecom | RelatedPerson.telecom"
        }
    ],
    "event": [
        {
            name: "event",
            'type: TOKEN,
            base: ["AdverseEvent","MessageDefinition","DocumentReference","MessageHeader"],
            expression: "MessageHeader.event | DocumentReference.context.event | MessageDefinition.event | AdverseEvent.event"
        }
    ],
    "address-city": [
        {
            name: "address-city",
            'type: STRING,
            base: ["InsurancePlan","Organization","Patient","Person","Practitioner","RelatedPerson","Location"],
            expression: "Location.address.city | Patient.address.city | Person.address.city | Practitioner.address.city | RelatedPerson.address.city | Organization.address.city | InsurancePlan.contact.address.city"
        }
    ],
    "managing-entity": [
        {
            name: "managing-entity",
            'type: REFERENCE,
            base: ["Group"],
            expression: "Group.managingEntity"
        }
    ],
    "performer": [
        {
            name: "performer",
            'type: TOKEN,
            base: ["Task"],
            expression: "Task.performerType"
        },
        {
            name: "performer",
            'type: REFERENCE,
            base: ["MedicationDispense","DiagnosticReport","Immunization","DeviceRequest","CarePlan","ServiceRequest","MedicationAdministration","Observation","Procedure","ImagingStudy","RiskAssessment"],
            expression: "RiskAssessment.performer | ImagingStudy.series.performer.actor | Procedure.performer.actor | Observation.performer | MedicationAdministration.performer.actor | ServiceRequest.performer | CarePlan.activity.detail.performer | DeviceRequest.performer | Immunization.performer.actor | DiagnosticReport.performer | MedicationDispense.performer.actor"
        }
    ],
    "resource-profile": [
        {
            name: "resource-profile",
            'type: REFERENCE,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.rest.resource.profile"
        }
    ],
    "owned-by": [
        {
            name: "owned-by",
            'type: REFERENCE,
            base: ["InsurancePlan"],
            expression: "InsurancePlan.ownedBy"
        }
    ],
    "data-absent-reason": [
        {
            name: "data-absent-reason",
            'type: TOKEN,
            base: ["Observation"],
            expression: "Observation.dataAbsentReason"
        }
    ],
    "abstract": [
        {
            name: "abstract",
            'type: TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.abstract"
        }
    ],
    "id-type": [
        {
            name: "id-type",
            'type: TOKEN,
            base: ["NamingSystem"],
            expression: "NamingSystem.uniqueId.type"
        }
    ],
    "immunization-event": [
        {
            name: "immunization-event",
            'type: REFERENCE,
            base: ["ImmunizationEvaluation"],
            expression: "ImmunizationEvaluation.immunizationEvent"
        }
    ],
    "site": [
        {
            name: "site",
            'type: REFERENCE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.site"
        },
        {
            name: "site",
            'type: TOKEN,
            base: ["AuditEvent","Media"],
            expression: "Media.bodySite | AuditEvent.source.site"
        }
    ],
    "prescription": [
        {
            name: "prescription",
            'type: REFERENCE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.authorizingPrescription"
        }
    ],
    "organization": [
        {
            name: "organization",
            'type: REFERENCE,
            base: ["Device","EpisodeOfCare","PractitionerRole","Endpoint","Patient","Location","HealthcareService","Person","Consent"],
            expression: "Consent.organization | Person.managingOrganization | HealthcareService.providedBy | Location.managingOrganization | Patient.managingOrganization | Endpoint.managingOrganization | PractitionerRole.organization | EpisodeOfCare.managingOrganization | Device.owner"
        }
    ],
    "testscript": [
        {
            name: "testscript",
            'type: REFERENCE,
            base: ["TestReport"],
            expression: "TestReport.testScript"
        }
    ],
    "_text": [
        {
            name: "_text",
            'type: STRING,
            base: ["Resource"],
            expression: ""
        }
    ],
    "body-site": [
        {
            name: "body-site",
            'type: TOKEN,
            base: ["Condition","ServiceRequest"],
            expression: "ServiceRequest.bodySite | Condition.bodySite"
        }
    ],
    "facility": [
        {
            name: "facility",
            'type: TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.context.facilityType"
        },
        {
            name: "facility",
            'type: REFERENCE,
            base: ["CoverageEligibilityRequest","Claim","ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.facility | Claim.facility | CoverageEligibilityRequest.facility"
        }
    ],
    "combo-value-concept": [
        {
            name: "combo-value-concept",
            'type: TOKEN,
            base: ["Observation"],
            expression: "(Observation.value as CodeableConcept) | (Observation.component.value as CodeableConcept)"
        }
    ],
    "date": [
        {
            name: "date",
            'type: DATE,
            base: ["ExampleScenario","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","ImmunizationRecommendation","AuditEvent","Questionnaire","Library","EvidenceVariable","DocumentReference","ResearchStudy","PlanDefinition","TestScript","Appointment","Invoice","ChargeItemDefinition","AllergyIntolerance","CarePlan","CareTeam","ClinicalImpression","Composition","Consent","DiagnosticReport","Encounter","EpisodeOfCare","FamilyMemberHistory","Flag","Immunization","List","Observation","Procedure","RiskAssessment","SupplyRequest","MeasureReport","MedicationRequest","Schedule","Evidence","ImmunizationEvaluation","ResearchSubject","Measure","PractitionerRole","ResearchDefinition","ResearchElementDefinition","OrganizationAffiliation","AdverseEvent","EventDefinition"],
            expression: "EventDefinition.date | AdverseEvent.date | OrganizationAffiliation.period | ResearchElementDefinition.date | ResearchDefinition.date | PractitionerRole.period | Measure.date | ResearchSubject.period | ImmunizationEvaluation.date | Evidence.date | Schedule.planningHorizon | MedicationRequest.dosageInstruction.timing.event | MeasureReport.date | AllergyIntolerance.recordedDate | CarePlan.period | CareTeam.period | ClinicalImpression.date | Composition.date | Consent.dateTime | DiagnosticReport.effective | Encounter.period | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence as dateTime) | List.date | Observation.effective | Procedure.performed | (RiskAssessment.occurrence as dateTime) | SupplyRequest.authoredOn | ChargeItemDefinition.date | Invoice.date | Appointment.start | TestScript.date | PlanDefinition.date | ResearchStudy.period | DocumentReference.date | EvidenceVariable.date | Library.date | Questionnaire.date | AuditEvent.recorded | ImmunizationRecommendation.date | CapabilityStatement.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | GraphDefinition.date | ImplementationGuide.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | TerminologyCapabilities.date | ValueSet.date | ExampleScenario.date"
        }
    ],
    "instantiates": [
        {
            name: "instantiates",
            'type: URI,
            base: ["Contract"],
            expression: "Contract.instantiatesUri"
        }
    ],
    "address-state": [
        {
            name: "address-state",
            'type: STRING,
            base: ["InsurancePlan","Patient","Person","Practitioner","RelatedPerson","Location","Organization"],
            expression: "Organization.address.state | Location.address.state | Patient.address.state | Person.address.state | Practitioner.address.state | RelatedPerson.address.state | InsurancePlan.contact.address.state"
        }
    ],
    "data": [
        {
            name: "data",
            'type: REFERENCE,
            base: ["Consent"],
            expression: "Consent.provision.data.reference"
        }
    ],
    "verification-status": [
        {
            name: "verification-status",
            'type: TOKEN,
            base: ["Condition","AllergyIntolerance"],
            expression: "AllergyIntolerance.verificationStatus | Condition.verificationStatus"
        }
    ],
    "appointment": [
        {
            name: "appointment",
            'type: REFERENCE,
            base: ["Encounter","AppointmentResponse"],
            expression: "AppointmentResponse.appointment | Encounter.appointment"
        }
    ],
    "section": [
        {
            name: "section",
            'type: TOKEN,
            base: ["Composition"],
            expression: "Composition.section.code"
        }
    ],
    "monograph-type": [
        {
            name: "monograph-type",
            'type: TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.monograph.type"
        }
    ],
    "window-end": [
        {
            name: "window-end",
            'type: NUMBER,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.referenceSeq.windowEnd"
        }
    ],
    "reference": [
        {
            name: "reference",
            'type: URI,
            base: ["ValueSet"],
            expression: "ValueSet.compose.include.system"
        }
    ],
    "depends-on": [
        {
            name: "depends-on",
            'type: REFERENCE,
            base: ["ResearchDefinition","ImplementationGuide","Library","PlanDefinition","EventDefinition","ResearchElementDefinition","Measure"],
            expression: "Measure.relatedArtifact.where(type='depends-on').resource | Measure.library | ResearchElementDefinition.relatedArtifact.where(type='depends-on').resource | ResearchElementDefinition.library | EventDefinition.relatedArtifact.where(type='depends-on').resource | PlanDefinition.relatedArtifact.where(type='depends-on').resource | PlanDefinition.library | Library.relatedArtifact.where(type='depends-on').resource | ImplementationGuide.dependsOn.uri | ResearchDefinition.relatedArtifact.where(type='depends-on').resource | ResearchDefinition.library"
        }
    ],
    "protocol": [
        {
            name: "protocol",
            'type: REFERENCE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.protocol"
        }
    ],
    "entity-name": [
        {
            name: "entity-name",
            'type: STRING,
            base: ["AuditEvent"],
            expression: "AuditEvent.entity.name"
        }
    ],
    "price-override": [
        {
            name: "price-override",
            'type: QUANTITY,
            base: ["ChargeItem"],
            expression: "ChargeItem.priceOverride"
        }
    ],
    "monitoring-program-type": [
        {
            name: "monitoring-program-type",
            'type: TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.monitoringProgram.type"
        }
    ]    
};
//Number of search params in BASE_IG_SEARCH_PARAMS_5  = 48
final readonly & map<FHIRSearchParameterDefinition[]> BASE_IG_SEARCH_PARAMS_5 = {
    "procedure-udi": [
        {
            name: "procedure-udi",
            'type: REFERENCE,
            base: ["Claim","ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.procedure.udi | Claim.procedure.udi"
        }
    ],
    "doseform": [
        {
            name: "doseform",
            'type: TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.doseForm"
        }
    ],
    "individual": [
        {
            name: "individual",
            'type: REFERENCE,
            base: ["ResearchSubject"],
            expression: "ResearchSubject.individual"
        }
    ],
    "resource": [
        {
            name: "resource",
            'type: REFERENCE,
            base: ["ImplementationGuide"],
            expression: "ImplementationGuide.definition.resource.reference"
        },
        {
            name: "resource",
            'type: TOKEN,
            base: ["CapabilityStatement","CompartmentDefinition"],
            expression: "CompartmentDefinition.resource.code | CapabilityStatement.rest.resource.type"
        }
    ],
    "created": [
        {
            name: "created",
            'type: DATE,
            base: ["PaymentReconciliation","CoverageEligibilityRequest","DocumentManifest","CoverageEligibilityResponse","PaymentNotice","Claim","Basic","Media","ExplanationOfBenefit","ClaimResponse"],
            expression: "ClaimResponse.created | ExplanationOfBenefit.created | Media.created | Basic.created | Claim.created | PaymentNotice.created | CoverageEligibilityResponse.created | DocumentManifest.created | CoverageEligibilityRequest.created | PaymentReconciliation.created"
        }
    ],
    "kind": [
        {
            name: "kind",
            'type: TOKEN,
            base: ["OperationDefinition","StructureDefinition","NamingSystem"],
            expression: "NamingSystem.kind | StructureDefinition.kind | OperationDefinition.kind"
        }
    ],
    "format": [
        {
            name: "format",
            'type: TOKEN,
            base: ["CapabilityStatement","DocumentReference"],
            expression: "DocumentReference.content.format | CapabilityStatement.format"
        }
    ],
    "instantiates-canonical": [
        {
            name: "instantiates-canonical",
            'type: REFERENCE,
            base: ["CarePlan","Communication","DeviceRequest","NutritionOrder","Procedure","ServiceRequest","FamilyMemberHistory","RequestGroup"],
            expression: "RequestGroup.instantiatesCanonical | FamilyMemberHistory.instantiatesCanonical | ServiceRequest.instantiatesCanonical | Procedure.instantiatesCanonical | NutritionOrder.instantiatesCanonical | DeviceRequest.instantiatesCanonical | Communication.instantiatesCanonical | CarePlan.instantiatesCanonical"
        }
    ],
    "sent": [
        {
            name: "sent",
            'type: DATE,
            base: ["Communication"],
            expression: "Communication.sent"
        }
    ],
    "code-value-concept": [
        {
            name: "code-value-concept",
            'type: COMPOSITE,
            base: ["Observation"],
            expression: "Observation"
        }
    ],
    "asserter": [
        {
            name: "asserter",
            'type: REFERENCE,
            base: ["AllergyIntolerance","Condition"],
            expression: "Condition.asserter | AllergyIntolerance.asserter"
        }
    ],
    "vaccine-code": [
        {
            name: "vaccine-code",
            'type: TOKEN,
            base: ["Immunization"],
            expression: "Immunization.vaccineCode"
        }
    ],
    "publisher": [
        {
            name: "publisher",
            'type: STRING,
            base: ["ChargeItemDefinition","TestScript","CapabilityStatement","CodeSystem","CompartmentDefinition","ConceptMap","GraphDefinition","ImplementationGuide","MessageDefinition","NamingSystem","OperationDefinition","SearchParameter","StructureDefinition","StructureMap","TerminologyCapabilities","ValueSet","ResearchDefinition","ExampleScenario","Measure","ResearchElementDefinition","EvidenceVariable","EventDefinition","Questionnaire","PlanDefinition","Library","Evidence"],
            expression: "Evidence.publisher | Library.publisher | PlanDefinition.publisher | Questionnaire.publisher | EventDefinition.publisher | EvidenceVariable.publisher | ResearchElementDefinition.publisher | Measure.publisher | ExampleScenario.publisher | ResearchDefinition.publisher | CapabilityStatement.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | ValueSet.publisher | TestScript.publisher | ChargeItemDefinition.publisher"
        }
    ],
    "topic": [
        {
            name: "topic",
            'type: TOKEN,
            base: ["EventDefinition","Library","PlanDefinition","ResearchElementDefinition","Measure","ResearchDefinition"],
            expression: "ResearchDefinition.topic | Measure.topic | ResearchElementDefinition.topic | PlanDefinition.topic | Library.topic | EventDefinition.topic"
        }
    ],
    "relatesto": [
        {
            name: "relatesto",
            'type: REFERENCE,
            base: ["DocumentReference"],
            expression: "DocumentReference.relatesTo.target"
        }
    ],
    "care-team": [
        {
            name: "care-team",
            'type: REFERENCE,
            base: ["Claim","CarePlan","ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.careTeam.provider | CarePlan.careTeam | Claim.careTeam.provider"
        }
    ],
    "request": [
        {
            name: "request",
            'type: REFERENCE,
            base: ["CoverageEligibilityResponse","MedicationAdministration","PaymentReconciliation","EnrollmentResponse","ClaimResponse","PaymentNotice"],
            expression: "PaymentNotice.request | ClaimResponse.request | EnrollmentResponse.request | PaymentReconciliation.request | MedicationAdministration.request | CoverageEligibilityResponse.request"
        },
        {
            name: "request",
            'type: TOKEN,
            base: ["GuidanceResponse"],
            expression: "GuidanceResponse.requestIdentifier"
        }
    ],
    "sponsor": [
        {
            name: "sponsor",
            'type: REFERENCE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.sponsor"
        }
    ],
    "agent-type": [
        {
            name: "agent-type",
            'type: TOKEN,
            base: ["Provenance"],
            expression: "Provenance.agent.type"
        }
    ],
    "purpose": [
        {
            name: "purpose",
            'type: TOKEN,
            base: ["Consent"],
            expression: "Consent.provision.purpose"
        }
    ],
    "link": [
        {
            name: "link",
            'type: REFERENCE,
            base: ["Patient","Person"],
            expression: "Person.link.target | Patient.link.other"
        }
    ],
    "network": [
        {
            name: "network",
            'type: REFERENCE,
            base: ["OrganizationAffiliation"],
            expression: "OrganizationAffiliation.network"
        }
    ],
    "onset-date": [
        {
            name: "onset-date",
            'type: DATE,
            base: ["Condition"],
            expression: "Condition.onset.as(dateTime) | Condition.onset.as(Period)"
        }
    ],
    "phonetic": [
        {
            name: "phonetic",
            'type: STRING,
            base: ["Organization","InsurancePlan","Patient","Person","Practitioner","RelatedPerson"],
            expression: "Patient.name | Person.name | Practitioner.name | RelatedPerson.name | InsurancePlan.name | Organization.name"
        }
    ],
    "patient": [
        {
            name: "patient",
            'type: REFERENCE,
            base: ["MeasureReport","ClaimResponse","Person","ImmunizationEvaluation","Account","AppointmentResponse","Device","ChargeItem","BodyStructure","ResearchSubject","RelatedPerson","CoverageEligibilityRequest","Provenance","Specimen","CommunicationRequest","Communication","Task","QuestionnaireResponse","Media","AllergyIntolerance","CarePlan","CareTeam","ClinicalImpression","Composition","Condition","Consent","DetectedIssue","DeviceRequest","DeviceUseStatement","DiagnosticReport","DocumentManifest","DocumentReference","Encounter","EpisodeOfCare","FamilyMemberHistory","Flag","Goal","ImagingStudy","Immunization","List","MedicationAdministration","MedicationDispense","MedicationRequest","MedicationStatement","NutritionOrder","Observation","Procedure","RiskAssessment","ServiceRequest","SupplyDelivery","VisionPrescription","Appointment","Invoice","GuidanceResponse","ImmunizationRecommendation","AuditEvent","RequestGroup","CoverageEligibilityResponse","EnrollmentRequest","Coverage","MolecularSequence","ExplanationOfBenefit","Basic","Contract","Claim"],
            expression: "Claim.patient | Contract.subject.where(resolve() is Patient) | Basic.subject.where(resolve() is Patient) | ExplanationOfBenefit.patient | MolecularSequence.patient | Coverage.beneficiary | EnrollmentRequest.candidate | CoverageEligibilityResponse.patient | RequestGroup.subject.where(resolve() is Patient) | AuditEvent.agent.who.where(resolve() is Patient) | AuditEvent.entity.what.where(resolve() is Patient) | ImmunizationRecommendation.patient | GuidanceResponse.subject.where(resolve() is Patient) | Invoice.subject.where(resolve() is Patient) | Appointment.participant.actor.where(resolve() is Patient) | AllergyIntolerance.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ClinicalImpression.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.patient | DetectedIssue.patient | DeviceRequest.subject.where(resolve() is Patient) | DeviceUseStatement.subject.where(resolve() is Patient) | DiagnosticReport.subject.where(resolve() is Patient) | DocumentManifest.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EpisodeOfCare.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | List.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | NutritionOrder.patient | Observation.subject.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | SupplyDelivery.patient | VisionPrescription.patient | Media.subject.where(resolve() is Patient) | QuestionnaireResponse.subject.where(resolve() is Patient) | Task.for.where(resolve() is Patient) | Communication.subject.where(resolve() is Patient) | CommunicationRequest.subject.where(resolve() is Patient) | Specimen.subject.where(resolve() is Patient) | Provenance.target.where(resolve() is Patient) | CoverageEligibilityRequest.patient | RelatedPerson.patient | ResearchSubject.individual | BodyStructure.patient | ChargeItem.subject.where(resolve() is Patient) | Device.patient | AppointmentResponse.actor.where(resolve() is Patient) | Account.subject.where(resolve() is Patient) | ImmunizationEvaluation.patient | Person.link.target.where(resolve() is Patient) | ClaimResponse.patient | MeasureReport.subject.where(resolve() is Patient)"
        }
    ],
    "specimen": [
        {
            name: "specimen",
            'type: REFERENCE,
            base: ["DiagnosticReport","ServiceRequest","Observation"],
            expression: "Observation.specimen | ServiceRequest.specimen | DiagnosticReport.specimen"
        }
    ],
    "value": [
        {
            name: "value",
            'type: TOKEN,
            base: ["Group"],
            expression: "(Group.characteristic.value as CodeableConcept) | (Group.characteristic.value as boolean)"
        },
        {
            name: "value",
            'type: STRING,
            base: ["NamingSystem"],
            expression: "NamingSystem.uniqueId.value"
        }
    ],
    "target-uri": [
        {
            name: "target-uri",
            'type: REFERENCE,
            base: ["ConceptMap"],
            expression: "(ConceptMap.target as uri)"
        }
    ],
    "reaction-date": [
        {
            name: "reaction-date",
            'type: DATE,
            base: ["Immunization"],
            expression: "Immunization.reaction.date"
        }
    ],
    "prescriber": [
        {
            name: "prescriber",
            'type: REFERENCE,
            base: ["VisionPrescription"],
            expression: "VisionPrescription.prescriber"
        }
    ],
    "quantity": [
        {
            name: "quantity",
            'type: QUANTITY,
            base: ["ChargeItem","Substance"],
            expression: "Substance.instance.quantity | ChargeItem.quantity"
        }
    ],
    "totalgross": [
        {
            name: "totalgross",
            'type: QUANTITY,
            base: ["Invoice"],
            expression: "Invoice.totalGross"
        }
    ],
    "combo-code": [
        {
            name: "combo-code",
            'type: TOKEN,
            base: ["Observation"],
            expression: "Observation.code | Observation.component.code"
        }
    ],
    "actuality": [
        {
            name: "actuality",
            'type: TOKEN,
            base: ["AdverseEvent"],
            expression: "AdverseEvent.actuality"
        }
    ],
    "chromosome": [
        {
            name: "chromosome",
            'type: TOKEN,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.referenceSeq.chromosome"
        }
    ],
    "encounter": [
        {
            name: "encounter",
            'type: REFERENCE,
            base: ["Communication","Task","ClinicalImpression","ImagingStudy","MedicationRequest","Condition","Composition","DeviceRequest","DiagnosticReport","DocumentReference","Flag","List","NutritionOrder","Observation","Procedure","RiskAssessment","ServiceRequest","VisionPrescription","Media","ExplanationOfBenefit","CommunicationRequest","CarePlan","QuestionnaireResponse","CareTeam","RequestGroup","Claim"],
            expression: "Claim.item.encounter | RequestGroup.encounter | CareTeam.encounter | QuestionnaireResponse.encounter | CarePlan.encounter | CommunicationRequest.encounter | ExplanationOfBenefit.item.encounter | Media.encounter | Composition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | DocumentReference.context.encounter.where(resolve() is Encounter) | Flag.encounter | List.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | RiskAssessment.encounter | ServiceRequest.encounter | VisionPrescription.encounter | Condition.encounter | MedicationRequest.encounter | ImagingStudy.encounter | ClinicalImpression.encounter | Task.encounter | Communication.encounter"
        }
    ],
    "intent": [
        {
            name: "intent",
            'type: TOKEN,
            base: ["DeviceRequest","MedicationRequest","ServiceRequest","CarePlan","Task","RequestGroup"],
            expression: "RequestGroup.intent | Task.intent | CarePlan.intent | ServiceRequest.intent | MedicationRequest.intent | DeviceRequest.intent"
        }
    ],
    "variant-end": [
        {
            name: "variant-end",
            'type: NUMBER,
            base: ["MolecularSequence"],
            expression: "MolecularSequence.variant.end"
        }
    ],
    "whenprepared": [
        {
            name: "whenprepared",
            'type: DATE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.whenPrepared"
        }
    ],
    "supported-profile": [
        {
            name: "supported-profile",
            'type: REFERENCE,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.rest.resource.supportedProfile"
        }
    ],
    "contenttype": [
        {
            name: "contenttype",
            'type: TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.content.attachment.contentType"
        }
    ],
    "response": [
        {
            name: "response",
            'type: REFERENCE,
            base: ["PaymentNotice"],
            expression: "PaymentNotice.response"
        }
    ],
    "investigation": [
        {
            name: "investigation",
            'type: REFERENCE,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.investigation.item"
        }
    ],
    "derivation": [
        {
            name: "derivation",
            'type: TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.derivation"
        }
    ],
    "component-value-concept": [
        {
            name: "component-value-concept",
            'type: TOKEN,
            base: ["Observation"],
            expression: "(Observation.component.value as CodeableConcept)"
        }
    ],
    "category": [
        {
            name: "category",
            'type: TOKEN,
            base: ["Observation","MedicationStatement","DeviceMetric","Communication","MessageDefinition","CarePlan","ResearchStudy","SupplyRequest","DiagnosticReport","Procedure","ServiceRequest","CommunicationRequest","Condition","CareTeam","Consent","AdverseEvent","AllergyIntolerance","Composition","MedicationRequest","Substance","Goal","DocumentReference"],
            expression: "DocumentReference.category | Goal.category | Substance.category | MedicationRequest.category | Composition.category | AllergyIntolerance.category | AdverseEvent.category | Consent.category | CareTeam.category | Condition.category | CommunicationRequest.category | ServiceRequest.category | Procedure.category | DiagnosticReport.category | SupplyRequest.category | ResearchStudy.category | CarePlan.category | MessageDefinition.category | Communication.category | DeviceMetric.category | MedicationStatement.category | Observation.category"
        }
    ],
    "account": [
        {
            name: "account",
            'type: REFERENCE,
            base: ["Encounter","ChargeItem","Invoice"],
            expression: "Invoice.account | ChargeItem.account | Encounter.account"
        }
    ],
    "payment-issuer": [
        {
            name: "payment-issuer",
            'type: REFERENCE,
            base: ["PaymentReconciliation"],
            expression: "PaymentReconciliation.paymentIssuer"
        }
    ]    
};

public json[] FHIR_VALUE_SETS = [];
public json[] FHIR_CODE_SYSTEMS = [];
