// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
import ballerina/lang.regexp;

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

public configurable CdsService[] cds_services = ?;

// This will hold a map of prefetch template key and the context property uesd on it.
// For example, 
// {
//     "description" : "An example of a CDS Service that returns a static set of cards"     ,
//     "hook":  "patient-view",
//     "id":  "static-patient-greeter",
//     "title":  "Static CDS Service Example",
//     "prefetch" :  {
//         "patientRecord" : "Patient/{{context.patientId}}",
//         "encounterRecord" : "Encounter/{{context.encounterId}}""
// }
// For the above cds service, an entry will be created in below map
// "static-patient-greeter" : {
//      "patientRecord": "patientId",
//      "encounterRecord": "encounterId"  
// }
isolated map<map<string>> prefetchTemplateAndContextPropertyMap = {};

// The below init method will validate the CDS hooks before registering to the memory.
function init() returns error? {
    string[] cdsServiceIds = [];
    foreach CdsService cdsService in cds_services {

        // Check whether there are any CDS defintions with same id before registering.
        if (cdsServiceIds.filter(s => s == cdsService.id).length() > 0) {
            string message = string `You are trying to register cds service it has been already registered with a same id: ${cdsService.id}`;
            return createCdsError(message, 400);
        }
        cdsServiceIds.push(cdsService.id);

        // The below logic will process the prefetch templates defined in the cds services
        // and create entries in  prefetchTemplateAndContextPropertyMap.
        map<string>? prefetchTemplates = cdsService.prefetch;
        map<string> tempMap = {};
        if prefetchTemplates is map<string> {
            foreach var templateKey in prefetchTemplates.keys() {
                string prefetchTemplate = prefetchTemplates.get(templateKey);
                string contextProperty = regexp:split(re `\.`, regexp:split(re `\}\}`, regexp:split(re `\{\{`, prefetchTemplate)[1])[0])[1];
                tempMap[templateKey] = contextProperty;
            }

            lock {
                prefetchTemplateAndContextPropertyMap[cdsService.id] = tempMap.clone();
            }
        }
    }
}
