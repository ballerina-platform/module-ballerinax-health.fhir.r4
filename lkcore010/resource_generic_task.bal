// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r4;

public const string PROFILE_BASE_GENERICTASK = "http://openhie.org/fhir/sri-lanka/StructureDefinition/generic-task";
public const RESOURCE_NAME_GENERICTASK = "Task";

# FHIR GenericTask resource record.
#
# + resourceType - The type of the resource describes
# + insurance - Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
# + note - Free-text information captured about the task as it progresses.
# + partOf - Task that this particular task is part of.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A name or code (or both) briefly describing what the task involves.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + for - The entity who benefits from the performance of the service specified in the task (e.g., the patient).
# + description - A free-text description of what is to be performed.
# + focus - The request being actioned or the resource being manipulated by this task.
# + reasonReference - A resource reference indicating why this task needs to be performed.
# + language - The base language in which the resource is written.
# + instantiatesUri - The URL pointing to an *externally* maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
# + relevantHistory - Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
# + output - Outputs produced by the Task.
# + statusReason - An explanation as to why this task is held, failed, was refused, etc.
# + executionPeriod - reason(s) why this should be supported.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + reasonCode - A description or code indicating why this task needs to be performed.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + basedOn - BasedOn refers to a higher-level authorization that triggered the creation of the task. It references a 'request' resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the 'request' resource the task is seeking to fulfill. This latter resource is referenced by FocusOn. For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
# + owner - Individual organization or Device currently responsible for task execution.
# + requester - The creator of the task.
# + identifier - The business identifier for this task.
# + authoredOn - The date and time this task was created.
# + businessStatus - Contains business-specific nuances of the business state.
# + encounter - The healthcare event (e.g. a patient and healthcare provider interaction) during which this task was created.
# + instantiatesCanonical - The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
# + priority - Indicates how quickly the Task should be addressed with respect to other requests.
# + intent - Indicates the 'level' of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
# + performerType - The kind of participant that should perform the task.
# + input - Additional information that may be needed in the execution of the task.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + restriction - If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + location - Principal physical location where the this task is performed.
# + lastModified - The date and time of last modification to this task.
# + groupIdentifier - An identifier that links together multiple tasks and other requests that were created in the same context.
# + status - The current status of the task.
@r4:ResourceDefinition {
    resourceType: "Task",
    baseType: r4:DomainResource,
    profile: "http://openhie.org/fhir/sri-lanka/StructureDefinition/generic-task",
    elements: {
        "insurance" : {
            name: "insurance",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.insurance"
        },
        "note" : {
            name: "note",
            dataType: r4:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.note"
        },
        "partOf" : {
            name: "partOf",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.partOf"
        },
        "extension" : {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.extension"
        },
        "code" : {
            name: "code",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.code",
            valueSet: "http://hl7.org/fhir/ValueSet/task-code"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.modifierExtension"
        },
        "for" : {
            name: "for",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "Task.for"
        },
        "description" : {
            name: "description",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.description"
        },
        "focus" : {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.focus"
        },
        "reasonReference" : {
            name: "reasonReference",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.reasonReference"
        },
        "language" : {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "instantiatesUri" : {
            name: "instantiatesUri",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.instantiatesUri"
        },
        "relevantHistory" : {
            name: "relevantHistory",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.relevantHistory"
        },
        "output" : {
            name: "output",
            dataType: GenericTaskOutput,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.output"
        },
        "statusReason" : {
            name: "statusReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.statusReason"
        },
        "executionPeriod" : {
            name: "executionPeriod",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.executionPeriod"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.id"
        },
        "reasonCode" : {
            name: "reasonCode",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.reasonCode"
        },
        "text" : {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.text"
        },
        "basedOn" : {
            name: "basedOn",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.basedOn"
        },
        "owner" : {
            name: "owner",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.owner"
        },
        "requester" : {
            name: "requester",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "Task.requester"
        },
        "identifier" : {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.identifier"
        },
        "authoredOn" : {
            name: "authoredOn",
            dataType: r4:dateTime,
            min: 1,
            max: 1,
            isArray: false,
            path: "Task.authoredOn"
        },
        "businessStatus" : {
            name: "businessStatus",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.businessStatus"
        },
        "encounter" : {
            name: "encounter",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "Task.encounter"
        },
        "instantiatesCanonical" : {
            name: "instantiatesCanonical",
            dataType: r4:canonical,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.instantiatesCanonical"
        },
        "priority" : {
            name: "priority",
            dataType: GenericTaskPriority,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.priority",
            valueSet: "http://hl7.org/fhir/ValueSet/request-priority|4.0.1"
        },
        "intent" : {
            name: "intent",
            dataType: GenericTaskIntent,
            min: 1,
            max: 1,
            isArray: false,
            path: "Task.intent",
            valueSet: "http://hl7.org/fhir/ValueSet/task-intent|4.0.1"
        },
        "performerType" : {
            name: "performerType",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.performerType",
            valueSet: "http://hl7.org/fhir/ValueSet/performer-role"
        },
        "input" : {
            name: "input",
            dataType: GenericTaskInput,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.input"
        },
        "contained" : {
            name: "contained",
            dataType: r4:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Task.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.meta"
        },
        "restriction" : {
            name: "restriction",
            dataType: GenericTaskRestriction,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.restriction"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.implicitRules"
        },
        "location" : {
            name: "location",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "Task.location"
        },
        "lastModified" : {
            name: "lastModified",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.lastModified"
        },
        "groupIdentifier" : {
            name: "groupIdentifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            path: "Task.groupIdentifier"
        },
        "status" : {
            name: "status",
            dataType: GenericTaskStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "Task.status",
            valueSet: "http://hl7.org/fhir/ValueSet/task-status|4.0.1"
        }
    },
    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}
public type GenericTask record {|
    *r4:DomainResource;

    RESOURCE_NAME_GENERICTASK resourceType = RESOURCE_NAME_GENERICTASK;

    r4:Reference[] insurance?;
    r4:Annotation[] note?;
    r4:Reference[] partOf?;
    r4:Extension[] extension?;
    r4:CodeableConcept code?;
    r4:Extension[] modifierExtension?;
    r4:Reference for;
    string description?;
    r4:Reference focus?;
    r4:Reference reasonReference?;
    r4:code language?;
    r4:uri instantiatesUri?;
    r4:Reference[] relevantHistory?;
    GenericTaskOutput[] output?;
    r4:CodeableConcept statusReason?;
    r4:Period executionPeriod?;
    string id?;
    r4:CodeableConcept reasonCode?;
    r4:Narrative text?;
    r4:Reference[] basedOn?;
    r4:Reference owner?;
    r4:Reference requester;
    r4:Identifier[] identifier?;
    r4:dateTime authoredOn;
    r4:CodeableConcept businessStatus?;
    r4:Reference encounter;
    r4:canonical instantiatesCanonical?;
    GenericTaskPriority priority?;
    GenericTaskIntent intent;
    r4:CodeableConcept[] performerType?;
    GenericTaskInput[] input?;
    r4:Resource[] contained?;
    r4:Meta meta?;
    GenericTaskRestriction restriction?;
    r4:uri implicitRules?;
    r4:Reference location;
    r4:dateTime lastModified?;
    r4:Identifier groupIdentifier?;
    GenericTaskStatus status;
    r4:Element ...;
|};

# FHIR GenericTaskOutput datatype record.
#
# + valueTime - The value of the Output parameter as a basic type.
# + valueTriggerDefinition - The value of the Output parameter as a basic type.
# + valueMoney - The value of the Output parameter as a basic type.
# + valueSignature - The value of the Output parameter as a basic type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'type - The name of the Output parameter.
# + valueUuid - The value of the Output parameter as a basic type.
# + valueRatio - The value of the Output parameter as a basic type.
# + valueParameterDefinition - The value of the Output parameter as a basic type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - The value of the Output parameter as a basic type.
# + valueUnsignedInt - The value of the Output parameter as a basic type.
# + valueQuantity - The value of the Output parameter as a basic type.
# + valueCanonical - The value of the Output parameter as a basic type.
# + valueCount - The value of the Output parameter as a basic type.
# + valueId - The value of the Output parameter as a basic type.
# + valueCode - The value of the Output parameter as a basic type.
# + valueAddress - The value of the Output parameter as a basic type.
# + valueContactPoint - The value of the Output parameter as a basic type.
# + valuePeriod - The value of the Output parameter as a basic type.
# + valueSampledData - The value of the Output parameter as a basic type.
# + valueTiming - The value of the Output parameter as a basic type.
# + valueInstant - The value of the Output parameter as a basic type.
# + valueAge - The value of the Output parameter as a basic type.
# + valueDosage - The value of the Output parameter as a basic type.
# + valueBase64Binary - The value of the Output parameter as a basic type.
# + valueBoolean - The value of the Output parameter as a basic type.
# + valueCoding - The value of the Output parameter as a basic type.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueIdentifier - The value of the Output parameter as a basic type.
# + valueExpression - The value of the Output parameter as a basic type.
# + valueReference - The value of the Output parameter as a basic type.
# + valueRange - The value of the Output parameter as a basic type.
# + valueUri - The value of the Output parameter as a basic type.
# + valueDistance - The value of the Output parameter as a basic type.
# + valueUrl - The value of the Output parameter as a basic type.
# + valueContactDetail - The value of the Output parameter as a basic type.
# + valueMeta - The value of the Output parameter as a basic type.
# + valueCodeableConcept - The value of the Output parameter as a basic type.
# + valueMarkdown - The value of the Output parameter as a basic type.
# + valueAttachment - The value of the Output parameter as a basic type.
# + valueUsageContext - The value of the Output parameter as a basic type.
# + valueDateTime - The value of the Output parameter as a basic type.
# + valueHumanName - The value of the Output parameter as a basic type.
# + valueRelatedArtifact - The value of the Output parameter as a basic type.
# + valueDecimal - The value of the Output parameter as a basic type.
# + valueDate - The value of the Output parameter as a basic type.
# + valueOid - The value of the Output parameter as a basic type.
# + valueContributor - The value of the Output parameter as a basic type.
# + valueString - The value of the Output parameter as a basic type.
# + valuePositiveInt - The value of the Output parameter as a basic type.
# + valueDuration - The value of the Output parameter as a basic type.
# + valueDataRequirement - The value of the Output parameter as a basic type.
# + valueAnnotation - The value of the Output parameter as a basic type.
@r4:DataTypeDefinition {
    name: "GenericTaskOutput",
    baseType: (),
    elements: {
        "valueTime": {
            name: "valueTime",
            dataType: r4:time,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueTriggerDefinition": {
            name: "valueTriggerDefinition",
            dataType: r4:TriggerDefinition,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueMoney": {
            name: "valueMoney",
            dataType: r4:Money,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueSignature": {
            name: "valueSignature",
            dataType: r4:Signature,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Task.output.modifierExtension"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "The name of the Output parameter.",
            path: "Task.output.type"
        },
        "valueUuid": {
            name: "valueUuid",
            dataType: r4:uuid,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueRatio": {
            name: "valueRatio",
            dataType: r4:Ratio,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueParameterDefinition": {
            name: "valueParameterDefinition",
            dataType: r4:ParameterDefinition,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Task.output.id"
        },
        "valueInteger": {
            name: "valueInteger",
            dataType: r4:integer,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueUnsignedInt": {
            name: "valueUnsignedInt",
            dataType: r4:unsignedInt,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r4:Quantity,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueCanonical": {
            name: "valueCanonical",
            dataType: r4:canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueCount": {
            name: "valueCount",
            dataType: r4:Count,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueId": {
            name: "valueId",
            dataType: r4:id,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueCode": {
            name: "valueCode",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueAddress": {
            name: "valueAddress",
            dataType: r4:Address,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueContactPoint": {
            name: "valueContactPoint",
            dataType: r4:ContactPoint,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valuePeriod": {
            name: "valuePeriod",
            dataType: r4:Period,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueSampledData": {
            name: "valueSampledData",
            dataType: r4:SampledData,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueTiming": {
            name: "valueTiming",
            dataType: r4:Timing,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueInstant": {
            name: "valueInstant",
            dataType: r4:instant,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueAge": {
            name: "valueAge",
            dataType: r4:Age,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueDosage": {
            name: "valueDosage",
            dataType: r4:Dosage,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueBase64Binary": {
            name: "valueBase64Binary",
            dataType: r4:base64Binary,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueCoding": {
            name: "valueCoding",
            dataType: r4:Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Task.output.extension"
        },
        "valueIdentifier": {
            name: "valueIdentifier",
            dataType: r4:Identifier,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueExpression": {
            name: "valueExpression",
            dataType: r4:Expression,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueReference": {
            name: "valueReference",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueRange": {
            name: "valueRange",
            dataType: r4:Range,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueUri": {
            name: "valueUri",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueDistance": {
            name: "valueDistance",
            dataType: r4:Distance,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueUrl": {
            name: "valueUrl",
            dataType: r4:urlType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueContactDetail": {
            name: "valueContactDetail",
            dataType: r4:ContactDetail,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueMeta": {
            name: "valueMeta",
            dataType: r4:Meta,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueMarkdown": {
            name: "valueMarkdown",
            dataType: r4:markdown,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: r4:Attachment,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueUsageContext": {
            name: "valueUsageContext",
            dataType: r4:UsageContext,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueDateTime": {
            name: "valueDateTime",
            dataType: r4:dateTime,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueHumanName": {
            name: "valueHumanName",
            dataType: r4:HumanName,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueRelatedArtifact": {
            name: "valueRelatedArtifact",
            dataType: r4:RelatedArtifact,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueDecimal": {
            name: "valueDecimal",
            dataType: decimal,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueDate": {
            name: "valueDate",
            dataType: r4:date,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueOid": {
            name: "valueOid",
            dataType: r4:oid,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueContributor": {
            name: "valueContributor",
            dataType: r4:Contributor,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueString": {
            name: "valueString",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valuePositiveInt": {
            name: "valuePositiveInt",
            dataType: r4:positiveInt,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueDuration": {
            name: "valueDuration",
            dataType: r4:Duration,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueDataRequirement": {
            name: "valueDataRequirement",
            dataType: r4:DataRequirement,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        },
        "valueAnnotation": {
            name: "valueAnnotation",
            dataType: r4:Annotation,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the Output parameter as a basic type.",
            path: "Task.output.value[x]"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type GenericTaskOutput record {|
    *r4:BackboneElement;

    r4:time valueTime;
    r4:TriggerDefinition valueTriggerDefinition;
    r4:Money valueMoney;
    r4:Signature valueSignature;
    r4:Extension[] modifierExtension?;
    r4:CodeableConcept 'type;
    r4:uuid valueUuid;
    r4:Ratio valueRatio;
    r4:ParameterDefinition valueParameterDefinition;
    string id?;
    r4:integer valueInteger;
    r4:unsignedInt valueUnsignedInt;
    r4:Quantity valueQuantity;
    r4:canonical valueCanonical;
    r4:Count valueCount;
    r4:id valueId;
    r4:code valueCode;
    r4:Address valueAddress;
    r4:ContactPoint valueContactPoint;
    r4:Period valuePeriod;
    r4:SampledData valueSampledData;
    r4:Timing valueTiming;
    r4:instant valueInstant;
    r4:Age valueAge;
    r4:Dosage valueDosage;
    r4:base64Binary valueBase64Binary;
    boolean valueBoolean;
    r4:Coding valueCoding;
    r4:Extension[] extension?;
    r4:Identifier valueIdentifier;
    r4:Expression valueExpression;
    r4:Reference valueReference;
    r4:Range valueRange;
    r4:uri valueUri;
    r4:Distance valueDistance;
    r4:urlType valueUrl;
    r4:ContactDetail valueContactDetail;
    r4:Meta valueMeta;
    r4:CodeableConcept valueCodeableConcept;
    r4:markdown valueMarkdown;
    r4:Attachment valueAttachment;
    r4:UsageContext valueUsageContext;
    r4:dateTime valueDateTime;
    r4:HumanName valueHumanName;
    r4:RelatedArtifact valueRelatedArtifact;
    decimal valueDecimal;
    r4:date valueDate;
    r4:oid valueOid;
    r4:Contributor valueContributor;
    string valueString;
    r4:positiveInt valuePositiveInt;
    r4:Duration valueDuration;
    r4:DataRequirement valueDataRequirement;
    r4:Annotation valueAnnotation;
|};

# FHIR GenericTaskInput datatype record.
#
# + valueTime - The value of the input parameter as a basic type.
# + valueTriggerDefinition - The value of the input parameter as a basic type.
# + valueMoney - The value of the input parameter as a basic type.
# + valueSignature - The value of the input parameter as a basic type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'type - A code or description indicating how the input is intended to be used as part of the task execution.
# + valueUuid - The value of the input parameter as a basic type.
# + valueRatio - The value of the input parameter as a basic type.
# + valueParameterDefinition - The value of the input parameter as a basic type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueInteger - The value of the input parameter as a basic type.
# + valueUnsignedInt - The value of the input parameter as a basic type.
# + valueQuantity - The value of the input parameter as a basic type.
# + valueCanonical - The value of the input parameter as a basic type.
# + valueCount - The value of the input parameter as a basic type.
# + valueId - The value of the input parameter as a basic type.
# + valueCode - The value of the input parameter as a basic type.
# + valueAddress - The value of the input parameter as a basic type.
# + valueContactPoint - The value of the input parameter as a basic type.
# + valuePeriod - The value of the input parameter as a basic type.
# + valueSampledData - The value of the input parameter as a basic type.
# + valueTiming - The value of the input parameter as a basic type.
# + valueInstant - The value of the input parameter as a basic type.
# + valueAge - The value of the input parameter as a basic type.
# + valueDosage - The value of the input parameter as a basic type.
# + valueBase64Binary - The value of the input parameter as a basic type.
# + valueBoolean - The value of the input parameter as a basic type.
# + valueCoding - The value of the input parameter as a basic type.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueIdentifier - The value of the input parameter as a basic type.
# + valueExpression - The value of the input parameter as a basic type.
# + valueReference - The value of the input parameter as a basic type.
# + valueRange - The value of the input parameter as a basic type.
# + valueUri - The value of the input parameter as a basic type.
# + valueDistance - The value of the input parameter as a basic type.
# + valueUrl - The value of the input parameter as a basic type.
# + valueContactDetail - The value of the input parameter as a basic type.
# + valueMeta - The value of the input parameter as a basic type.
# + valueCodeableConcept - The value of the input parameter as a basic type.
# + valueMarkdown - The value of the input parameter as a basic type.
# + valueAttachment - The value of the input parameter as a basic type.
# + valueUsageContext - The value of the input parameter as a basic type.
# + valueDateTime - The value of the input parameter as a basic type.
# + valueHumanName - The value of the input parameter as a basic type.
# + valueRelatedArtifact - The value of the input parameter as a basic type.
# + valueDecimal - The value of the input parameter as a basic type.
# + valueDate - The value of the input parameter as a basic type.
# + valueOid - The value of the input parameter as a basic type.
# + valueContributor - The value of the input parameter as a basic type.
# + valueString - The value of the input parameter as a basic type.
# + valuePositiveInt - The value of the input parameter as a basic type.
# + valueDuration - The value of the input parameter as a basic type.
# + valueDataRequirement - The value of the input parameter as a basic type.
# + valueAnnotation - The value of the input parameter as a basic type.
@r4:DataTypeDefinition {
    name: "GenericTaskInput",
    baseType: (),
    elements: {
        "valueTime": {
            name: "valueTime",
            dataType: r4:time,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueTriggerDefinition": {
            name: "valueTriggerDefinition",
            dataType: r4:TriggerDefinition,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueMoney": {
            name: "valueMoney",
            dataType: r4:Money,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueSignature": {
            name: "valueSignature",
            dataType: r4:Signature,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Task.input.modifierExtension"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "A code or description indicating how the input is intended to be used as part of the task execution.",
            path: "Task.input.type"
        },
        "valueUuid": {
            name: "valueUuid",
            dataType: r4:uuid,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueRatio": {
            name: "valueRatio",
            dataType: r4:Ratio,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueParameterDefinition": {
            name: "valueParameterDefinition",
            dataType: r4:ParameterDefinition,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Task.input.id"
        },
        "valueInteger": {
            name: "valueInteger",
            dataType: r4:integer,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueUnsignedInt": {
            name: "valueUnsignedInt",
            dataType: r4:unsignedInt,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r4:Quantity,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueCanonical": {
            name: "valueCanonical",
            dataType: r4:canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueCount": {
            name: "valueCount",
            dataType: r4:Count,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueId": {
            name: "valueId",
            dataType: r4:id,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueCode": {
            name: "valueCode",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueAddress": {
            name: "valueAddress",
            dataType: r4:Address,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueContactPoint": {
            name: "valueContactPoint",
            dataType: r4:ContactPoint,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valuePeriod": {
            name: "valuePeriod",
            dataType: r4:Period,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueSampledData": {
            name: "valueSampledData",
            dataType: r4:SampledData,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueTiming": {
            name: "valueTiming",
            dataType: r4:Timing,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueInstant": {
            name: "valueInstant",
            dataType: r4:instant,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueAge": {
            name: "valueAge",
            dataType: r4:Age,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueDosage": {
            name: "valueDosage",
            dataType: r4:Dosage,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueBase64Binary": {
            name: "valueBase64Binary",
            dataType: r4:base64Binary,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueCoding": {
            name: "valueCoding",
            dataType: r4:Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Task.input.extension"
        },
        "valueIdentifier": {
            name: "valueIdentifier",
            dataType: r4:Identifier,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueExpression": {
            name: "valueExpression",
            dataType: r4:Expression,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueReference": {
            name: "valueReference",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueRange": {
            name: "valueRange",
            dataType: r4:Range,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueUri": {
            name: "valueUri",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueDistance": {
            name: "valueDistance",
            dataType: r4:Distance,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueUrl": {
            name: "valueUrl",
            dataType: r4:urlType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueContactDetail": {
            name: "valueContactDetail",
            dataType: r4:ContactDetail,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueMeta": {
            name: "valueMeta",
            dataType: r4:Meta,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueMarkdown": {
            name: "valueMarkdown",
            dataType: r4:markdown,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: r4:Attachment,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueUsageContext": {
            name: "valueUsageContext",
            dataType: r4:UsageContext,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueDateTime": {
            name: "valueDateTime",
            dataType: r4:dateTime,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueHumanName": {
            name: "valueHumanName",
            dataType: r4:HumanName,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueRelatedArtifact": {
            name: "valueRelatedArtifact",
            dataType: r4:RelatedArtifact,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueDecimal": {
            name: "valueDecimal",
            dataType: decimal,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueDate": {
            name: "valueDate",
            dataType: r4:date,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueOid": {
            name: "valueOid",
            dataType: r4:oid,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueContributor": {
            name: "valueContributor",
            dataType: r4:Contributor,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueString": {
            name: "valueString",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valuePositiveInt": {
            name: "valuePositiveInt",
            dataType: r4:positiveInt,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueDuration": {
            name: "valueDuration",
            dataType: r4:Duration,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueDataRequirement": {
            name: "valueDataRequirement",
            dataType: r4:DataRequirement,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        },
        "valueAnnotation": {
            name: "valueAnnotation",
            dataType: r4:Annotation,
            min: 1,
            max: 1,
            isArray: false,
            description: "The value of the input parameter as a basic type.",
            path: "Task.input.value[x]"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type GenericTaskInput record {|
    *r4:BackboneElement;

    r4:time valueTime;
    r4:TriggerDefinition valueTriggerDefinition;
    r4:Money valueMoney;
    r4:Signature valueSignature;
    r4:Extension[] modifierExtension?;
    r4:CodeableConcept 'type;
    r4:uuid valueUuid;
    r4:Ratio valueRatio;
    r4:ParameterDefinition valueParameterDefinition;
    string id?;
    r4:integer valueInteger;
    r4:unsignedInt valueUnsignedInt;
    r4:Quantity valueQuantity;
    r4:canonical valueCanonical;
    r4:Count valueCount;
    r4:id valueId;
    r4:code valueCode;
    r4:Address valueAddress;
    r4:ContactPoint valueContactPoint;
    r4:Period valuePeriod;
    r4:SampledData valueSampledData;
    r4:Timing valueTiming;
    r4:instant valueInstant;
    r4:Age valueAge;
    r4:Dosage valueDosage;
    r4:base64Binary valueBase64Binary;
    boolean valueBoolean;
    r4:Coding valueCoding;
    r4:Extension[] extension?;
    r4:Identifier valueIdentifier;
    r4:Expression valueExpression;
    r4:Reference valueReference;
    r4:Range valueRange;
    r4:uri valueUri;
    r4:Distance valueDistance;
    r4:urlType valueUrl;
    r4:ContactDetail valueContactDetail;
    r4:Meta valueMeta;
    r4:CodeableConcept valueCodeableConcept;
    r4:markdown valueMarkdown;
    r4:Attachment valueAttachment;
    r4:UsageContext valueUsageContext;
    r4:dateTime valueDateTime;
    r4:HumanName valueHumanName;
    r4:RelatedArtifact valueRelatedArtifact;
    decimal valueDecimal;
    r4:date valueDate;
    r4:oid valueOid;
    r4:Contributor valueContributor;
    string valueString;
    r4:positiveInt valuePositiveInt;
    r4:Duration valueDuration;
    r4:DataRequirement valueDataRequirement;
    r4:Annotation valueAnnotation;
|};

# GenericTaskStatus enum
public enum GenericTaskStatus {
   CODE_STATUS_REQUESTED = "requested",
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACCEPTED = "accepted",
   CODE_STATUS_RECEIVED = "received"
}

# GenericTaskPriority enum
public enum GenericTaskPriority {
   CODE_PRIORITY_STAT = "stat",
   CODE_PRIORITY_ROUTINE = "routine",
   CODE_PRIORITY_URGENT = "urgent",
   CODE_PRIORITY_ASAP = "asap"
}

# GenericTaskIntent enum
public enum GenericTaskIntent {
   CODE_INTENT_PROPOSAL = "proposal",
   CODE_INTENT_INSTANCE_ORDER = "instance-order",
   CODE_INTENT_FILLER_ORDER = "filler-order",
   CODE_INTENT_ORIGINAL_ORDER = "original-order",
   CODE_INTENT_REFLEX_ORDER = "reflex-order",
   CODE_INTENT_PLAN = "plan",
   CODE_INTENT_UNKNOWN = "unknown",
   CODE_INTENT_ORDER = "order",
   CODE_INTENT_OPTION = "option"
}

# FHIR GenericTaskRestriction datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - Over what time-period is fulfillment sought.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + recipient - For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + repetitions - Indicates the number of times the requested action should occur.
@r4:DataTypeDefinition {
    name: "GenericTaskRestriction",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Task.restriction.extension"
        },
        "period": {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "Over what time-period is fulfillment sought.",
            path: "Task.restriction.period"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Task.restriction.modifierExtension"
        },
        "recipient": {
            name: "recipient",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?",
            path: "Task.restriction.recipient"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Task.restriction.id"
        },
        "repetitions": {
            name: "repetitions",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates the number of times the requested action should occur.",
            path: "Task.restriction.repetitions"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type GenericTaskRestriction record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Period period?;
    r4:Extension[] modifierExtension?;
    r4:Reference[] recipient?;
    string id?;
    r4:positiveInt repetitions?;
|};

