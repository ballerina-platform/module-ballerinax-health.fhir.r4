// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhir.r4.international401;

public const string PROFILE_BASE_COMPOSITIONUVIPS = "http://hl7.org/fhir/uv/ips/StructureDefinition/Composition-uv-ips";
public const RESOURCE_NAME_COMPOSITIONUVIPS = "Composition";

# FHIR CompositionUvIps resource record.
#
# + resourceType - The type of the resource describes
# + date - The composition editing time, when the composition was last logically changed by the author.
# + identifier - A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
# + extension - An Extension
# + custodian - Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
# + subject - Who or what the composition is about. In general a composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure). For the IPS the subject is always the patient.
# + author - Identifies who is responsible for the information in the IPS, not necessarily who typed it in. The type of author(s) contribute to determine the 'nature'of the Patient Summary: e.g. a 'human-curated' IPS Vs. an 'automatically generated' IPS.
# + confidentiality - The code specifying the level of confidentiality of the Composition.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + section - The root of the sections that make up the IPS composition.
# * section Slicings
# 1) CompositionUvIpsSectionSectionResults: IPS Results Section
#       - min = 0
#       - max = 1
#
# 2) CompositionUvIpsSectionSectionSocialHistory: IPS Social History Section
#       - min = 0
#       - max = 1
#
# 3) CompositionUvIpsSectionSectionPregnancyHx: IPS History of Pregnancy Section
#       - min = 0
#       - max = 1
#
# 4) CompositionUvIpsSectionSectionPlanOfCare: IPS Plan of Care Section
#       - min = 0
#       - max = 1
#
# 5) CompositionUvIpsSectionSectionMedicalDevices: IPS Medical Devices Section
#       - min = 0
#       - max = 1
#
# 6) CompositionUvIpsSectionSectionProceduresHx: IPS History of Procedures Section
#       - min = 0
#       - max = 1
#
# 7) CompositionUvIpsSectionSectionImmunizations: IPS Immunizations Section
#       - min = 0
#       - max = 1
#
# 8) CompositionUvIpsSectionSectionProblems: IPS Problems Section
#       - min = 1
#       - max = 1
#
# 9) CompositionUvIpsSectionSectionAllergies: IPS Allergies and Intolerances Section
#       - min = 1
#       - max = 1
#
# 10) CompositionUvIpsSectionSectionVitalSigns: IPS Vital Signs Section
#       - min = 0
#       - max = 1
#
# 11) CompositionUvIpsSectionSectionFunctionalStatus: IPS Functional Status
#       - min = 0
#       - max = 1
#
# 12) CompositionUvIpsSectionSectionMedications: IPS Medication Summary Section
#       - min = 1
#       - max = 1
#
# 13) CompositionUvIpsSectionSectionPastIllnessHx: IPS History of Past Illness Section
#       - min = 0
#       - max = 1
#
# 14) CompositionUvIpsSectionSectionAdvanceDirectives: IPS Advance Directives Section
#       - min = 0
#       - max = 1
#
# + encounter - Describes the clinical encounter or type of care this documentation is associated with.
# + title - Official human-readable label for the composition. For this document should be 'International Patient Summary' or any equivalent translation
# + 'type - Specifies that this composition refers to a Patient Summary (Loinc '60591-5')
# + attester - A participant who has attested to the accuracy of the composition/document.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + event - The main activity being described by a IPS is the provision of healthcare over a period of time. In the CDA representation of the IPS this is shown by setting the value of serviceEvent/@classCode to “PCPR” (care provision) and indicating the duration over which care was provided in serviceEvent/effectiveTime. In the FHIR representation at least one event should be used to record this information. Additional data from outside this duration may also be included if it is relevant to care provided during that time range (e.g., reviewed during the stated time range). For example if the IPS is generated by a GP based on information recorded in his/her EHR-S, then the start value should represent the date when the treatment relationship between the patient and the GP started; and the end value the date of the latest care event.
# * event Slicings
# 1) CompositionUvIpsEventCareProvisioningEvent: The care provisioning being documented
#       - min = 0
#       - max = 1
#
# + relatesTo - Relationships that this composition has with other compositions or documents that already exist.
# + category - A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
# + status - The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
@r4:ResourceDefinition {
    resourceType: "Composition",
    baseType: r4:DomainResource,
    profile: "http://hl7.org/fhir/uv/ips/StructureDefinition/Composition-uv-ips",
    elements: {
        "date" : {
            name: "date",
            dataType: r4:dateTime,
            min: 1,
            max: 1,
            isArray: false,
            path: "Composition.date"
        },
        "identifier" : {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            path: "Composition.identifier"
        },
        "extension" : {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Composition.extension"
        },
        "custodian" : {
            name: "custodian",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Composition.custodian"
        },
        "subject" : {
            name: "subject",
            dataType: CompositionUvIpsSubject,
            min: 1,
            max: 1,
            isArray: false,
            path: "Composition.subject"
        },
        "author" : {
            name: "author",
            dataType: r4:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Composition.author"
        },
        "confidentiality" : {
            name: "confidentiality",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Composition.confidentiality",
            valueSet: "http://terminology.hl7.org/ValueSet/v3-ConfidentialityClassification|2014-03-26"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Composition.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Composition.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "section" : {
            name: "section",
            dataType: CompositionUvIpsSection,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Composition.section"
        },
        "encounter" : {
            name: "encounter",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Composition.encounter"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            path: "Composition.title"
        },
        "type" : {
            name: "type",
            dataType: CompositionUvIpsType,
            min: 1,
            max: 1,
            isArray: false,
            path: "Composition.type",
            valueSet: "http://hl7.org/fhir/ValueSet/doc-typecodes"
        },
        "attester" : {
            name: "attester",
            dataType: CompositionUvIpsAttester,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Composition.attester"
        },
        "contained" : {
            name: "contained",
            dataType: r4:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Composition.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Composition.meta"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Composition.implicitRules"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Composition.id"
        },
        "text" : {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Composition.text"
        },
        "event" : {
            name: "event",
            dataType: CompositionUvIpsEvent,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Composition.event"
        },
        "relatesTo" : {
            name: "relatesTo",
            dataType: CompositionUvIpsRelatesTo,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Composition.relatesTo"
        },
        "category" : {
            name: "category",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Composition.category",
            valueSet: "http://hl7.org/fhir/ValueSet/document-classcodes"
        },
        "status" : {
            name: "status",
            dataType: CompositionUvIpsStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "Composition.status",
            valueSet: "http://hl7.org/fhir/ValueSet/composition-status|4.0.1"
        }
    },
    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}
public type CompositionUvIps record {|
    *r4:DomainResource;

    RESOURCE_NAME_COMPOSITIONUVIPS resourceType = RESOURCE_NAME_COMPOSITIONUVIPS;

    r4:dateTime date;
    r4:Identifier identifier?;
    r4:Extension[] extension?;
    r4:Reference custodian?;
    CompositionUvIpsSubject subject;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.author constraint. This field must be an array containing at least one item."
        }
    }
    r4:Reference[] author;
    r4:code confidentiality?;
    r4:Extension[] modifierExtension?;
    r4:code language?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section constraint. This field must be an array containing at least one item."
        }
    }
    CompositionUvIpsSection[] section;
    r4:Reference encounter?;
    string title;
    CodeableConceptUvIps 'type;
    CompositionUvIpsAttester[] attester?;
    r4:Resource[] contained?;
    r4:Meta meta?;
    r4:uri implicitRules?;
    string id?;
    r4:Narrative text?;
    CompositionUvIpsEvent[] event?;
    CompositionUvIpsRelatesTo[] relatesTo?;
    r4:CodeableConcept[] category?;
    CompositionUvIpsStatus status;
    r4:Element ...;
|};

# FHIR CompositionUvIpsSectionCodeCodingTwo datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingTwo",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingTwo record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "10162-6";
|};

# CompositionUvIpsRelatesToCode enum
public enum CompositionUvIpsRelatesToCode {
   CODE_CODE_SIGNS = "signs",
   CODE_CODE_REPLACES = "replaces",
   CODE_CODE_TRANSFORMS = "transforms",
   CODE_CODE_APPENDS = "appends"
}

# CompositionUvIpsSectionModeEleven enum
public enum CompositionUvIpsSectionModeEleven {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionCodeEight datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeEight",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingEight,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeEight record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingEight[] coding;
|};

# CompositionUvIpsSectionModeFourteen enum
public enum CompositionUvIpsSectionModeFourteen {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionCodeTen datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeTen",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingTen,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeTen record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingTen[] coding;
|};

# FHIR CompositionUvIpsAttester datatype record.
#
# + mode - The type of attestation the authenticator offers.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + time - When the composition was attested by the party.
# + party - Who attested the composition in the specified way.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsAttester",
    baseType: (),
    elements: {
        "mode": {
            name: "mode",
            dataType: CompositionUvIpsAttesterMode,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of attestation the authenticator offers.",
            path: "Composition.attester.mode"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.attester.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.attester.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.attester.id"
        },
        "time": {
            name: "time",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "When the composition was attested by the party.",
            path: "Composition.attester.time"
        },
        "party": {
            name: "party",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Who attested the composition in the specified way.",
            path: "Composition.attester.party"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsAttester record {|
    *r4:BackboneElement;

    CompositionUvIpsAttesterMode mode;
    r4:Extension[] extension?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:dateTime time?;
    r4:Reference party?;
|};

# FHIR CompositionUvIpsType datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsType",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsTypeCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.type.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsType record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.type.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.type.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsTypeCoding[] coding;
|};

# CompositionUvIpsStatus enum
public enum CompositionUvIpsStatus {
   CODE_STATUS_AMENDED = "amended",
   CODE_STATUS_FINAL = "final",
   CODE_STATUS_PRELIMINARY = "preliminary",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error"
}

# CompositionUvIpsSectionModeTen enum
public enum CompositionUvIpsSectionModeTen {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# CompositionUvIpsSectionMode enum
public enum CompositionUvIpsSectionMode {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionCodeCodingTwelve datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingTwelve",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingTwelve record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "11348-0";
|};

# FHIR CompositionUvIpsSectionCodeCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCoding record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "30954-2";
|};

# FHIR CompositionUvIpsSectionCodeCodingEight datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingEight",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingEight record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "48765-2";
|};

# CompositionUvIpsAttesterMode enum
public enum CompositionUvIpsAttesterMode {
   CODE_MODE_LEGAL = "legal",
   CODE_MODE_OFFICIAL = "official",
   CODE_MODE_PERSONAL = "personal",
   CODE_MODE_PROFESSIONAL = "professional"
}

# FHIR CompositionUvIpsEventCareProvisioningEvent datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
# + code - This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a 'History and Physical Report' in which the procedure being documented is necessarily a 'History and Physical' act.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + detail - The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsEventCareProvisioningEvent",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.event.extension"
        },
        "period": {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.",
            path: "Composition.event.period"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsEventCode,
            min: 1,
            max: 1,
            isArray: true,
            description: "This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a 'History and Physical Report' in which the procedure being documented is necessarily a 'History and Physical' act.",
            path: "Composition.event.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.event.modifierExtension"
        },
        "detail": {
            name: "detail",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.",
            path: "Composition.event.detail"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.event.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsEventCareProvisioningEvent record {|
    *CompositionUvIpsEvent;

    r4:Extension[] extension?;
    r4:Period period?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.event.code constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.event.code constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsEventCode[] code;
    r4:Extension[] modifierExtension?;
    r4:Reference[] detail?;
    string id?;
|};

# FHIR CompositionUvIpsSectionSectionResults datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - Relevant observation results collected on the patient or produced on in-vitro biologic specimens collected from the patient. Some of these results may be laboratory results, others may be anatomic pathology results, others, radiology results, and others, clinical results.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionResults",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCode,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeOne,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Relevant observation results collected on the patient or produced on in-vitro biologic specimens collected from the patient. Some of these results may be laboratory results, others may be anatomic pathology results, others, radiology results, and others, clinical results.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionResults record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCode code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeOne mode?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at most one item."
        }
    }
    r4:Reference[] entry;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsSectionCodeThirteen datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeThirteen",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingThirteen,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeThirteen record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingThirteen[] coding;
|};

# CompositionUvIpsSectionModeThirteen enum
public enum CompositionUvIpsSectionModeThirteen {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsRelatesTo datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + targetIdentifier - The target composition/document of this relationship.
# + code - The type of relationship that this composition has with anther composition or document.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + targetReference - The target composition/document of this relationship.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsRelatesTo",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.relatesTo.extension"
        },
        "targetIdentifier": {
            name: "targetIdentifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "The target composition/document of this relationship.",
            path: "Composition.relatesTo.target[x]"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsRelatesToCode,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of relationship that this composition has with anther composition or document.",
            path: "Composition.relatesTo.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.relatesTo.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.relatesTo.id"
        },
        "targetReference": {
            name: "targetReference",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The target composition/document of this relationship.",
            path: "Composition.relatesTo.target[x]"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsRelatesTo record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Identifier targetIdentifier?;
    CompositionUvIpsRelatesToCode code;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:Reference targetReference?;
|};

# CompositionUvIpsSectionModeEight enum
public enum CompositionUvIpsSectionModeEight {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionCodeCodingTen datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingTen",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingTen record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "47420-5";
|};

# FHIR CompositionUvIpsSectionSectionPlanOfCare datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - Dynamic, personalized plan including identified needed healthcare activity, health objectives and healthcare goals, relating to one or more specified health issues in a healthcare process [Source EN ISO 13940]
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionPlanOfCare",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeThree,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeFour,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Dynamic, personalized plan including identified needed healthcare activity, health objectives and healthcare goals, relating to one or more specified health issues in a healthcare process [Source EN ISO 13940]",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionPlanOfCare record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeThree code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeFour mode?;
    r4:Reference[] entry?;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsSectionSectionSocialHistory datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - Description of the person’s Health related “lifestyle factors' or 'lifestyle observations' (e.g. smoke habits; alcohol consumption; diets, risky habits.)
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionSocialHistory",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeOne,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeTwo,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Description of the person’s Health related “lifestyle factors' or 'lifestyle observations' (e.g. smoke habits; alcohol consumption; diets, risky habits.)",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionSocialHistory record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeOne code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeTwo mode?;
    r4:Reference[] entry?;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsSectionCodeTwo datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeTwo",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingTwo,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeTwo record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingTwo[] coding;
|};

# FHIR CompositionUvIpsSectionSectionVitalSigns datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - Notable vital signs or physical findings as: blood pressure, body temperature, heart rate, and respiratory rate. It may also include other clinical findings, such as height, weight, body mass index, head circumference, and pulse oximetry. In particular, notable vital signs or physical findings such as the most recent, maximum and/or minimum, baseline, or relevant trends may be included
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionVitalSigns",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeNine,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeTen,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Notable vital signs or physical findings as: blood pressure, body temperature, heart rate, and respiratory rate. It may also include other clinical findings, such as height, weight, body mass index, head circumference, and pulse oximetry. In particular, notable vital signs or physical findings such as the most recent, maximum and/or minimum, baseline, or relevant trends may be included",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionVitalSigns record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeNine code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeTen mode?;
    r4:Reference[] entry?;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsSectionCodeEleven datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeEleven",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingEleven,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeEleven record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingEleven[] coding;
|};

# FHIR CompositionUvIpsSectionCodeCodingSeven datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingSeven",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingSeven record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "11450-4";
|};

# CompositionUvIpsSectionModeTwo enum
public enum CompositionUvIpsSectionModeTwo {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionCodeCodingThree datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingThree",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingThree record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "18776-5";
|};

# FHIR CompositionUvIpsSectionCodeThree datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeThree",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingThree,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeThree record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingThree[] coding;
|};

# FHIR CompositionUvIpsSectionCodeSeven datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeSeven",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingSeven,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeSeven record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingSeven[] coding;
|};

# CompositionUvIpsSectionModeFive enum
public enum CompositionUvIpsSectionModeFive {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionSectionProblems datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - It lists and describes clinical problems or conditions currently being monitored for the patient. This entry shall be used to document that no information about problems is available, or that no relevant problems are known.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionProblems",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeSeven,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeEight,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "It lists and describes clinical problems or conditions currently being monitored for the patient. This entry shall be used to document that no information about problems is available, or that no relevant problems are known.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionProblems record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeSeven code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeEight mode?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at most one item."
        }
    }
    r4:Reference[] entry;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# CompositionUvIpsSectionModeNine enum
public enum CompositionUvIpsSectionModeNine {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionSectionPregnancyHx datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - It contains information about whether the patient is currently pregnant or not. It may contain addition summarizing information about the outcome of earlier pregnancies.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionPregnancyHx",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeTwo,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeThree,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "It contains information about whether the patient is currently pregnant or not. It may contain addition summarizing information about the outcome of earlier pregnancies.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionPregnancyHx record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeTwo code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeThree mode?;
    r4:Reference[] entry?;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsSectionCodeTwelve datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeTwelve",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingTwelve,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeTwelve record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingTwelve[] coding;
|};

# FHIR CompositionUvIpsSectionCodeCodingThirteen datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingThirteen",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingThirteen record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "42348-3";
|};

# FHIR CompositionUvIpsSubject datatype record.
#
# + reference - A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
# + identifier - An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + display - Plain text narrative that identifies the resource in addition to the resource reference.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent. The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. 'Patient' is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSubject",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.",
            path: "Composition.subject.reference"
        },
        "identifier": {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
            path: "Composition.subject.identifier"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.subject.extension"
        },
        "display": {
            name: "display",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Plain text narrative that identifies the resource in addition to the resource reference.",
            path: "Composition.subject.display"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.subject.id"
        },
        "type": {
            name: "type",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent. The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. 'Patient' is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).",
            path: "Composition.subject.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSubject record {|
    *r4:Reference;

    string reference;
    r4:Identifier identifier?;
    r4:Extension[] extension?;
    string display?;
    string id?;
    r4:uri 'type?;
|};

# FHIR CompositionUvIpsSectionCodeCodingNine datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingNine",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingNine record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "8716-3";
|};

# FHIR CompositionUvIpsSectionCodeOne datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeOne",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingOne,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeOne record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingOne[] coding;
|};

# FHIR CompositionUvIpsSectionCodeFour datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeFour",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingFour,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeFour record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingFour[] coding;
|};

# FHIR CompositionUvIpsSectionCodeCodingFive datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingFive",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingFive record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "47519-4";
|};

# FHIR CompositionUvIpsSectionCodeSix datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeSix",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingSix,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeSix record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingSix[] coding;
|};

# FHIR CompositionUvIpsSectionCodeCodingFour datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingFour",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingFour record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "46264-8";
|};

# CompositionUvIpsSectionModeOne enum
public enum CompositionUvIpsSectionModeOne {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionCode datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCode",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCode record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCoding[] coding;
|};

# FHIR CompositionUvIpsSectionSectionMedications datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents. Medication Summary
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - This list the medications relevant for the scope of the patient summary or it is used to indicate that the subject is known not to be on any relevant medication; either that no information is available about medications.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionMedications",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeEleven,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents. Medication Summary",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeTwelve,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "This list the medications relevant for the scope of the patient summary or it is used to indicate that the subject is known not to be on any relevant medication; either that no information is available about medications.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionMedications record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeEleven code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeTwelve mode?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at most one item."
        }
    }
    r4:Reference[] entry;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# CompositionUvIpsSectionModeFour enum
public enum CompositionUvIpsSectionModeFour {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionSectionImmunizations datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - It defines the patient's current immunization status and pertinent immunization history. The primary use case for the Immunization Section is to enable communication of a patient's immunization status. It may contain the entire immunization history that is relevant to the period of time being summarized. This entry shall be used to document that no information about immunizations is available, or that no immunizations are known.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionImmunizations",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeSix,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeSeven,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "It defines the patient's current immunization status and pertinent immunization history. The primary use case for the Immunization Section is to enable communication of a patient's immunization status. It may contain the entire immunization history that is relevant to the period of time being summarized. This entry shall be used to document that no information about immunizations is available, or that no immunizations are known.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionImmunizations record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeSix code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeSeven mode?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at most one item."
        }
    }
    r4:Reference[] entry;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsEvent datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
# + code - This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a 'History and Physical Report' in which the procedure being documented is necessarily a 'History and Physical' act.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + detail - The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsEvent",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.event.extension"
        },
        "period": {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.",
            path: "Composition.event.period"
        },
        "code": {
            name: "code",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a 'History and Physical Report' in which the procedure being documented is necessarily a 'History and Physical' act.",
            path: "Composition.event.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.event.modifierExtension"
        },
        "detail": {
            name: "detail",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.",
            path: "Composition.event.detail"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.event.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsEvent record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Period period?;
    r4:CodeableConcept[] code?;
    r4:Extension[] modifierExtension?;
    r4:Reference[] detail?;
    string id?;
|};

# CompositionUvIpsSectionModeSix enum
public enum CompositionUvIpsSectionModeSix {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# CompositionUvIpsSectionModeTwelve enum
public enum CompositionUvIpsSectionModeTwelve {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSectionSectionProceduresHx datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - It lists the patient past procedures that are pertinent to the scope of this document. Procedures may refer for example to: 1. Invasive Diagnostic procedure:e.g. Cardiac catheterization; (the results of these procedure are documented in the results section) 2. Therapeutic procedure: e.g. dialysis; 3. Surgical procedure: e.g. appendectomy. This entry shall be used to document that no information about past procedures is available, or that no relevant past procedures are known.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionProceduresHx",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeFive,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeSix,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "It lists the patient past procedures that are pertinent to the scope of this document. Procedures may refer for example to: 1. Invasive Diagnostic procedure:e.g. Cardiac catheterization; (the results of these procedure are documented in the results section) 2. Therapeutic procedure: e.g. dialysis; 3. Surgical procedure: e.g. appendectomy. This entry shall be used to document that no information about past procedures is available, or that no relevant past procedures are known.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionProceduresHx record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeFive code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeSix mode?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at most one item."
        }
    }
    r4:Reference[] entry;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# CompositionUvIpsSectionModeSeven enum
public enum CompositionUvIpsSectionModeSeven {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# CompositionUvIpsSectionModeThree enum
public enum CompositionUvIpsSectionModeThree {
   CODE_MODE_CHANGES = "changes",
   CODE_MODE_WORKING = "working",
   CODE_MODE_SNAPSHOT = "snapshot"
}

# FHIR CompositionUvIpsSection datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - A reference to the actual resource from which the narrative in the section is derived.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSection",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 0,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: 0,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionMode,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to the actual resource from which the narrative in the section is derived.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 1,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSection record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:CodeableConcept code;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title?;
    CompositionUvIpsSectionMode mode?;
    r4:Reference[] entry?;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text;
|};

# FHIR CompositionUvIpsSectionCodeNine datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeNine",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingNine,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeNine record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingNine[] coding;
|};

# FHIR CompositionUvIpsSectionSectionMedicalDevices datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - It describes the patient history of medical device use. This entry shall be used to document that no information about medical device use is available, or that no relevant medical device use is known.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionMedicalDevices",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeFour,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeFive,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "It describes the patient history of medical device use. This entry shall be used to document that no information about medical device use is available, or that no relevant medical device use is known.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionMedicalDevices record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeFour code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeFive mode?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at most one item."
        }
    }
    r4:Reference[] entry;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsSectionCodeFive datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeFive",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsSectionCodeCodingFive,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.section.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeFive record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsSectionCodeCodingFive[] coding;
|};

# FHIR CompositionUvIpsEventCode datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "CompositionUvIpsEventCode",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: CompositionUvIpsEventCodeCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Composition.event.code.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsEventCode record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.event.code.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.event.code.coding constraint. This field must be an array containing at most one item."
        }
    }
    CompositionUvIpsEventCodeCoding[] coding;
|};

# FHIR CompositionUvIpsSectionCodeCodingEleven datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingEleven",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingEleven record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "10160-0";
|};

# FHIR CompositionUvIpsSectionCodeCodingSix datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingSix",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingSix record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "11369-6";
|};

# FHIR CompositionUvIpsSectionSectionPastIllnessHx datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - It contains a description of the conditions the patient suffered in the past.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionPastIllnessHx",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeTwelve,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeThirteen,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "It contains a description of the conditions the patient suffered in the past.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionPastIllnessHx record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeTwelve code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeThirteen mode?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at most one item."
        }
    }
    r4:Reference[] entry;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsSectionSectionAdvanceDirectives datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - Contains a narrative description or a Consent entry with information about the patient's advance directive.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionAdvanceDirectives",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeThirteen,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeFourteen,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Contains a narrative description or a Consent entry with information about the patient's advance directive.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionAdvanceDirectives record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeThirteen code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeFourteen mode?;
    r4:Reference[] entry?;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsEventCodeCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsEventCodeCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.event.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.event.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsEventCodeCoding record {|
    *r4:Coding;

    r4:uri system = "http://terminology.hl7.org/CodeSystem/v3-ActClass";
    r4:code code = "PCPR";
|};

# FHIR CompositionUvIpsTypeCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsTypeCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.type.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.type.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsTypeCoding record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "60591-5";
|};

# FHIR CompositionUvIpsSectionCodeCodingOne datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionCodeCodingOne",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Composition.section.code.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Composition.section.code.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionCodeCodingOne record {|
    *r4:Coding;

    r4:uri system = "http://loinc.org";
    r4:code code = "29762-2";
|};

# FHIR CompositionUvIpsSectionSectionFunctionalStatus datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - It describes capabilities of the patient to perform acts of daily living, including possible needs of the patient to be continuously assessed by third parties. The invalidity status may in fact influence decisions about how to administer treatments. Profiles to express disabilities and functional assessments will be specified by future versions of this guide.
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionFunctionalStatus",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeTen,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeEleven,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "It describes capabilities of the patient to perform acts of daily living, including possible needs of the patient to be continuously assessed by third parties. The invalidity status may in fact influence decisions about how to administer treatments. Profiles to express disabilities and functional assessments will be specified by future versions of this guide.",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionFunctionalStatus record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeTen code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeEleven mode?;
    r4:Reference[] entry?;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

# FHIR CompositionUvIpsSectionSectionAllergies datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A code identifying the kind of content contained within the section. This must be consistent with the section title.
# + emptyReason - If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
# + author - Identifies who is responsible for the information in this section, not necessarily who typed it in.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
# + section - A nested sub-section within this section.
# + title - The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.
# + mode - How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
# + entry - It lists the relevant allergies or intolerances (conditions) for that patient, describing the kind of reaction (e.g. rash, anaphylaxis,..); preferably the agents that cause it; and optionally the criticality and the certainty of the allergy. At a minimum, it should list currently active and any relevant historical allergies and adverse reactions. This entry shall be used to document that no information about allergies is available, or that no allergies are known .
# + orderedBy - Specifies the order applied to the items in the section entries.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + text - A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.

@r4:DataTypeDefinition {
    name: "CompositionUvIpsSectionSectionAllergies",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Composition.section.extension"
        },
        "code": {
            name: "code",
            dataType: CompositionUvIpsSectionCodeEight,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
            path: "Composition.section.code"
        },
        "emptyReason": {
            name: "emptyReason",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
            path: "Composition.section.emptyReason"
        },

        "author": {
            name: "author",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies who is responsible for the information in this section, not necessarily who typed it in.",
            path: "Composition.section.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Composition.section.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).",
            path: "Composition.section.focus"
        },

        "section": {
            name: "section",
            dataType: international401:CompositionSection,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A nested sub-section within this section.",
            path: "Composition.section.section"
        },

        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label for this particular section. This will be part of the rendered content for the document, and is often used to build a table of contents.",
            path: "Composition.section.title"
        },

        "mode": {
            name: "mode",
            dataType: CompositionUvIpsSectionModeNine,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
            path: "Composition.section.mode"
        },

        "entry": {
            name: "entry",
            dataType: r4:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "It lists the relevant allergies or intolerances (conditions) for that patient, describing the kind of reaction (e.g. rash, anaphylaxis,..); preferably the agents that cause it; and optionally the criticality and the certainty of the allergy. At a minimum, it should list currently active and any relevant historical allergies and adverse reactions. This entry shall be used to document that no information about allergies is available, or that no allergies are known .",
            path: "Composition.section.entry"
        },

        "orderedBy": {
            name: "orderedBy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specifies the order applied to the items in the section entries.",
            path: "Composition.section.orderedBy"
        },

        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Composition.section.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative.",
            path: "Composition.section.text"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type CompositionUvIpsSectionSectionAllergies record {|
    *CompositionUvIpsSection;

    r4:Extension[] extension?;
    CompositionUvIpsSectionCodeEight code?;
    r4:CodeableConcept emptyReason?;
    r4:Reference[] author?;
    r4:Extension[] modifierExtension?;
    r4:Reference focus?;
    international401:CompositionSection[] section?;
    string title;
    CompositionUvIpsSectionModeNine mode?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Composition.section.entry constraint. This field must be an array containing at most one item."
        }
    }
    r4:Reference[] entry;
    r4:CodeableConcept orderedBy?;
    string id?;
    r4:Narrative text?;
|};

