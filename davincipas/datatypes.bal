// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r4;

@r4:DataTypeDefinition {
    name: "PASIdentifier",
    baseType: (),
    elements: {
    
        "period": {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "Time period during which identifier is/was valid for use.",
            path: "Identifier.period"
        },    
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
            path: "Identifier.system"
        },    

        "use": {
            name: "use",
            dataType: ProfileIdentifierUse,
            min: 0,
            max: 1,
            isArray: false,
            description: "The purpose of this identifier.",
            path: "Identifier.use"
        },

        "assigner": {
            name: "assigner",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Organization that issued/manages the identifier.",
            path: "Identifier.assigner"
        },    

        "'type": {
            name: "'type",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.",
            path: "Identifier.type"
        },    
        "value": {
            name: "value",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The portion of the identifier typically relevant to the user and which is unique within the context of the system.",
            path: "Identifier.value"
        }

    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type ProfileIdentifier record {|
    *r4:Identifier;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    r4:Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)
    r4:Period period?;
    r4:uri system;
    ProfileIdentifierUse use?;
    r4:Reference assigner?;
    r4:CodeableConcept 'type?;
    string value;
|};

public enum ProfileIdentifierUse {
    CODE_PROFILEIDENTIFIERUSE_SECONDARY = "secondary",
    CODE_PROFILEIDENTIFIERUSE_TEMP = "temp",
    CODE_PROFILEIDENTIFIERUSE_USUAL = "usual",
    CODE_PROFILEIDENTIFIERUSE_OLD = "old",
    CODE_PROFILEIDENTIFIERUSE_OFFICIAL = "official"
};

@r4:DataTypeDefinition {
    name: "PASQuantity",
    baseType: (),
    elements: {
        "comparator": {
            name: "comparator",
            dataType: ProfileQuantityComparator,
            min: 0,
            max: 0,
            isArray: false,
            description: "Not allowed to be used in this context",
            path: "Quantity.comparator"
        },

        "unit": {
            name: "unit",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable form of the unit.",
            path: "Quantity.unit"
        },

        "system": {
            name: "system",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "The identification of the system that provides the coded form of the unit.",
            path: "Quantity.system"
        },

        "code": {
            name: "code",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            description: "A computer processable form of the unit in some unit representation system.",
            path: "Quantity.code"
        },

        "value": {
            name: "value",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
            path: "Quantity.value"
        }

    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type ProfileQuantity record {|
    *r4:Quantity;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    r4:Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    string unit?;
    r4:uri system?;
    r4:code code?;
    decimal value?;
|};

public enum ProfileQuantityComparator {
    CODE_PROFILEQUANTITYCOMPARATOR_LESS_THAN_OR_EQUAL = "<=",
    CODE_PROFILEQUANTITYCOMPARATOR_LESS_THAN = "<",
    CODE_PROFILEQUANTITYCOMPARATOR_GREATER_THAN = ">",
    CODE_PROFILEQUANTITYCOMPARATOR_GREATER_THAN_OR_EQUAL = ">="
};

@r4:DataTypeDefinition {
    name: "PASTiming",
    baseType: (),
    elements: {
    
        "period": {
            name: "period",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates the duration of time over which repetitions are to occur; e.g. to express '3 times per day', 3 would be the frequency and '1 day' would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.",
            path: "Timing.repeat.period"
        },    
        "code": {
            name: "code",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).",
            path: "Timing.code"
        },    
        "offset": {
            name: "offset",
            dataType: r4:unsignedInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.",
            path: "Timing.repeat.offset"
        },    
        "frequencyMax": {
            name: "frequencyMax",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.",
            path: "Timing.repeat.frequencyMax"
        },    
        "countMax": {
            name: "countMax",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.",
            path: "Timing.repeat.countMax"
        },    
        "periodMax": {
            name: "periodMax",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as 'do this once every 3-5 days.",
            path: "Timing.repeat.periodMax"
        },    
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Timing.modifierExtension"
        },    
        "count": {
            name: "count",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.",
            path: "Timing.repeat.count"
        },    

        "periodUnit": {
            name: "periodUnit",
            dataType: ProfileDatatypeTimingRepeatPeriodUnit,
            min: 0,
            max: 1,
            isArray: false,
            description: "The units of time for the period in UCUM units.",
            path: "Timing.repeat.periodUnit"
        },    
        "when": {
            name: "when",
            dataType: r4:code,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.",
            path: "Timing.repeat.when"
        },    
        "frequency": {
            name: "frequency",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.",
            path: "Timing.repeat.frequency"
        },    
        "boundsDuration": {
            name: "boundsDuration",
            dataType: r4:Duration,
            min: 0,
            max: 1,
            isArray: false,
            description: "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
            path: "Timing.repeat.bounds[x]"
        },    
        "duration": {
            name: "duration",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.",
            path: "Timing.repeat.duration"
        },    
        "durationMax": {
            name: "durationMax",
            dataType: decimal,
            min: 0,
            max: 1,
            isArray: false,
            description: "If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.",
            path: "Timing.repeat.durationMax"
        },    

        "dayOfWeek": {
            name: "dayOfWeek",
            dataType: ProfileDatatypeTimingRepeatDayOfWeek,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "If one or more days of week is provided, then the action happens only on the specified day(s).",
            path: "Timing.repeat.dayOfWeek"
        },

        "repeat": {
            name: "repeat",
            dataType: r4:ElementRepeat,
            min: 0,
            max: 1,
            isArray: false,
            description: "A set of rules that describe when the event is scheduled.",
            path: "Timing.repeat"
        },    

        "durationUnit": {
            name: "durationUnit",
            dataType: ProfileDatatypeTimingRepeatDurationUnit,
            min: 0,
            max: 1,
            isArray: false,
            description: "The units of time for the duration, in UCUM units.",
            path: "Timing.repeat.durationUnit"
        },

        "event": {
            name: "event",
            dataType: r4:dateTime,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifies specific times when the event occurs.",
            path: "Timing.event"
        },    

        "timeOfDay": {
            name: "timeOfDay",
            dataType: r4:time,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Specified time of day for action to take place.",
            path: "Timing.repeat.timeOfDay"
        }

    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type ProfileDatatypeTiming record {|
    *r4:Timing;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    r4:Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)
    decimal period?;
    r4:CodeableConcept code?;
    r4:unsignedInt offset?;
    r4:positiveInt frequencyMax?;
    r4:positiveInt countMax?;
    decimal periodMax?;
    r4:Extension[] modifierExtension?;
    r4:positiveInt count?;
    ProfileDatatypeTimingRepeatPeriodUnit periodUnit?;
    r4:code[] when?;
    r4:positiveInt frequency?;
    r4:Duration boundsDuration?;
    decimal duration?;
    decimal durationMax?;
    ProfileDatatypeTimingRepeatDayOfWeek[] dayOfWeek?;
    r4:ElementRepeat repeat?;
    ProfileDatatypeTimingRepeatDurationUnit durationUnit?;
    r4:dateTime[] event?;
    r4:time[] timeOfDay?;
|};

public enum ProfileDatatypeTimingRepeatDayOfWeek {
    CODE_PROFILEDATATYPETIMINGREPEATDAYOFWEEK_THU = "thu",
    CODE_PROFILEDATATYPETIMINGREPEATDAYOFWEEK_TUE = "tue",
    CODE_PROFILEDATATYPETIMINGREPEATDAYOFWEEK_WED = "wed",
    CODE_PROFILEDATATYPETIMINGREPEATDAYOFWEEK_SAT = "sat",
    CODE_PROFILEDATATYPETIMINGREPEATDAYOFWEEK_FRI = "fri",
    CODE_PROFILEDATATYPETIMINGREPEATDAYOFWEEK_MON = "mon",
    CODE_PROFILEDATATYPETIMINGREPEATDAYOFWEEK_SUN = "sun"
};

public enum ProfileDatatypeTimingRepeatDurationUnit {
    CODE_PROFILEDATATYPETIMINGREPEATDURATIONUNIT_A = "a",
    CODE_PROFILEDATATYPETIMINGREPEATDURATIONUNIT_MO = "mo",
    CODE_PROFILEDATATYPETIMINGREPEATDURATIONUNIT_S = "s",
    CODE_PROFILEDATATYPETIMINGREPEATDURATIONUNIT_MIN = "min",
    CODE_PROFILEDATATYPETIMINGREPEATDURATIONUNIT_D = "d",
    CODE_PROFILEDATATYPETIMINGREPEATDURATIONUNIT_WK = "wk",
    CODE_PROFILEDATATYPETIMINGREPEATDURATIONUNIT_H = "h"
};

public enum ProfileDatatypeTimingRepeatPeriodUnit {
    CODE_PROFILEDATATYPETIMINGREPEATPERIODUNIT_A = "a",
    CODE_PROFILEDATATYPETIMINGREPEATPERIODUNIT_MO = "mo",
    CODE_PROFILEDATATYPETIMINGREPEATPERIODUNIT_S = "s",
    CODE_PROFILEDATATYPETIMINGREPEATPERIODUNIT_MIN = "min",
    CODE_PROFILEDATATYPETIMINGREPEATPERIODUNIT_D = "d",
    CODE_PROFILEDATATYPETIMINGREPEATPERIODUNIT_WK = "wk",
    CODE_PROFILEDATATYPETIMINGREPEATPERIODUNIT_H = "h"
};


