// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r4;

public const string PROFILE_BASE_AUBASEENCOUNTER = "http://hl7.org.au/fhir/StructureDefinition/au-encounter";
public const RESOURCE_NAME_AUBASEENCOUNTER = "Encounter";

# FHIR AUBaseEncounter resource record.
#
# + resourceType - The type of the resource describes
# + serviceType - Broad categorization of the service that is to be provided (e.g. cardiology).
# + partOf - Another Encounter of which this encounter is a part of (administratively or in time).
# + extension - An Extension
# + subject - The patient or group present at the encounter.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + reasonReference - Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
# + appointment - The appointment that scheduled this encounter.
# + language - The base language in which the resource is written.
# + 'type - Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
# + participant - The list of people responsible for providing the service.
# + episodeOfCare - Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem. The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + reasonCode - Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + 'class - Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
# + basedOn - The request this encounter satisfies (e.g. incoming referral or procedure request).
# + identifier - Identifier(s) by which this encounter is known.
# + period - The start and end time of the encounter.
# + classHistory - The class history permits the tracking of the encounters transitions without needing to go through the resource history. This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
# + hospitalization - Details about the admission to a healthcare service.
# + length - Quantity of time the encounter lasted. This excludes the time during leaves of absence.
# + diagnosis - The list of diagnosis relevant to this encounter.
# + priority - Indicates the urgency of the encounter.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + statusHistory - The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + serviceProvider - The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation. Refer to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + location - List of locations where the patient has been during this encounter.
# + account - The set of accounts that may be used for billing for this Encounter.
# + status - planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
@r4:ResourceDefinition {
    resourceType: "Encounter",
    baseType: r4:DomainResource,
    profile: "http://hl7.org.au/fhir/StructureDefinition/au-encounter",
    elements: {
        "serviceType" : {
            name: "serviceType",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.serviceType",
            valueSet: "https://healthterminologies.gov.au/fhir/ValueSet/service-type-1"
        },
        "partOf" : {
            name: "partOf",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.partOf"
        },
        "extension" : {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.extension"
        },
        "subject" : {
            name: "subject",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.subject"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.modifierExtension"
        },
        "reasonReference" : {
            name: "reasonReference",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.reasonReference"
        },
        "appointment" : {
            name: "appointment",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.appointment"
        },
        "language" : {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "type" : {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.type",
            valueSet: "https://healthterminologies.gov.au/fhir/ValueSet/encounter-type-1"
        },
        "participant" : {
            name: "participant",
            dataType: EncounterParticipant,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.participant"
        },
        "episodeOfCare" : {
            name: "episodeOfCare",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.episodeOfCare"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.id"
        },
        "reasonCode" : {
            name: "reasonCode",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.reasonCode",
            valueSet: "http://hl7.org/fhir/ValueSet/encounter-reason"
        },
        "text" : {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.text"
        },
        "class" : {
            name: "class",
            dataType: r4:Coding,
            min: 1,
            max: 1,
            isArray: false,
            path: "Encounter.class",
            valueSet: "http://terminology.hl7.org.au/ValueSet/v3-ActEncounterCode-extended"
        },
        "basedOn" : {
            name: "basedOn",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.basedOn"
        },
        "identifier" : {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.identifier"
        },
        "period" : {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.period"
        },
        "classHistory" : {
            name: "classHistory",
            dataType: EncounterClassHistory,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.classHistory"
        },
        "hospitalization" : {
            name: "hospitalization",
            dataType: EncounterHospitalization,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.hospitalization"
        },
        "length" : {
            name: "length",
            dataType: r4:Duration,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.length"
        },
        "diagnosis" : {
            name: "diagnosis",
            dataType: EncounterDiagnosis,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.diagnosis"
        },
        "priority" : {
            name: "priority",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.priority",
            valueSet: "http://terminology.hl7.org/ValueSet/v3-ActPriority"
        },
        "contained" : {
            name: "contained",
            dataType: r4:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.contained"
        },
        "statusHistory" : {
            name: "statusHistory",
            dataType: EncounterStatusHistory,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.statusHistory"
        },
        "meta" : {
            name: "meta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.meta"
        },
        "serviceProvider" : {
            name: "serviceProvider",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.serviceProvider"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Encounter.implicitRules"
        },
        "location" : {
            name: "location",
            dataType: EncounterLocation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.location"
        },
        "account" : {
            name: "account",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Encounter.account"
        },
        "status" : {
            name: "status",
            dataType: EncounterStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "Encounter.status",
            valueSet: "http://hl7.org/fhir/ValueSet/encounter-status|4.0.1"
        }
    },
    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}
public type AUBaseEncounter record {|
    *r4:DomainResource;

    RESOURCE_NAME_AUBASEENCOUNTER resourceType = RESOURCE_NAME_AUBASEENCOUNTER;

    BaseAUBaseEncounterMeta meta = {
        profile : [PROFILE_BASE_AUBASEENCOUNTER]
    };
    r4:CodeableConcept serviceType?;
    r4:Reference partOf?;
    r4:Extension[] extension?;
    r4:Reference subject?;
    r4:Extension[] modifierExtension?;
    r4:Reference[] reasonReference?;
    r4:Reference[] appointment?;
    r4:code language?;
    r4:CodeableConcept[] 'type?;
    EncounterParticipant[] participant?;
    r4:Reference[] episodeOfCare?;
    string id?;
    r4:CodeableConcept[] reasonCode?;
    r4:Narrative text?;
    r4:Coding 'class;
    r4:Reference[] basedOn?;
    r4:Identifier[] identifier?;
    r4:Period period?;
    EncounterClassHistory[] classHistory?;
    EncounterHospitalization hospitalization?;
    r4:Duration length?;
    EncounterDiagnosis[] diagnosis?;
    r4:CodeableConcept priority?;
    r4:Resource[] contained?;
    EncounterStatusHistory[] statusHistory?;
    r4:Reference serviceProvider?;
    r4:uri implicitRules?;
    EncounterLocation[] location?;
    r4:Reference[] account?;
    EncounterStatus status;
    never...;
|};

@r4:DataTypeDefinition {
    name: "BaseEncounterMeta",
    baseType: r4:Meta,
    elements: {},
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type BaseAUBaseEncounterMeta record {|
    *r4:Meta;

    //Inherited child element from "Element" (Redefining to maintain order when serialize) (START)
    string id?;
    r4:Extension[] extension?;
    //Inherited child element from "Element" (Redefining to maintain order when serialize) (END)

    r4:id versionId?;
    r4:instant lastUpdated?;
    r4:uri 'source?;
    r4:canonical[] profile = ["http://hl7.org.au/fhir/StructureDefinition/au-encounter"];
    r4:Coding[] security?;
    r4:Coding[] tag?;
|};

# FHIR EncounterHospitalization datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + specialArrangement - Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
# + reAdmission - Whether this hospitalization is a readmission and why if known.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + origin - The location/organization from which the patient came before admission.
# + destination - Location/organization to which the patient is discharged.
# + dietPreference - Diet preferences reported by the patient.
# + preAdmissionIdentifier - Pre-admission identifier.
# + specialCourtesy - Special courtesies (VIP, board member).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + dischargeDisposition - Category or kind of location after discharge.
# + admitSource - From where patient was admitted (physician referral, transfer).
@r4:DataTypeDefinition {
    name: "EncounterHospitalization",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Encounter.hospitalization.extension"
        },
        "specialArrangement": {
            name: "specialArrangement",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.",
            path: "Encounter.hospitalization.specialArrangement"
        },
        "reAdmission": {
            name: "reAdmission",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether this hospitalization is a readmission and why if known.",
            path: "Encounter.hospitalization.reAdmission"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Encounter.hospitalization.modifierExtension"
        },
        "origin": {
            name: "origin",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The location/organization from which the patient came before admission.",
            path: "Encounter.hospitalization.origin"
        },
        "destination": {
            name: "destination",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Location/organization to which the patient is discharged.",
            path: "Encounter.hospitalization.destination"
        },
        "dietPreference": {
            name: "dietPreference",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Diet preferences reported by the patient.",
            path: "Encounter.hospitalization.dietPreference"
        },
        "preAdmissionIdentifier": {
            name: "preAdmissionIdentifier",
            dataType: r4:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "Pre-admission identifier.",
            path: "Encounter.hospitalization.preAdmissionIdentifier"
        },
        "specialCourtesy": {
            name: "specialCourtesy",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Special courtesies (VIP, board member).",
            path: "Encounter.hospitalization.specialCourtesy"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Encounter.hospitalization.id"
        },
        "dischargeDisposition": {
            name: "dischargeDisposition",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Category or kind of location after discharge.",
            path: "Encounter.hospitalization.dischargeDisposition"
        },
        "admitSource": {
            name: "admitSource",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "From where patient was admitted (physician referral, transfer).",
            path: "Encounter.hospitalization.admitSource"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EncounterHospitalization record {|
    r4:Extension[] extension?;
    r4:CodeableConcept[] specialArrangement?;
    r4:CodeableConcept reAdmission?;
    r4:Extension[] modifierExtension?;
    r4:Reference origin?;
    r4:Reference destination?;
    r4:CodeableConcept[] dietPreference?;
    r4:Identifier preAdmissionIdentifier?;
    r4:CodeableConcept[] specialCourtesy?;
    string id?;
    r4:CodeableConcept dischargeDisposition?;
    r4:CodeableConcept admitSource?;
|};

# FHIR EncounterDiagnosis datatype record.
#
# + condition - Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + use - Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + rank - Ranking of the diagnosis (for each role type).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "EncounterDiagnosis",
    baseType: (),
    elements: {
        "condition": {
            name: "condition",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.",
            path: "Encounter.diagnosis.condition"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Encounter.diagnosis.extension"
        },
        "use": {
            name: "use",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).",
            path: "Encounter.diagnosis.use"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Encounter.diagnosis.modifierExtension"
        },
        "rank": {
            name: "rank",
            dataType: r4:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "Ranking of the diagnosis (for each role type).",
            path: "Encounter.diagnosis.rank"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Encounter.diagnosis.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EncounterDiagnosis record {|
    r4:Reference condition;
    r4:Extension[] extension?;
    r4:CodeableConcept use?;
    r4:Extension[] modifierExtension?;
    r4:positiveInt rank?;
    string id?;
|};

# FHIR EncounterClassHistory datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - The time that the episode was in the specified class.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'class - inpatient | outpatient | ambulatory | emergency +.
@r4:DataTypeDefinition {
    name: "EncounterClassHistory",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Encounter.classHistory.extension"
        },
        "period": {
            name: "period",
            dataType: r4:Period,
            min: 1,
            max: 1,
            isArray: false,
            description: "The time that the episode was in the specified class.",
            path: "Encounter.classHistory.period"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Encounter.classHistory.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Encounter.classHistory.id"
        },
        "class": {
            name: "class",
            dataType: r4:Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "inpatient | outpatient | ambulatory | emergency +.",
            path: "Encounter.classHistory.class"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EncounterClassHistory record {|
    r4:Extension[] extension?;
    r4:Period period;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:Coding 'class;
|};

# EncounterLocationStatus enum
public enum EncounterLocationStatus {
   CODE_STATUS_RESERVED = "reserved",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_PLANNED = "planned",
   CODE_STATUS_COMPLETED = "completed"
}

# FHIR EncounterLocation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - Time period during which the patient was present at the location.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + physicalType - This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
# + location - The location where the encounter takes place.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + status - The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
@r4:DataTypeDefinition {
    name: "EncounterLocation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Encounter.location.extension"
        },
        "period": {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "Time period during which the patient was present at the location.",
            path: "Encounter.location.period"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Encounter.location.modifierExtension"
        },
        "physicalType": {
            name: "physicalType",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.",
            path: "Encounter.location.physicalType"
        },
        "location": {
            name: "location",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The location where the encounter takes place.",
            path: "Encounter.location.location"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Encounter.location.id"
        },
        "status": {
            name: "status",
            dataType: EncounterLocationStatus,
            min: 0,
            max: 1,
            isArray: false,
            description: "The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.",
            path: "Encounter.location.status"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EncounterLocation record {|
    r4:Extension[] extension?;
    r4:Period period?;
    r4:Extension[] modifierExtension?;
    r4:CodeableConcept physicalType?;
    r4:Reference location;
    string id?;
    EncounterLocationStatus status?;
|};

# EncounterStatusHistoryStatus enum
public enum EncounterStatusHistoryStatus {
   CODE_STATUS_TRIAGED = "triaged",
   CODE_STATUS_ARRIVED = "arrived",
   CODE_STATUS_ONLEAVE = "onleave",
   CODE_STATUS_CANCELLED = "cancelled",
   CODE_STATUS_FINISHED = "finished",
   CODE_STATUS_PLANNED = "planned",
   CODE_STATUS_IN_PROGRESS = "in-progress"
}

# FHIR EncounterParticipant datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
# + individual - Persons involved in the encounter other than the patient.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Role of participant in encounter.
@r4:DataTypeDefinition {
    name: "EncounterParticipant",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Encounter.participant.extension"
        },
        "period": {
            name: "period",
            dataType: r4:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.",
            path: "Encounter.participant.period"
        },
        "individual": {
            name: "individual",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Persons involved in the encounter other than the patient.",
            path: "Encounter.participant.individual"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Encounter.participant.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Encounter.participant.id"
        },
        "type": {
            name: "type",
            dataType: r4:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Role of participant in encounter.",
            path: "Encounter.participant.type"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EncounterParticipant record {|
    r4:Extension[] extension?;
    r4:Period period?;
    r4:Reference individual?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:CodeableConcept[] 'type?;
|};

# EncounterStatus enum
public enum EncounterStatus {
   CODE_STATUS_TRIAGED = "triaged",
   CODE_STATUS_ARRIVED = "arrived",
   CODE_STATUS_ONLEAVE = "onleave",
   CODE_STATUS_CANCELLED = "cancelled",
   CODE_STATUS_FINISHED = "finished",
   CODE_STATUS_PLANNED = "planned",
   CODE_STATUS_IN_PROGRESS = "in-progress"
}

# FHIR EncounterStatusHistory datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - The time that the episode was in the specified status.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + status - planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
@r4:DataTypeDefinition {
    name: "EncounterStatusHistory",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Encounter.statusHistory.extension"
        },
        "period": {
            name: "period",
            dataType: r4:Period,
            min: 1,
            max: 1,
            isArray: false,
            description: "The time that the episode was in the specified status.",
            path: "Encounter.statusHistory.period"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Encounter.statusHistory.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Encounter.statusHistory.id"
        },
        "status": {
            name: "status",
            dataType: EncounterStatusHistoryStatus,
            min: 1,
            max: 1,
            isArray: false,
            description: "planned | arrived | triaged | in-progress | onleave | finished | cancelled +.",
            path: "Encounter.statusHistory.status"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type EncounterStatusHistory record {|
    r4:Extension[] extension?;
    r4:Period period;
    r4:Extension[] modifierExtension?;
    string id?;
    EncounterStatusHistoryStatus status;
|};

