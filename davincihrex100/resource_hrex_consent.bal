// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.
import ballerina/constraint;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhir.r4.international401;

public const string PROFILE_BASE_HREXCONSENT = "http://hl7.org/fhir/us/davinci-hrex/StructureDefinition/hrex-consent";
public const RESOURCE_NAME_HREXCONSENT = "Consent";

# FHIR HRexConsent resource record.
#
# + resourceType - The type of the resource describes
# + dateTime - When this Consent was issued / created / indexed.
# + sourceReference - The source on which this consent statement is based. The source might be a scanned original paper form, or a reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
# + identifier - Unique identifier for this copy of the Consent Statement.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + performer - Either the Grantor, which is the entity responsible for granting the rights listed in a Consent Directive or the Grantee, which is the entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
# + policyRule - A reference to the specific base computable regulation or policy.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + patient - The patient/healthcare consumer to whom this consent applies.
# + provision - An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
# + organization - The organization that manages the consent, and the framework within which it is executed.
# + scope - A selector of the type of consent being presented: ADR, Privacy, Treatment, Research. This list is now extensible.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + category - A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
# * category Slicings
# 1) HRexConsentCategoryDisclosure: Classification of the consent statement - for indexing/retrieval
# - min = 0
# - max = *
#
# + verification - Whether a treatment instruction (e.g. artificial respiration yes or no) was verified with the patient, his/her family or another authorized person.
# + policy - The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
# * policy Slicings
# 1) HRexConsentPolicyHrex: Policies covered by this consent
# - min = 1
# - max = *
#
# + status - Indicates the current state of this consent.
@r4:ResourceDefinition {
    resourceType: "Consent",
    baseType: r4:DomainResource,
    profile: "http://hl7.org/fhir/us/davinci-hrex/StructureDefinition/hrex-consent",
    elements: {
        "dateTime": {
            name: "dateTime",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.dateTime"
        },
        "sourceReference": {
            name: "sourceReference",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.source[x]"
        },
        "identifier": {
            name: "identifier",
            dataType: r4:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.identifier"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.extension"
        },
        "performer": {
            name: "performer",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: true,
            path: "Consent.performer"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.modifierExtension"
        },
        "language": {
            name: "language",
            dataType: r4:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.language",
            valueSet: "http://hl7.org/fhir/ValueSet/languages"
        },
        "contained": {
            name: "contained",
            dataType: r4:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.contained"
        },
        "policyRule": {
            name: "policyRule",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.policyRule",
            valueSet: "http://hl7.org/fhir/ValueSet/consent-policy"
        },
        "meta": {
            name: "meta",
            dataType: r4:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.meta"
        },
        "patient": {
            name: "patient",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "Consent.patient"
        },
        "provision": {
            name: "provision",
            dataType: HRexConsentProvision,
            min: 1,
            max: 1,
            isArray: false,
            path: "Consent.provision"
        },
        "organization": {
            name: "organization",
            dataType: r4:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.organization"
        },
        "scope": {
            name: "scope",
            dataType: HRexConsentScope,
            min: 1,
            max: 1,
            isArray: false,
            path: "Consent.scope",
            valueSet: "http://hl7.org/fhir/ValueSet/consent-scope"
        },
        "implicitRules": {
            name: "implicitRules",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.implicitRules"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.id"
        },
        "text": {
            name: "text",
            dataType: r4:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.text"
        },
        "category": {
            name: "category",
            dataType: r4:CodeableConcept,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.category",
            valueSet: "http://hl7.org/fhir/ValueSet/consent-category"
        },
        "verification": {
            name: "verification",
            dataType: HRexConsentVerification,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.verification"
        },
        "policy": {
            name: "policy",
            dataType: HRexConsentPolicy,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.policy"
        },
        "status": {
            name: "status",
            dataType: HRexConsentStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "Consent.status",
            valueSet: "http://hl7.org/fhir/ValueSet/consent-state-codes|4.0.1"
        }
    },
    serializers: {
        'xml: r4:fhirResourceXMLSerializer,
        'json: r4:fhirResourceJsonSerializer
    }
}
public type HRexConsent record {|
    *r4:DomainResource;

    RESOURCE_NAME_HREXCONSENT resourceType = RESOURCE_NAME_HREXCONSENT;

    r4:dateTime dateTime?;
    r4:Reference sourceReference?;
    r4:Identifier[] identifier?;
    r4:Extension[] extension?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Consent.performer constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Consent.performer constraint. This field must be an array containing at most one item."
        }
    }
    r4:Reference[] performer;
    r4:Extension[] modifierExtension?;
    r4:code language?;
    r4:Resource[] contained?;
    r4:CodeableConcept policyRule?;
    r4:Meta meta?;
    r4:Reference patient;
    HRexConsentProvision provision;
    r4:Reference[] organization?;
    HRexConsentScope scope;
    r4:uri implicitRules?;
    string id?;
    r4:Narrative text?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Consent.category constraint. This field must be an array containing at least one item."
        }
    }
    r4:CodeableConcept[] category;
    HRexConsentVerification[] verification?;
    HRexConsentPolicy[] policy?;
    HRexConsentStatus status;
    r4:Element...;
|};

# FHIR HRexConsentCategoryDisclosure datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "HRexConsentCategoryDisclosure",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: HRexConsentCategoryCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Consent.category.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentCategoryDisclosure record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Consent.category.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Consent.category.coding constraint. This field must be an array containing at most one item."
        }
    }
    HRexConsentCategoryCoding[] coding;
|};

# FHIR HRexConsentProvisionData datatype record.
#
# + reference - A reference to a specific resource that defines which resources are covered by this consent.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + meaning - How the resource reference is interpreted when testing consent restrictions.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionData",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "A reference to a specific resource that defines which resources are covered by this consent.",
            path: "Consent.provision.data.reference"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.provision.data.extension"
        },
        "meaning": {
            name: "meaning",
            dataType: HRexConsentProvisionDataMeaning,
            min: 1,
            max: 1,
            isArray: false,
            description: "How the resource reference is interpreted when testing consent restrictions.",
            path: "Consent.provision.data.meaning"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.provision.data.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.provision.data.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionData record {|
    *r4:BackboneElement;

    r4:Reference reference;
    r4:Extension[] extension?;
    HRexConsentProvisionDataMeaning meaning;
    r4:Extension[] modifierExtension?;
    string id?;
|};

# FHIR HRexConsentProvisionActorRole datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionActorRole",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: HRexConsentProvisionActorRoleCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Consent.provision.actor.role.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionActorRole record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Consent.provision.actor.role.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Consent.provision.actor.role.coding constraint. This field must be an array containing at most one item."
        }
    }
    HRexConsentProvisionActorRoleCoding[] coding;
|};

# FHIR HRexConsentScopeCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "HRexConsentScopeCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Consent.scope.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Consent.scope.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentScopeCoding record {|
    *r4:Coding;

    r4:uri system = "http://terminology.hl7.org/CodeSystem/consentscope";
    r4:code code = "patient-privacy";
|};

# FHIR HRexConsentProvisionActorSource datatype record.
#
# + reference - The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - How the individual is involved in the resources content that is described in the exception.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionActorSource",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').",
            path: "Consent.provision.actor.reference"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.provision.actor.extension"
        },
        "role": {
            name: "role",
            dataType: HRexConsentProvisionActorRole,
            min: 1,
            max: 1,
            isArray: false,
            description: "How the individual is involved in the resources content that is described in the exception.",
            path: "Consent.provision.actor.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.provision.actor.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.provision.actor.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionActorSource record {|
    *HRexConsentProvisionActor;

    r4:Reference reference;
    r4:Extension[] extension?;
    HRexConsentProvisionActorRole role;
    r4:Extension[] modifierExtension?;
    string id?;
|};

# FHIR HRexConsentCategoryCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "HRexConsentCategoryCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Consent.category.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Consent.category.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentCategoryCoding record {|
    *r4:Coding;

    r4:uri system = "http://terminology.hl7.org/CodeSystem/v3-ActCode";
    r4:code code = "IDSCL";
|};


# HRexConsentProvisionDataMeaning enum
public enum HRexConsentProvisionDataMeaning {
    CODE_MEANING_INSTANCE = "instance",
    CODE_MEANING_RELATED = "related",
    CODE_MEANING_DEPENDENTS = "dependents",
    CODE_MEANING_AUTHOREDBY = "authoredby"
}

# FHIR HRexConsentProvisionAction datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionAction",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: HRexConsentProvisionActionCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Consent.provision.action.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionAction record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Consent.provision.action.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Consent.provision.action.coding constraint. This field must be an array containing at most one item."
        }
    }
    HRexConsentProvisionActionCoding[] coding;
|};

# FHIR HRexConsentProvisionActorRecipient datatype record.
#
# + reference - The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - How the individual is involved in the resources content that is described in the exception.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionActorRecipient",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').",
            path: "Consent.provision.actor.reference"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.provision.actor.extension"
        },
        "role": {
            name: "role",
            dataType: HRexConsentProvisionActorRoleOne,
            min: 1,
            max: 1,
            isArray: false,
            description: "How the individual is involved in the resources content that is described in the exception.",
            path: "Consent.provision.actor.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.provision.actor.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.provision.actor.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionActorRecipient record {|
    *HRexConsentProvisionActor;

    r4:Reference reference;
    r4:Extension[] extension?;
    HRexConsentProvisionActorRoleOne role;
    r4:Extension[] modifierExtension?;
    string id?;
|};

# FHIR HRexConsentProvisionActorRoleOne datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionActorRoleOne",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: HRexConsentProvisionActorRoleCodingOne,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Consent.provision.actor.role.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionActorRoleOne record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Consent.provision.actor.role.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Consent.provision.actor.role.coding constraint. This field must be an array containing at most one item."
        }
    }
    HRexConsentProvisionActorRoleCodingOne[] coding;
|};

# FHIR HRexConsentProvision datatype record.
#
# + dataPeriod - Clinical or Operational Relevant period of time that bounds the data controlled by this rule.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - The timeframe in this rule is valid.
# + code - If this code is found in an instance, then the rule applies.
# + data - The resources controlled by this rule if specific resources are referenced.
# + purpose - The context of the activities a user is taking - why the user is accessing the data - that are controlled by this rule.
# + securityLabel - A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'type - Action to take - permit or deny - when the rule conditions are met. Not permitted in root rule, required in all nested rules.
# + actor - Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
# + provision - Rules which provide exceptions to the base rule or subrules.
# + action - Actions controlled by this Rule.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'class - The class of information covered by this rule. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to.
@r4:DataTypeDefinition {
    name: "HRexConsentProvision",
    baseType: (),
    elements: {
        "dataPeriod": {
            name: "dataPeriod",
            dataType: r4:Period,
            min: 0,
            max: 0,
            isArray: false,
            description: "Clinical or Operational Relevant period of time that bounds the data controlled by this rule.",
            path: "Consent.provision.dataPeriod"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.provision.extension"
        },
        "period": {
            name: "period",
            dataType: r4:Period,
            min: 1,
            max: 1,
            isArray: false,
            description: "The timeframe in this rule is valid.",
            path: "Consent.provision.period"
        },
        "code": {
            name: "code",
            dataType: r4:CodeableConcept,
            min: 0,
            max: 0,
            isArray: true,
            description: "If this code is found in an instance, then the rule applies.",
            path: "Consent.provision.code"
        },
        "data": {
            name: "data",
            dataType: HRexConsentProvisionData,
            min: 0,
            max: 0,
            isArray: true,
            description: "The resources controlled by this rule if specific resources are referenced.",
            path: "Consent.provision.data"
        },
        "purpose": {
            name: "purpose",
            dataType: r4:Coding,
            min: 0,
            max: 0,
            isArray: true,
            description: "The context of the activities a user is taking - why the user is accessing the data - that are controlled by this rule.",
            path: "Consent.provision.purpose"
        },
        "securityLabel": {
            name: "securityLabel",
            dataType: r4:Coding,
            min: 0,
            max: 0,
            isArray: true,
            description: "A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.",
            path: "Consent.provision.securityLabel"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.provision.modifierExtension"
        },
        "type": {
            name: "type",
            dataType: HRexConsentProvisionType,
            min: 1,
            max: 1,
            isArray: false,
            description: "Action to take - permit or deny - when the rule conditions are met. Not permitted in root rule, required in all nested rules.",
            path: "Consent.provision.type"
        },
        "actor": {
            name: "actor",
            dataType: HRexConsentProvisionActor,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Who or what is controlled by this rule. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').",
            path: "Consent.provision.actor"
        },

        "provision": {
            name: "provision",
            dataType: international401:ConsentProvision,
            min: 0,
            max: 0,
            isArray: true,
            description: "Rules which provide exceptions to the base rule or subrules.",
            path: "Consent.provision.provision"
        },

        "action": {
            name: "action",
            dataType: HRexConsentProvisionAction,
            min: 1,
            max: 1,
            isArray: true,
            description: "Actions controlled by this Rule.",
            path: "Consent.provision.action"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.provision.id"
        },
        "class": {
            name: "class",
            dataType: r4:Coding,
            min: 0,
            max: 0,
            isArray: true,
            description: "The class of information covered by this rule. The type can be a FHIR resource type, a profile on a type, or a CDA document, or some other type that indicates what sort of information the consent relates to.",
            path: "Consent.provision.class"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvision record {|
    *r4:BackboneElement;

    r4:Period dataPeriod?;
    r4:Extension[] extension?;
    r4:Period period;
    r4:CodeableConcept [] code?;
    HRexConsentProvisionData [] data?;
    r4:Coding [] purpose?;
    r4:Coding [] securityLabel?;
    r4:Extension[] modifierExtension?;
    HRexConsentProvisionType 'type = "permit";
    HRexConsentProvisionActor[] actor?;
    international401:ConsentProvision [] provision?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Consent.provision.action constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Consent.provision.action constraint. This field must be an array containing at most one item."
        }
    }
    HRexConsentProvisionAction[] action;
    string id?;
    r4:Coding [] 'class?;
|};

# FHIR HRexConsentPolicy datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + authority - Entity or Organization having regulatory jurisdiction or accountability for enforcing policies pertaining to Consent Directives.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + uri - The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.
@r4:DataTypeDefinition {
    name: "HRexConsentPolicy",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.policy.extension"
        },
        "authority": {
            name: "authority",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "Entity or Organization having regulatory jurisdiction or accountability for enforcing policies pertaining to Consent Directives.",
            path: "Consent.policy.authority"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.policy.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.policy.id"
        },
        "uri": {
            name: "uri",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "The references to the policies that are included in this consent scope. Policies may be organizational, but are often defined jurisdictionally, or in law.",
            path: "Consent.policy.uri"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentPolicy record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:uri authority?;
    r4:Extension[] modifierExtension?;
    string id?;
    r4:uri uri?;
|};

# HRexConsentStatus enum
public enum HRexConsentStatus {
    CODE_STATUS_INACTIVE = "inactive",
    CODE_STATUS_PROPOSED = "proposed",
    CODE_STATUS_REJECTED = "rejected",
    CODE_STATUS_DRAFT = "draft",
    CODE_STATUS_ACTIVE = "active",
    CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error"
}

# FHIR HRexConsentPolicyHrex datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + authority - Entity or Organization having regulatory jurisdiction or accountability for enforcing policies pertaining to Consent Directives.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.

@r4:DataTypeDefinition {
    name: "HRexConsentPolicyHrex",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.policy.extension"
        },
        "authority": {
            name: "authority",
            dataType: r4:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "Entity or Organization having regulatory jurisdiction or accountability for enforcing policies pertaining to Consent Directives.",
            path: "Consent.policy.authority"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.policy.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.policy.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentPolicyHrex record {|
    *HRexConsentPolicy;

    r4:Extension[] extension?;
    r4:uri authority?;
    r4:Extension[] modifierExtension?;
    string id?;
|};

# FHIR HRexConsentVerification datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + verifiedWith - Who verified the instruction (Patient, Relative or other Authorized Person).
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + verified - Has the instruction been verified.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + verificationDate - Date verification was collected.
@r4:DataTypeDefinition {
    name: "HRexConsentVerification",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.verification.extension"
        },
        "verifiedWith": {
            name: "verifiedWith",
            dataType: r4:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Who verified the instruction (Patient, Relative or other Authorized Person).",
            path: "Consent.verification.verifiedWith"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.verification.modifierExtension"
        },
        "verified": {
            name: "verified",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Has the instruction been verified.",
            path: "Consent.verification.verified"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.verification.id"
        },
        "verificationDate": {
            name: "verificationDate",
            dataType: r4:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Date verification was collected.",
            path: "Consent.verification.verificationDate"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentVerification record {|
    *r4:BackboneElement;

    r4:Extension[] extension?;
    r4:Reference verifiedWith?;
    r4:Extension[] modifierExtension?;
    boolean verified;
    string id?;
    r4:dateTime verificationDate?;
|};

# FHIR HRexConsentScope datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r4:DataTypeDefinition {
    name: "HRexConsentScope",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: HRexConsentScopeCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Consent.scope.coding"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentScope record {|
    *r4:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Consent.scope.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Consent.scope.coding constraint. This field must be an array containing at most one item."
        }
    }
    HRexConsentScopeCoding[] coding;
|};

# FHIR HRexConsentProvisionActorRoleCodingOne datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionActorRoleCodingOne",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Consent.provision.actor.role.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Consent.provision.actor.role.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionActorRoleCodingOne record {|
    *r4:Coding;

    r4:uri system = "http://terminology.hl7.org/CodeSystem/v3-ParticipationType";
    r4:code code = "IRCP";
|};

# FHIR HRexConsentProvisionActor datatype record.
#
# + reference - The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - How the individual is involved in the resources content that is described in the exception.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionActor",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r4:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').",
            path: "Consent.provision.actor.reference"
        },
        "extension": {
            name: "extension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.provision.actor.extension"
        },
        "role": {
            name: "role",
            dataType: r4:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "How the individual is involved in the resources content that is described in the exception.",
            path: "Consent.provision.actor.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r4:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.provision.actor.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.provision.actor.id"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionActor record {|
    *r4:BackboneElement;

    r4:Reference reference;
    r4:Extension[] extension?;
    r4:CodeableConcept role;
    r4:Extension[] modifierExtension?;
    string id?;
|};

# FHIR HRexConsentProvisionActorRoleCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionActorRoleCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Consent.provision.actor.role.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Consent.provision.actor.role.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionActorRoleCoding record {|
    *r4:Coding;

    r4:uri system = "http://terminology.hl7.org/CodeSystem/provenance-participant-type";
    r4:code code = "performer";
|};

# HRexConsentProvisionType enum
public enum HRexConsentProvisionType {
    CODE_TYPE_DENY = "deny",
    CODE_TYPE_PERMIT = "permit"
}

# FHIR HRexConsentProvisionActionCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r4:DataTypeDefinition {
    name: "HRexConsentProvisionActionCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r4:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Consent.provision.action.coding.system"
        },
        "code": {
            name: "code",
            dataType: r4:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Consent.provision.action.coding.code"
        }
    },
    serializers: {
        'xml: r4:complexDataTypeXMLSerializer,
        'json: r4:complexDataTypeJsonSerializer
    }
}
public type HRexConsentProvisionActionCoding record {|
    *r4:Coding;

    r4:uri system = "http://terminology.hl7.org/CodeSystem/consentaction";
    r4:code code = "disclose";
|};
